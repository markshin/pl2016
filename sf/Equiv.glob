DIGEST d2282c5ca06825c7dbe7f26da9930b57
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
def 3825:3830 <> prog_a
R3834:3836 Imp <> com ind
R3843:3848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3876:3883 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3912:3917 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3849:3852 Imp <> BNot constr
R3855:3857 Imp <> BLe constr
R3868:3871 Imp <> ANum constr
R3860:3862 Imp <> AId constr
R3864:3864 Imp <> X def
R3885:3889 Imp <> ::x_'::='_x not
R3884:3884 Imp <> X def
R3890:3894 Imp <> APlus constr
R3905:3908 Imp <> ANum constr
R3897:3899 Imp <> AId constr
R3901:3901 Imp <> X def
def 3932:3937 <> prog_b
R3941:3943 Imp <> com ind
R4060:4064 Imp <> ::x_';;'_x not
R3950:3953 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3974:3983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4031:4042 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4055:4059 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3954:3956 Imp <> BEq constr
R3967:3970 Imp <> ANum constr
R3959:3961 Imp <> AId constr
R3963:3963 Imp <> X def
R4012:4018 Imp <> ::x_';;'_x not
R3985:3989 Imp <> ::x_'::='_x not
R3984:3984 Imp <> X def
R3990:3994 Imp <> APlus constr
R4005:4008 Imp <> ANum constr
R3997:3999 Imp <> AId constr
R4001:4001 Imp <> X def
R4020:4024 Imp <> ::x_'::='_x not
R4019:4019 Imp <> Y def
R4025:4028 Imp <> ANum constr
R4044:4048 Imp <> ::x_'::='_x not
R4043:4043 Imp <> Y def
R4049:4052 Imp <> ANum constr
R4093:4097 Imp <> ::x_';;'_x not
R4066:4070 Imp <> ::x_'::='_x not
R4065:4065 Imp <> X def
R4071:4076 Imp <> AMinus constr
R4087:4089 Imp <> AId constr
R4091:4091 Imp <> Y def
R4079:4081 Imp <> AId constr
R4083:4083 Imp <> X def
R4099:4103 Imp <> ::x_'::='_x not
R4098:4098 Imp <> Y def
R4104:4107 Imp <> ANum constr
def 4124:4129 <> prog_c
R4133:4135 Imp <> com ind
R4142:4145 Imp <> ::'SKIP' not
def 4160:4165 <> prog_d
R4169:4171 Imp <> com ind
R4178:4183 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4211:4218 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4263:4268 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4187 Imp <> BNot constr
R4190:4192 Imp <> BEq constr
R4203:4206 Imp <> ANum constr
R4195:4197 Imp <> AId constr
R4199:4199 Imp <> X def
R4220:4224 Imp <> ::x_'::='_x not
R4219:4219 Imp <> X def
R4225:4229 Imp <> APlus constr
R4256:4259 Imp <> ANum constr
R4232:4236 Imp <> AMult constr
R4247:4249 Imp <> AId constr
R4251:4251 Imp <> Y def
R4239:4241 Imp <> AId constr
R4243:4243 Imp <> X def
def 4283:4288 <> prog_e
R4292:4294 Imp <> com ind
R4302:4306 Imp <> ::x_'::='_x not
R4301:4301 Imp <> Y def
R4307:4310 Imp <> ANum constr
def 4327:4332 <> prog_f
R4336:4338 Imp <> com ind
R4373:4377 Imp <> ::x_';;'_x not
R4346:4350 Imp <> ::x_'::='_x not
R4345:4345 Imp <> Y def
R4351:4355 Imp <> APlus constr
R4366:4369 Imp <> ANum constr
R4358:4360 Imp <> AId constr
R4362:4362 Imp <> X def
R4378:4383 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4410:4417 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4446:4451 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4384:4387 Imp <> BNot constr
R4390:4392 Imp <> BEq constr
R4403:4405 Imp <> AId constr
R4407:4407 Imp <> Y def
R4395:4397 Imp <> AId constr
R4399:4399 Imp <> X def
R4419:4423 Imp <> ::x_'::='_x not
R4418:4418 Imp <> Y def
R4424:4428 Imp <> APlus constr
R4439:4442 Imp <> ANum constr
R4431:4433 Imp <> AId constr
R4435:4435 Imp <> X def
def 4466:4471 <> prog_g
R4475:4477 Imp <> com ind
R4484:4489 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4495:4502 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4507:4512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4490:4494 Imp <> BTrue constr
R4503:4506 Imp <> ::'SKIP' not
def 4527:4532 <> prog_h
R4536:4538 Imp <> com ind
R4545:4550 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4577:4584 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4613:4618 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4551:4554 Imp <> BNot constr
R4557:4559 Imp <> BEq constr
R4570:4572 Imp <> AId constr
R4574:4574 Imp <> X def
R4562:4564 Imp <> AId constr
R4566:4566 Imp <> X def
R4586:4590 Imp <> ::x_'::='_x not
R4585:4585 Imp <> X def
R4591:4595 Imp <> APlus constr
R4606:4609 Imp <> ANum constr
R4598:4600 Imp <> AId constr
R4602:4602 Imp <> X def
def 4633:4638 <> prog_i
R4642:4644 Imp <> com ind
R4651:4656 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4683:4690 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4719:4724 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4657:4660 Imp <> BNot constr
R4663:4665 Imp <> BEq constr
R4676:4678 Imp <> AId constr
R4680:4680 Imp <> Y def
R4668:4670 Imp <> AId constr
R4672:4672 Imp <> X def
R4692:4696 Imp <> ::x_'::='_x not
R4691:4691 Imp <> X def
R4697:4701 Imp <> APlus constr
R4712:4715 Imp <> ANum constr
R4704:4706 Imp <> AId constr
R4708:4708 Imp <> Y def
def 4739:4751 <> equiv_classes
R4755:4758 Coq.Init.Datatypes <> list ind
R4761:4764 Coq.Init.Datatypes <> list ind
R4766:4768 Imp <> com ind
R4793:4797 SfLib <> admit prfax
prf 5052:5065 <> aequiv_example
R5070:5075 Equiv <> aequiv def
R5103:5106 Imp <> ANum constr
R5078:5083 Imp <> AMinus constr
R5094:5096 Imp <> AId constr
R5098:5098 Imp <> X def
R5086:5088 Imp <> AId constr
R5090:5090 Imp <> X def
prf 5161:5174 <> bequiv_example
R5179:5184 Equiv <> bequiv def
R5226:5230 Imp <> BTrue constr
R5187:5189 Imp <> BEq constr
R5217:5220 Imp <> ANum constr
R5192:5197 Imp <> AMinus constr
R5208:5210 Imp <> AId constr
R5212:5212 Imp <> X def
R5200:5202 Imp <> AId constr
R5204:5204 Imp <> X def
R5262:5266 Imp <> beval def
R5279:5292 Equiv <> aequiv_example thm
R5279:5292 Equiv <> aequiv_example thm
prf 5452:5460 <> skip_left
R5475:5480 Equiv <> cequiv def
R5505:5505 Equiv <> c var
R5493:5495 Imp <> ::x_';;'_x not
R5489:5492 Imp <> ::'SKIP' not
R5496:5496 Equiv <> c var
R5683:5687 Imp <> E_Seq constr
R5683:5687 Imp <> E_Seq constr
R5708:5713 Imp <> E_Skip constr
R5708:5713 Imp <> E_Skip constr
prf 5879:5888 <> skip_right
R5903:5908 Equiv <> cequiv def
R5931:5931 Equiv <> c var
R5917:5919 Imp <> ::x_';;'_x not
R5916:5916 Equiv <> c var
R5920:5923 Imp <> ::'SKIP' not
prf 6080:6094 <> IFB_true_simple
R6113:6118 Equiv <> cequiv def
R6161:6162 Equiv <> c1 var
R6126:6129 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6135:6140 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6143:6148 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6151:6153 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6130:6134 Imp <> BTrue constr
R6141:6142 Equiv <> c1 var
R6149:6150 Equiv <> c2 var
R6295:6302 Imp <> E_IfTrue constr
R6295:6302 Imp <> E_IfTrue constr
prf 8225:8232 <> IFB_true
R8280:8285 Equiv <> cequiv def
R8330:8331 Equiv <> c1 var
R8296:8299 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8301:8306 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8309:8314 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8317:8319 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8300:8300 Equiv <> b var
R8307:8308 Equiv <> c1 var
R8315:8316 Equiv <> c2 var
R8256:8261 Equiv <> bequiv def
R8265:8269 Imp <> BTrue constr
R8263:8263 Equiv <> b var
R8532:8537 Equiv <> bequiv def
R8626:8633 Imp <> E_IfTrue constr
R8626:8633 Imp <> E_IfTrue constr
R8663:8668 Equiv <> bequiv def
prf 8777:8785 <> IFB_false
R8828:8833 Equiv <> cequiv def
R8872:8873 Equiv <> c2 var
R8841:8844 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8846:8851 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8854:8859 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8862:8864 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8845:8845 Equiv <> b var
R8852:8853 Equiv <> c1 var
R8860:8861 Equiv <> c2 var
R8806:8811 Equiv <> bequiv def
R8815:8820 Imp <> BFalse constr
R8813:8813 Equiv <> b var
prf 9065:9080 <> swap_if_branches
R9101:9106 Equiv <> cequiv def
R9144:9147 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9154:9159 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9162:9167 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9170:9172 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9148:9151 Imp <> BNot constr
R9153:9153 Equiv <> b var
R9160:9161 Equiv <> e2 var
R9168:9169 Equiv <> e1 var
R9113:9116 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9118:9123 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9126:9131 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9134:9136 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9117:9117 Equiv <> b var
R9124:9125 Equiv <> e1 var
R9132:9133 Equiv <> e2 var
prf 9566:9576 <> WHILE_false
R9621:9626 Equiv <> cequiv def
R9661:9664 Imp <> ::'SKIP' not
R9636:9641 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9643:9646 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9648:9651 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9642:9642 Equiv <> b var
R9647:9647 Equiv <> c var
R9597:9602 Equiv <> bequiv def
R9606:9611 Imp <> BFalse constr
R9604:9604 Equiv <> b var
R9782:9787 Imp <> E_Skip constr
R9782:9787 Imp <> E_Skip constr
R9900:9909 Imp <> E_WhileEnd constr
R9900:9909 Imp <> E_WhileEnd constr
prf 11250:11267 <> WHILE_true_nonterm
R11318:11320 Coq.Init.Logic <> :type_scope:'~'_x not
R11351:11352 Coq.Init.Logic <> :type_scope:'~'_x not
R11321:11321 Imp <> ::x_'/'_x_'||'_x not
R11338:11341 Imp <> ::x_'/'_x_'||'_x not
R11344:11347 Imp <> ::x_'/'_x_'||'_x not
R11322:11327 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11329:11332 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11334:11337 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11328:11328 Equiv <> b var
R11333:11333 Equiv <> c var
R11342:11343 Equiv <> st var
R11348:11350 Equiv <> st' var
R11295:11300 Equiv <> bequiv def
R11304:11308 Imp <> BTrue constr
R11302:11302 Equiv <> b var
R11435:11440 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11442:11445 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11447:11450 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11435:11440 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11442:11445 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11447:11450 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11762:11767 Equiv <> bequiv def
prf 12284:12293 <> WHILE_true
R12337:12342 Equiv <> cequiv def
R12379:12384 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12390:12393 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12398:12401 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12385:12389 Imp <> BTrue constr
R12394:12397 Imp <> ::'SKIP' not
R12353:12358 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12360:12363 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12365:12368 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12359:12359 Equiv <> b var
R12364:12364 Equiv <> c var
R12313:12318 Equiv <> bequiv def
R12322:12326 Imp <> BTrue constr
R12320:12320 Equiv <> b var
prf 12463:12476 <> loop_unrolling
R12493:12498 Equiv <> cequiv def
R12528:12531 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12533:12539 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12560:12566 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12571:12573 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12532:12532 Equiv <> b var
R12541:12543 Imp <> ::x_';;'_x not
R12540:12540 Equiv <> c var
R12544:12549 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12551:12554 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12556:12559 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12550:12550 Equiv <> b var
R12555:12555 Equiv <> c var
R12567:12570 Imp <> ::'SKIP' not
R12505:12510 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12512:12515 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12517:12520 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12511:12511 Equiv <> b var
R12516:12516 Equiv <> c var
R12733:12741 Imp <> E_IfFalse constr
R12733:12741 Imp <> E_IfFalse constr
R12762:12767 Imp <> E_Skip constr
R12762:12767 Imp <> E_Skip constr
R12805:12812 Imp <> E_IfTrue constr
R12805:12812 Imp <> E_IfTrue constr
R12839:12843 Imp <> E_Seq constr
R12839:12843 Imp <> E_Seq constr
R12990:13000 Imp <> E_WhileLoop constr
R12990:13000 Imp <> E_WhileLoop constr
R13128:13137 Imp <> E_WhileEnd constr
R13128:13137 Imp <> E_WhileEnd constr
prf 13220:13228 <> seq_assoc
R13251:13256 Equiv <> cequiv def
R13276:13278 Imp <> ::x_';;'_x not
R13285:13285 Imp <> ::x_';;'_x not
R13274:13275 Equiv <> c1 var
R13281:13282 Imp <> ::x_';;'_x not
R13279:13280 Equiv <> c2 var
R13283:13284 Equiv <> c3 var
R13259:13259 Imp <> ::x_';;'_x not
R13266:13268 Imp <> ::x_';;'_x not
R13262:13263 Imp <> ::x_';;'_x not
R13260:13261 Equiv <> c1 var
R13264:13265 Equiv <> c2 var
R13269:13270 Equiv <> c3 var
prf 13638:13666 <> identity_assignment_first_try
R13680:13681 SfLib <> id ind
R13687:13692 Equiv <> cequiv def
R13708:13711 Imp <> ::'SKIP' not
R13696:13700 Imp <> ::x_'::='_x not
R13695:13695 Equiv <> X var
R13701:13703 Imp <> AId constr
R13705:13705 Equiv <> X var
R13817:13822 Imp <> update def
R13817:13822 Imp <> update def
ax 15856:15880 <> functional_extensionality
R15915:15915 Equiv <> Y var
R15910:15910 Equiv <> X var
R15955:15957 Coq.Init.Logic <> :type_scope:x_'='_x not
R15954:15954 Equiv <> f var
R15958:15958 Equiv <> g var
R15935:15935 Equiv <> X var
R15942:15944 Coq.Init.Logic <> :type_scope:x_'='_x not
R15939:15939 Equiv <> f var
R15941:15941 Equiv <> x var
R15945:15945 Equiv <> g var
R15947:15947 Equiv <> x var
prf 16241:16259 <> identity_assignment
R16273:16274 SfLib <> id ind
R16280:16285 Equiv <> cequiv def
R16309:16312 Imp <> ::'SKIP' not
R16293:16297 Imp <> ::x_'::='_x not
R16292:16292 Equiv <> X var
R16298:16300 Imp <> AId constr
R16302:16302 Equiv <> X var
R16417:16422 Imp <> update def
R16417:16422 Imp <> update def
R16482:16506 Equiv <> functional_extensionality prfax
R16482:16506 Equiv <> functional_extensionality prfax
R16532:16542 Imp <> update_same prfax
R16532:16542 Imp <> update_same prfax
R16622:16625 Coq.Init.Logic <> :type_scope:x_'='_x not
R16646:16646 Coq.Init.Logic <> :type_scope:x_'='_x not
R16626:16631 Imp <> update def
R16622:16625 Coq.Init.Logic <> :type_scope:x_'='_x not
R16646:16646 Coq.Init.Logic <> :type_scope:x_'='_x not
R16626:16631 Imp <> update def
R16666:16690 Equiv <> functional_extensionality prfax
R16666:16690 Equiv <> functional_extensionality prfax
R16719:16729 Imp <> update_same prfax
R16719:16729 Imp <> update_same prfax
prf 16864:16876 <> assign_aequiv
R16917:16922 Equiv <> cequiv def
R16931:16935 Imp <> ::x_'::='_x not
R16930:16930 Equiv <> X var
R16936:16936 Equiv <> e var
R16924:16927 Imp <> ::'SKIP' not
R16894:16899 Equiv <> aequiv def
R16909:16909 Equiv <> e var
R16902:16904 Imp <> AId constr
R16906:16906 Equiv <> X var
prf 17524:17534 <> refl_aequiv
R17550:17553 Imp <> aexp ind
R17557:17562 Equiv <> aequiv def
R17566:17566 Equiv <> a var
R17564:17564 Equiv <> a var
prf 17617:17626 <> sym_aequiv
R17646:17649 Imp <> aexp ind
R17672:17677 Equiv <> aequiv def
R17682:17683 Equiv <> a1 var
R17679:17680 Equiv <> a2 var
R17656:17661 Equiv <> aequiv def
R17666:17667 Equiv <> a2 var
R17663:17664 Equiv <> a1 var
prf 17754:17765 <> trans_aequiv
R17788:17791 Imp <> aexp ind
R17830:17835 Equiv <> aequiv def
R17840:17841 Equiv <> a3 var
R17837:17838 Equiv <> a1 var
R17814:17819 Equiv <> aequiv def
R17824:17825 Equiv <> a3 var
R17821:17822 Equiv <> a2 var
R17798:17803 Equiv <> aequiv def
R17808:17809 Equiv <> a2 var
R17805:17806 Equiv <> a1 var
R17861:17866 Equiv <> aequiv def
prf 17961:17971 <> refl_bequiv
R17987:17990 Imp <> bexp ind
R17994:17999 Equiv <> bequiv def
R18003:18003 Equiv <> b var
R18001:18001 Equiv <> b var
R18022:18027 Equiv <> bequiv def
prf 18069:18078 <> sym_bequiv
R18098:18101 Imp <> bexp ind
R18124:18129 Equiv <> bequiv def
R18134:18135 Equiv <> b1 var
R18131:18132 Equiv <> b2 var
R18108:18113 Equiv <> bequiv def
R18118:18119 Equiv <> b2 var
R18115:18116 Equiv <> b1 var
R18154:18159 Equiv <> bequiv def
prf 18221:18232 <> trans_bequiv
R18255:18258 Imp <> bexp ind
R18297:18302 Equiv <> bequiv def
R18307:18308 Equiv <> b3 var
R18304:18305 Equiv <> b1 var
R18281:18286 Equiv <> bequiv def
R18291:18292 Equiv <> b3 var
R18288:18289 Equiv <> b2 var
R18265:18270 Equiv <> bequiv def
R18275:18276 Equiv <> b2 var
R18272:18273 Equiv <> b1 var
R18328:18333 Equiv <> bequiv def
prf 18428:18438 <> refl_cequiv
R18454:18456 Imp <> com ind
R18460:18465 Equiv <> cequiv def
R18469:18469 Equiv <> c var
R18467:18467 Equiv <> c var
R18488:18493 Equiv <> cequiv def
R18519:18526 Coq.Init.Logic <> iff_refl thm
R18519:18526 Coq.Init.Logic <> iff_refl thm
prf 18542:18551 <> sym_cequiv
R18571:18573 Imp <> com ind
R18596:18601 Equiv <> cequiv def
R18606:18607 Equiv <> c1 var
R18603:18604 Equiv <> c2 var
R18580:18585 Equiv <> cequiv def
R18590:18591 Equiv <> c2 var
R18587:18588 Equiv <> c1 var
R18626:18631 Equiv <> cequiv def
R18681:18685 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18669:18671 Imp <> ::x_'/'_x_'||'_x not
R18674:18677 Imp <> ::x_'/'_x_'||'_x not
R18688:18690 Imp <> ::x_'/'_x_'||'_x not
R18693:18696 Imp <> ::x_'/'_x_'||'_x not
R18681:18685 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18669:18671 Imp <> ::x_'/'_x_'||'_x not
R18674:18677 Imp <> ::x_'/'_x_'||'_x not
R18688:18690 Imp <> ::x_'/'_x_'||'_x not
R18693:18696 Imp <> ::x_'/'_x_'||'_x not
R18759:18765 Coq.Init.Logic <> iff_sym thm
R18759:18765 Coq.Init.Logic <> iff_sym thm
prf 18792:18800 <> iff_trans
R18866:18870 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18864:18865 Equiv <> P1 var
R18871:18872 Equiv <> P3 var
R18851:18855 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18849:18850 Equiv <> P2 var
R18856:18857 Equiv <> P3 var
R18836:18840 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18834:18835 Equiv <> P1 var
R18841:18842 Equiv <> P2 var
prf 19040:19051 <> trans_cequiv
R19074:19076 Imp <> com ind
R19115:19120 Equiv <> cequiv def
R19125:19126 Equiv <> c3 var
R19122:19123 Equiv <> c1 var
R19099:19104 Equiv <> cequiv def
R19109:19110 Equiv <> c3 var
R19106:19107 Equiv <> c2 var
R19083:19088 Equiv <> cequiv def
R19093:19094 Equiv <> c2 var
R19090:19091 Equiv <> c1 var
R19146:19151 Equiv <> cequiv def
R19212:19214 Imp <> ::x_'/'_x_'||'_x not
R19217:19220 Imp <> ::x_'/'_x_'||'_x not
R19194:19202 Equiv <> iff_trans thm
R19212:19214 Imp <> ::x_'/'_x_'||'_x not
R19217:19220 Imp <> ::x_'/'_x_'||'_x not
R19194:19202 Equiv <> iff_trans thm
prf 20579:20593 <> CAss_congruence
R20635:20640 Equiv <> cequiv def
R20655:20658 Imp <> CAss constr
R20662:20664 Equiv <> a1' var
R20660:20660 Equiv <> i var
R20643:20646 Imp <> CAss constr
R20650:20651 Equiv <> a1 var
R20648:20648 Equiv <> i var
R20616:20621 Equiv <> aequiv def
R20626:20628 Equiv <> a1' var
R20623:20624 Equiv <> a1 var
R20777:20781 Imp <> E_Ass constr
R20777:20781 Imp <> E_Ass constr
R20864:20868 Imp <> E_Ass constr
R20864:20868 Imp <> E_Ass constr
prf 22722:22738 <> CWhile_congruence
R22802:22807 Equiv <> cequiv def
R22831:22836 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22840:22843 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22847:22850 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22837:22839 Equiv <> b1' var
R22844:22846 Equiv <> c1' var
R22810:22815 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22818:22821 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22824:22827 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22816:22817 Equiv <> b1 var
R22822:22823 Equiv <> c1 var
R22783:22788 Equiv <> cequiv def
R22793:22795 Equiv <> c1' var
R22790:22791 Equiv <> c1 var
R22766:22771 Equiv <> bequiv def
R22776:22778 Equiv <> b1' var
R22773:22774 Equiv <> b1 var
R22894:22899 Equiv <> bequiv def
R22901:22906 Equiv <> cequiv def
R22998:23003 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23006:23009 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23012:23015 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22998:23003 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23006:23009 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23012:23015 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23126:23135 Imp <> E_WhileEnd constr
R23126:23135 Imp <> E_WhileEnd constr
R23201:23211 Imp <> E_WhileLoop constr
R23201:23211 Imp <> E_WhileLoop constr
R23468:23473 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23477:23480 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23484:23487 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23468:23473 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23477:23480 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23484:23487 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23601:23610 Imp <> E_WhileEnd constr
R23601:23610 Imp <> E_WhileEnd constr
R23676:23686 Imp <> E_WhileLoop constr
R23676:23686 Imp <> E_WhileLoop constr
prf 23990:24004 <> CSeq_congruence
R24068:24073 Equiv <> cequiv def
R24088:24089 Imp <> ::x_';;'_x not
R24085:24087 Equiv <> c1' var
R24090:24092 Equiv <> c2' var
R24078:24079 Imp <> ::x_';;'_x not
R24076:24077 Equiv <> c1 var
R24080:24081 Equiv <> c2 var
R24049:24054 Equiv <> cequiv def
R24059:24061 Equiv <> c2' var
R24056:24057 Equiv <> c2 var
R24032:24037 Equiv <> cequiv def
R24042:24044 Equiv <> c1' var
R24039:24040 Equiv <> c1 var
prf 24202:24215 <> CIf_congruence
R24299:24304 Equiv <> cequiv def
R24334:24337 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24340:24345 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24349:24354 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24358:24360 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24338:24339 Equiv <> b' var
R24346:24348 Equiv <> c1' var
R24355:24357 Equiv <> c2' var
R24307:24310 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24312:24317 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24320:24325 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24328:24330 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24311:24311 Equiv <> b var
R24318:24319 Equiv <> c1 var
R24326:24327 Equiv <> c2 var
R24280:24285 Equiv <> cequiv def
R24290:24292 Equiv <> c2' var
R24287:24288 Equiv <> c2 var
R24263:24268 Equiv <> cequiv def
R24273:24275 Equiv <> c1' var
R24270:24271 Equiv <> c1 var
R24248:24253 Equiv <> bequiv def
R24257:24258 Equiv <> b' var
R24255:24255 Equiv <> b var
def 24527:24544 <> congruence_example
R24549:24554 Equiv <> cequiv def
R24737:24744 Imp <> ::x_';;'_x not
R24726:24730 Imp <> ::x_'::='_x not
R24725:24725 Imp <> X def
R24731:24734 Imp <> ANum constr
R24745:24749 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24770:24788 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24817:24860 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24874:24881 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24750:24752 Imp <> BEq constr
R24763:24766 Imp <> ANum constr
R24755:24757 Imp <> AId constr
R24759:24759 Imp <> X def
R24790:24794 Imp <> ::x_'::='_x not
R24789:24789 Imp <> Y def
R24795:24800 Imp <> AMinus constr
R24811:24813 Imp <> AId constr
R24815:24815 Imp <> X def
R24803:24805 Imp <> AId constr
R24807:24807 Imp <> X def
R24862:24866 Imp <> ::x_'::='_x not
R24861:24861 Imp <> Y def
R24867:24870 Imp <> ANum constr
R24594:24601 Imp <> ::x_';;'_x not
R24583:24587 Imp <> ::x_'::='_x not
R24582:24582 Imp <> X def
R24588:24591 Imp <> ANum constr
R24602:24606 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24627:24645 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24658:24675 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24689:24696 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24607:24609 Imp <> BEq constr
R24620:24623 Imp <> ANum constr
R24612:24614 Imp <> AId constr
R24616:24616 Imp <> X def
R24647:24651 Imp <> ::x_'::='_x not
R24646:24646 Imp <> Y def
R24652:24655 Imp <> ANum constr
R24677:24681 Imp <> ::x_'::='_x not
R24676:24676 Imp <> Y def
R24682:24685 Imp <> ANum constr
R24900:24914 Equiv <> CSeq_congruence prfax
R24900:24914 Equiv <> CSeq_congruence prfax
R24928:24938 Equiv <> refl_cequiv thm
R24928:24938 Equiv <> refl_cequiv thm
R24952:24965 Equiv <> CIf_congruence prfax
R24952:24965 Equiv <> CIf_congruence prfax
R24980:24990 Equiv <> refl_bequiv thm
R24980:24990 Equiv <> refl_bequiv thm
R25005:25019 Equiv <> CAss_congruence thm
R25005:25019 Equiv <> CAss_congruence thm
R25029:25034 Equiv <> aequiv def
R25069:25078 Coq.Arith.Minus <> minus_diag thm
R25069:25078 Coq.Arith.Minus <> minus_diag thm
R25093:25103 Equiv <> refl_cequiv thm
R25093:25103 Equiv <> refl_cequiv thm
def 25667:25678 <> atrans_sound
R25698:25701 Imp <> aexp ind
R25690:25693 Imp <> aexp ind
R25728:25731 Imp <> aexp ind
R25739:25744 Equiv <> aequiv def
R25749:25754 Equiv <> atrans var
R25756:25756 Equiv <> a var
R25746:25746 Equiv <> a var
def 25772:25783 <> btrans_sound
R25803:25806 Imp <> bexp ind
R25795:25798 Imp <> bexp ind
R25833:25836 Imp <> bexp ind
R25844:25849 Equiv <> bequiv def
R25854:25859 Equiv <> btrans var
R25861:25861 Equiv <> b var
R25851:25851 Equiv <> b var
def 25877:25888 <> ctrans_sound
R25907:25909 Imp <> com ind
R25900:25902 Imp <> com ind
R25936:25938 Imp <> com ind
R25946:25951 Equiv <> cequiv def
R25956:25961 Equiv <> ctrans var
R25963:25963 Equiv <> c var
R25953:25953 Equiv <> c var
def 26281:26299 <> fold_constants_aexp
R26306:26309 Imp <> aexp ind
R26314:26317 Imp <> aexp ind
R26330:26330 Equiv <> a var
R26341:26344 Imp <> ANum constr
R26357:26360 Imp <> ANum constr
R26368:26370 Imp <> AId constr
R26384:26386 Imp <> AId constr
R26394:26398 Imp <> APlus constr
R26423:26423 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26446:26447 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26470:26470 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26424:26442 Equiv <> fold_constants_aexp def
R26448:26466 Equiv <> fold_constants_aexp def
R26485:26485 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26493:26494 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26502:26502 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26486:26489 Imp <> ANum constr
R26495:26498 Imp <> ANum constr
R26507:26510 Imp <> ANum constr
R26515:26517 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R26530:26530 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26534:26535 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26539:26539 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26544:26548 Imp <> APlus constr
R26572:26577 Imp <> AMinus constr
R26601:26601 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26624:26625 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26648:26648 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26602:26620 Equiv <> fold_constants_aexp def
R26626:26644 Equiv <> fold_constants_aexp def
R26663:26663 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26671:26672 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26680:26680 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26664:26667 Imp <> ANum constr
R26673:26676 Imp <> ANum constr
R26685:26688 Imp <> ANum constr
R26693:26695 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R26708:26708 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26712:26713 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26717:26717 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26722:26727 Imp <> AMinus constr
R26751:26755 Imp <> AMult constr
R26780:26780 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26803:26804 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26827:26827 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26781:26799 Equiv <> fold_constants_aexp def
R26805:26823 Equiv <> fold_constants_aexp def
R26842:26842 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26850:26851 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26859:26859 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26843:26846 Imp <> ANum constr
R26852:26855 Imp <> ANum constr
R26864:26867 Imp <> ANum constr
R26872:26874 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R26887:26887 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26891:26892 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26896:26896 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26901:26905 Imp <> AMult constr
def 26941:26953 <> fold_aexp_ex1
R27029:27034 Coq.Init.Logic <> :type_scope:x_'='_x not
R26961:26979 Equiv <> fold_constants_aexp def
R26989:26993 Imp <> AMult constr
R27022:27024 Imp <> AId constr
R27026:27026 Imp <> X def
R26996:27000 Imp <> APlus constr
R27012:27015 Imp <> ANum constr
R27003:27006 Imp <> ANum constr
R27035:27039 Imp <> AMult constr
R27051:27053 Imp <> AId constr
R27055:27055 Imp <> X def
R27042:27045 Imp <> ANum constr
def 27398:27410 <> fold_aexp_ex2
R27503:27507 Coq.Init.Logic <> :type_scope:x_'='_x not
R27418:27436 Equiv <> fold_constants_aexp def
R27446:27451 Imp <> AMinus constr
R27462:27466 Imp <> APlus constr
R27495:27497 Imp <> AId constr
R27499:27499 Imp <> Y def
R27469:27473 Imp <> AMult constr
R27485:27488 Imp <> ANum constr
R27476:27479 Imp <> ANum constr
R27454:27456 Imp <> AId constr
R27458:27458 Imp <> X def
R27508:27513 Imp <> AMinus constr
R27524:27528 Imp <> APlus constr
R27540:27542 Imp <> AId constr
R27544:27544 Imp <> Y def
R27531:27534 Imp <> ANum constr
R27516:27518 Imp <> AId constr
R27520:27520 Imp <> X def
def 27771:27789 <> fold_constants_bexp
R27796:27799 Imp <> bexp ind
R27804:27807 Imp <> bexp ind
R27820:27820 Equiv <> b var
R27831:27835 Imp <> BTrue constr
R27847:27851 Imp <> BTrue constr
R27857:27862 Imp <> BFalse constr
R27873:27878 Imp <> BFalse constr
R27884:27886 Imp <> BEq constr
R27911:27911 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27934:27935 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27958:27958 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27912:27930 Equiv <> fold_constants_aexp def
R27936:27954 Equiv <> fold_constants_aexp def
R27973:27973 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27981:27982 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27990:27990 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27974:27977 Imp <> ANum constr
R27983:27986 Imp <> ANum constr
R27998:28004 Coq.Arith.EqNat <> beq_nat def
R28028:28033 Imp <> BFalse constr
R28017:28021 Imp <> BTrue constr
R28043:28043 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28047:28048 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28052:28052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28057:28059 Imp <> BEq constr
R28083:28085 Imp <> BLe constr
R28110:28110 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28133:28134 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28157:28157 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28111:28129 Equiv <> fold_constants_aexp def
R28135:28153 Equiv <> fold_constants_aexp def
R28172:28172 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28180:28181 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28189:28189 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28173:28176 Imp <> ANum constr
R28182:28185 Imp <> ANum constr
R28197:28203 SfLib <> ble_nat def
R28227:28232 Imp <> BFalse constr
R28216:28220 Imp <> BTrue constr
R28242:28242 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28246:28247 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28251:28251 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28256:28258 Imp <> BLe constr
R28282:28285 Imp <> BNot constr
R28308:28326 Equiv <> fold_constants_bexp def
R28345:28349 Imp <> BTrue constr
R28354:28359 Imp <> BFalse constr
R28369:28374 Imp <> BFalse constr
R28379:28383 Imp <> BTrue constr
R28400:28403 Imp <> BNot constr
R28423:28426 Imp <> BAnd constr
R28451:28451 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28474:28475 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28498:28498 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28452:28470 Equiv <> fold_constants_bexp def
R28476:28494 Equiv <> fold_constants_bexp def
R28513:28513 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28519:28520 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28526:28526 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28514:28518 Imp <> BTrue constr
R28521:28525 Imp <> BTrue constr
R28531:28535 Imp <> BTrue constr
R28545:28545 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28551:28552 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28559:28559 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28546:28550 Imp <> BTrue constr
R28553:28558 Imp <> BFalse constr
R28564:28569 Imp <> BFalse constr
R28579:28579 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28586:28587 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28593:28593 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28580:28585 Imp <> BFalse constr
R28588:28592 Imp <> BTrue constr
R28598:28603 Imp <> BFalse constr
R28613:28613 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28620:28621 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28628:28628 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28614:28619 Imp <> BFalse constr
R28622:28627 Imp <> BFalse constr
R28633:28638 Imp <> BFalse constr
R28648:28648 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28652:28653 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28657:28657 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28662:28665 Imp <> BAnd constr
def 28701:28713 <> fold_bexp_ex1
R28780:28784 Coq.Init.Logic <> :type_scope:x_'='_x not
R28721:28739 Equiv <> fold_constants_bexp def
R28742:28745 Imp <> BAnd constr
R28754:28757 Imp <> BNot constr
R28760:28763 Imp <> BAnd constr
R28772:28776 Imp <> BTrue constr
R28765:28770 Imp <> BFalse constr
R28747:28751 Imp <> BTrue constr
R28785:28789 Imp <> BTrue constr
def 28826:28838 <> fold_bexp_ex2
R28991:28995 Coq.Init.Logic <> :type_scope:x_'='_x not
R28846:28864 Equiv <> fold_constants_bexp def
R28874:28877 Imp <> BAnd constr
R28915:28917 Imp <> BEq constr
R28947:28952 Imp <> AMinus constr
R28964:28968 Imp <> APlus constr
R28980:28983 Imp <> ANum constr
R28971:28974 Imp <> ANum constr
R28955:28958 Imp <> ANum constr
R28920:28923 Imp <> ANum constr
R28880:28882 Imp <> BEq constr
R28893:28895 Imp <> AId constr
R28897:28897 Imp <> Y def
R28885:28887 Imp <> AId constr
R28889:28889 Imp <> X def
R28996:28999 Imp <> BAnd constr
R29023:29027 Imp <> BTrue constr
R29002:29004 Imp <> BEq constr
R29015:29017 Imp <> AId constr
R29019:29019 Imp <> Y def
R29007:29009 Imp <> AId constr
R29011:29011 Imp <> X def
def 29192:29209 <> fold_constants_com
R29216:29218 Imp <> com ind
R29223:29225 Imp <> com ind
R29238:29238 Equiv <> c var
R29249:29252 Imp <> ::'SKIP' not
R29269:29272 Imp <> ::'SKIP' not
R29279:29283 Imp <> ::x_'::='_x not
R29297:29300 Imp <> CAss constr
R29305:29323 Equiv <> fold_constants_aexp def
R29334:29337 Imp <> ::x_';;'_x not
R29352:29352 Imp <> ::x_';;'_x not
R29374:29379 Imp <> ::x_';;'_x not
R29401:29401 Imp <> ::x_';;'_x not
R29353:29370 Equiv <> fold_constants_com def
R29380:29397 Equiv <> fold_constants_com def
R29407:29410 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29412:29417 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29420:29425 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29428:29430 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29448:29466 Equiv <> fold_constants_bexp def
R29483:29487 Imp <> BTrue constr
R29492:29509 Equiv <> fold_constants_com def
R29522:29527 Imp <> BFalse constr
R29532:29549 Equiv <> fold_constants_com def
R29568:29571 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29574:29579 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29601:29628 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29650:29652 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29580:29597 Equiv <> fold_constants_com def
R29629:29646 Equiv <> fold_constants_com def
R29668:29673 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29675:29678 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29680:29683 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29701:29719 Equiv <> fold_constants_bexp def
R29736:29740 Imp <> BTrue constr
R29745:29750 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29756:29759 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29764:29767 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29751:29755 Imp <> BTrue constr
R29760:29763 Imp <> ::'SKIP' not
R29777:29782 Imp <> BFalse constr
R29787:29790 Imp <> ::'SKIP' not
R29806:29811 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29814:29818 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29839:29843 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29819:29836 Equiv <> fold_constants_com def
R29838:29838 Equiv <> c var
def 29882:29893 <> fold_com_ex1
R30349:30389 Coq.Init.Logic <> :type_scope:x_'='_x not
R30651:30651 Coq.Init.Logic <> :type_scope:x_'='_x not
R29899:29916 Equiv <> fold_constants_com def
R29981:29988 Imp <> ::x_';;'_x not
R29953:29957 Imp <> ::x_'::='_x not
R29952:29952 Imp <> X def
R29958:29962 Imp <> APlus constr
R29974:29977 Imp <> ANum constr
R29965:29968 Imp <> ANum constr
R30018:30025 Imp <> ::x_';;'_x not
R29990:29994 Imp <> ::x_'::='_x not
R29989:29989 Imp <> Y def
R29995:30000 Imp <> AMinus constr
R30011:30014 Imp <> ANum constr
R30003:30005 Imp <> AId constr
R30007:30007 Imp <> X def
R30140:30147 Imp <> ::x_';;'_x not
R30026:30029 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30084:30096 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30101:30119 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30132:30139 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30030:30032 Imp <> BEq constr
R30060:30064 Imp <> APlus constr
R30076:30079 Imp <> ANum constr
R30067:30070 Imp <> ANum constr
R30035:30040 Imp <> AMinus constr
R30051:30053 Imp <> AId constr
R30055:30055 Imp <> Y def
R30043:30045 Imp <> AId constr
R30047:30047 Imp <> X def
R30097:30100 Imp <> ::'SKIP' not
R30121:30125 Imp <> ::x_'::='_x not
R30120:30120 Imp <> Y def
R30126:30129 Imp <> ANum constr
R30264:30271 Imp <> ::x_';;'_x not
R30148:30151 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30208:30220 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30233:30250 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30255:30263 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30152:30154 Imp <> BLe constr
R30166:30171 Imp <> AMinus constr
R30183:30187 Imp <> APlus constr
R30199:30202 Imp <> ANum constr
R30190:30193 Imp <> ANum constr
R30174:30177 Imp <> ANum constr
R30157:30160 Imp <> ANum constr
R30222:30226 Imp <> ::x_'::='_x not
R30221:30221 Imp <> Y def
R30227:30230 Imp <> ANum constr
R30251:30254 Imp <> ::'SKIP' not
R30272:30277 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30298:30309 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30338:30347 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30278:30280 Imp <> BEq constr
R30291:30294 Imp <> ANum constr
R30283:30285 Imp <> AId constr
R30287:30287 Imp <> Y def
R30311:30315 Imp <> ::x_'::='_x not
R30310:30310 Imp <> X def
R30316:30320 Imp <> APlus constr
R30331:30334 Imp <> ANum constr
R30323:30325 Imp <> AId constr
R30327:30327 Imp <> X def
R30402:30409 Imp <> ::x_';;'_x not
R30391:30395 Imp <> ::x_'::='_x not
R30390:30390 Imp <> X def
R30396:30399 Imp <> ANum constr
R30439:30446 Imp <> ::x_';;'_x not
R30411:30415 Imp <> ::x_'::='_x not
R30410:30410 Imp <> Y def
R30416:30421 Imp <> AMinus constr
R30432:30435 Imp <> ANum constr
R30424:30426 Imp <> AId constr
R30428:30428 Imp <> X def
R30547:30554 Imp <> ::x_';;'_x not
R30447:30450 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30488:30500 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30505:30524 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30537:30546 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30451:30453 Imp <> BEq constr
R30481:30484 Imp <> ANum constr
R30456:30461 Imp <> AMinus constr
R30472:30474 Imp <> AId constr
R30476:30476 Imp <> Y def
R30464:30466 Imp <> AId constr
R30468:30468 Imp <> X def
R30501:30504 Imp <> ::'SKIP' not
R30526:30530 Imp <> ::x_'::='_x not
R30525:30525 Imp <> Y def
R30531:30534 Imp <> ANum constr
R30567:30574 Imp <> ::x_';;'_x not
R30556:30560 Imp <> ::x_'::='_x not
R30555:30555 Imp <> Y def
R30561:30564 Imp <> ANum constr
R30575:30580 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30601:30612 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30641:30650 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30581:30583 Imp <> BEq constr
R30594:30597 Imp <> ANum constr
R30586:30588 Imp <> AId constr
R30590:30590 Imp <> Y def
R30614:30618 Imp <> ::x_'::='_x not
R30613:30613 Imp <> X def
R30619:30623 Imp <> APlus constr
R30634:30637 Imp <> ANum constr
R30626:30628 Imp <> AId constr
R30630:30630 Imp <> X def
prf 30901:30925 <> fold_constants_aexp_sound
R30932:30943 Equiv <> atrans_sound def
R30945:30963 Equiv <> fold_constants_aexp def
R30982:30993 Equiv <> atrans_sound def
R31013:31018 Equiv <> aequiv def
R31447:31465 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31447:31465 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31447:31465 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31447:31465 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
R31491:31509 Equiv <> fold_constants_aexp def
prf 34511:34535 <> fold_constants_bexp_sound
R34541:34552 Equiv <> btrans_sound def
R34554:34572 Equiv <> fold_constants_bexp def
R34591:34602 Equiv <> btrans_sound def
R34622:34627 Equiv <> bequiv def
R35138:35156 Equiv <> fold_constants_aexp def
R35138:35156 Equiv <> fold_constants_aexp def
R35195:35213 Equiv <> fold_constants_aexp def
R35195:35213 Equiv <> fold_constants_aexp def
R35251:35255 Imp <> aeval def
R35270:35274 Imp <> aeval def
R35317:35341 Equiv <> fold_constants_aexp_sound thm
R35270:35274 Imp <> aeval def
R35251:35255 Imp <> aeval def
R35317:35341 Equiv <> fold_constants_aexp_sound thm
R35371:35375 Imp <> aeval def
R35390:35394 Imp <> aeval def
R35437:35461 Equiv <> fold_constants_aexp_sound thm
R35390:35394 Imp <> aeval def
R35371:35375 Imp <> aeval def
R35437:35461 Equiv <> fold_constants_aexp_sound thm
R35652:35658 Coq.Arith.EqNat <> beq_nat def
R35652:35658 Coq.Arith.EqNat <> beq_nat def
R35762:35780 Equiv <> fold_constants_bexp def
R35762:35780 Equiv <> fold_constants_bexp def
R35893:35911 Equiv <> fold_constants_bexp def
R35893:35911 Equiv <> fold_constants_bexp def
R35951:35969 Equiv <> fold_constants_bexp def
R35951:35969 Equiv <> fold_constants_bexp def
prf 36212:36235 <> fold_constants_com_sound
R36242:36253 Equiv <> ctrans_sound def
R36255:36272 Equiv <> fold_constants_com def
R36292:36303 Equiv <> ctrans_sound def
R36377:36387 Equiv <> refl_cequiv thm
R36377:36387 Equiv <> refl_cequiv thm
R36410:36424 Equiv <> CAss_congruence thm
R36410:36424 Equiv <> CAss_congruence thm
R36433:36457 Equiv <> fold_constants_aexp_sound thm
R36433:36457 Equiv <> fold_constants_aexp_sound thm
R36479:36493 Equiv <> CSeq_congruence prfax
R36479:36493 Equiv <> CSeq_congruence prfax
R36535:36540 Equiv <> bequiv def
R36545:36563 Equiv <> fold_constants_bexp def
R36535:36540 Equiv <> bequiv def
R36545:36563 Equiv <> fold_constants_bexp def
R36607:36631 Equiv <> fold_constants_bexp_sound thm
R36607:36631 Equiv <> fold_constants_bexp_sound thm
R36648:36666 Equiv <> fold_constants_bexp def
R36840:36853 Equiv <> CIf_congruence prfax
R36648:36666 Equiv <> fold_constants_bexp def
R36840:36853 Equiv <> CIf_congruence prfax
R36840:36853 Equiv <> CIf_congruence prfax
R36840:36853 Equiv <> CIf_congruence prfax
R36840:36853 Equiv <> CIf_congruence prfax
R36840:36853 Equiv <> CIf_congruence prfax
R36840:36853 Equiv <> CIf_congruence prfax
R36908:36919 Equiv <> trans_cequiv thm
R36908:36919 Equiv <> trans_cequiv thm
R36958:36965 Equiv <> IFB_true thm
R36958:36965 Equiv <> IFB_true thm
R37020:37031 Equiv <> trans_cequiv thm
R37020:37031 Equiv <> trans_cequiv thm
R37070:37078 Equiv <> IFB_false prfax
R37070:37078 Equiv <> IFB_false prfax
def 39513:39522 <> subst_aexp
R39529:39530 SfLib <> id ind
R39538:39541 Imp <> aexp ind
R39549:39552 Imp <> aexp ind
R39557:39560 Imp <> aexp ind
R39573:39573 Equiv <> a var
R39584:39587 Imp <> ANum constr
R39600:39603 Imp <> ANum constr
R39611:39613 Imp <> AId constr
R39630:39638 SfLib <> eq_id_dec thm
R39640:39640 Equiv <> i var
R39657:39659 Imp <> AId constr
R39650:39650 Equiv <> u var
R39668:39672 Imp <> APlus constr
R39684:39688 Imp <> APlus constr
R39711:39720 Equiv <> subst_aexp def
R39724:39724 Equiv <> u var
R39722:39722 Equiv <> i var
R39691:39700 Equiv <> subst_aexp def
R39704:39704 Equiv <> u var
R39702:39702 Equiv <> i var
R39734:39739 Imp <> AMinus constr
R39750:39755 Imp <> AMinus constr
R39778:39787 Equiv <> subst_aexp def
R39791:39791 Equiv <> u var
R39789:39789 Equiv <> i var
R39758:39767 Equiv <> subst_aexp def
R39771:39771 Equiv <> u var
R39769:39769 Equiv <> i var
R39801:39805 Imp <> AMult constr
R39817:39821 Imp <> AMult constr
R39844:39853 Equiv <> subst_aexp def
R39857:39857 Equiv <> u var
R39855:39855 Equiv <> i var
R39824:39833 Equiv <> subst_aexp def
R39837:39837 Equiv <> u var
R39835:39835 Equiv <> i var
def 39879:39891 <> subst_aexp_ex
R39961:39966 Coq.Init.Logic <> :type_scope:x_'='_x not
R40008:40008 Coq.Init.Logic <> :type_scope:x_'='_x not
R39897:39906 Equiv <> subst_aexp def
R39939:39943 Imp <> APlus constr
R39954:39956 Imp <> AId constr
R39958:39958 Imp <> X def
R39946:39948 Imp <> AId constr
R39950:39950 Imp <> Y def
R39911:39915 Imp <> APlus constr
R39928:39931 Imp <> ANum constr
R39918:39921 Imp <> ANum constr
R39908:39908 Imp <> X def
R39967:39971 Imp <> APlus constr
R39982:39986 Imp <> APlus constr
R39999:40002 Imp <> ANum constr
R39989:39992 Imp <> ANum constr
R39974:39976 Imp <> AId constr
R39978:39978 Imp <> Y def
def 40204:40223 <> subst_equiv_property
R40250:40255 Equiv <> cequiv def
R40300:40302 Imp <> ::x_';;'_x not
R40293:40297 Imp <> ::x_'::='_x not
R40291:40292 Equiv <> i1 var
R40298:40299 Equiv <> a1 var
R40305:40309 Imp <> ::x_'::='_x not
R40303:40304 Equiv <> i2 var
R40310:40319 Equiv <> subst_aexp def
R40327:40328 Equiv <> a2 var
R40324:40325 Equiv <> a1 var
R40321:40322 Equiv <> i1 var
R40267:40269 Imp <> ::x_';;'_x not
R40260:40264 Imp <> ::x_'::='_x not
R40258:40259 Equiv <> i1 var
R40265:40266 Equiv <> a1 var
R40272:40276 Imp <> ::x_'::='_x not
R40270:40271 Equiv <> i2 var
R40277:40278 Equiv <> a2 var
prf 41583:41595 <> subst_inequiv
R41602:41603 Coq.Init.Logic <> :type_scope:'~'_x not
R41604:41623 Equiv <> subst_equiv_property def
R41642:41661 Equiv <> subst_equiv_property def
R41872:41887 Imp <> ::x_';;'_x not
R41845:41849 Imp <> ::x_'::='_x not
R41844:41844 Imp <> X def
R41850:41854 Imp <> APlus constr
R41865:41868 Imp <> ANum constr
R41857:41859 Imp <> AId constr
R41861:41861 Imp <> X def
R41889:41893 Imp <> ::x_'::='_x not
R41888:41888 Imp <> Y def
R41894:41896 Imp <> AId constr
R41898:41898 Imp <> X def
R41872:41887 Imp <> ::x_';;'_x not
R41845:41849 Imp <> ::x_'::='_x not
R41844:41844 Imp <> X def
R41850:41854 Imp <> APlus constr
R41865:41868 Imp <> ANum constr
R41857:41859 Imp <> AId constr
R41861:41861 Imp <> X def
R41889:41893 Imp <> ::x_'::='_x not
R41888:41888 Imp <> Y def
R41894:41896 Imp <> AId constr
R41898:41898 Imp <> X def
R41955:41970 Imp <> ::x_';;'_x not
R41928:41932 Imp <> ::x_'::='_x not
R41927:41927 Imp <> X def
R41933:41937 Imp <> APlus constr
R41948:41951 Imp <> ANum constr
R41940:41942 Imp <> AId constr
R41944:41944 Imp <> X def
R41972:41976 Imp <> ::x_'::='_x not
R41971:41971 Imp <> Y def
R41977:41981 Imp <> APlus constr
R41992:41995 Imp <> ANum constr
R41984:41986 Imp <> AId constr
R41988:41988 Imp <> X def
R41955:41970 Imp <> ::x_';;'_x not
R41928:41932 Imp <> ::x_'::='_x not
R41927:41927 Imp <> X def
R41933:41937 Imp <> APlus constr
R41948:41951 Imp <> ANum constr
R41940:41942 Imp <> AId constr
R41944:41944 Imp <> X def
R41972:41976 Imp <> ::x_'::='_x not
R41971:41971 Imp <> Y def
R41977:41981 Imp <> APlus constr
R41992:41995 Imp <> ANum constr
R41984:41986 Imp <> AId constr
R41988:41988 Imp <> X def
R42025:42030 Equiv <> cequiv def
R42025:42030 Equiv <> cequiv def
R42250:42255 Imp <> update def
R42282:42282 Imp <> Y def
R42258:42263 Imp <> update def
R42277:42277 Imp <> X def
R42265:42275 Imp <> empty_state def
R42250:42255 Imp <> update def
R42282:42282 Imp <> Y def
R42258:42263 Imp <> update def
R42277:42277 Imp <> X def
R42265:42275 Imp <> empty_state def
R42307:42312 Imp <> update def
R42339:42339 Imp <> Y def
R42315:42320 Imp <> update def
R42334:42334 Imp <> X def
R42322:42332 Imp <> empty_state def
R42307:42312 Imp <> update def
R42339:42339 Imp <> Y def
R42315:42320 Imp <> update def
R42334:42334 Imp <> X def
R42322:42332 Imp <> empty_state def
R42368:42370 Imp <> ::x_'/'_x_'||'_x not
R42382:42385 Imp <> ::x_'/'_x_'||'_x not
R42371:42381 Imp <> empty_state def
R42408:42410 Imp <> ::x_'/'_x_'||'_x not
R42422:42425 Imp <> ::x_'/'_x_'||'_x not
R42411:42421 Imp <> empty_state def
R42479:42484 Imp <> update def
R42498:42498 Imp <> X def
R42486:42496 Imp <> empty_state def
R42459:42463 Imp <> E_Seq constr
R42519:42523 Imp <> E_Ass constr
R42368:42370 Imp <> ::x_'/'_x_'||'_x not
R42382:42385 Imp <> ::x_'/'_x_'||'_x not
R42371:42381 Imp <> empty_state def
R42408:42410 Imp <> ::x_'/'_x_'||'_x not
R42422:42425 Imp <> ::x_'/'_x_'||'_x not
R42411:42421 Imp <> empty_state def
R42408:42410 Imp <> ::x_'/'_x_'||'_x not
R42422:42425 Imp <> ::x_'/'_x_'||'_x not
R42411:42421 Imp <> empty_state def
R42479:42484 Imp <> update def
R42498:42498 Imp <> X def
R42486:42496 Imp <> empty_state def
R42459:42463 Imp <> E_Seq constr
R42519:42523 Imp <> E_Ass constr
R42519:42523 Imp <> E_Ass constr
R42479:42484 Imp <> update def
R42498:42498 Imp <> X def
R42486:42496 Imp <> empty_state def
R42459:42463 Imp <> E_Seq constr
R42519:42523 Imp <> E_Ass constr
R42519:42523 Imp <> E_Ass constr
R42479:42484 Imp <> update def
R42498:42498 Imp <> X def
R42486:42496 Imp <> empty_state def
R42459:42463 Imp <> E_Seq constr
R42519:42523 Imp <> E_Ass constr
R42519:42523 Imp <> E_Ass constr
R42479:42484 Imp <> update def
R42498:42498 Imp <> X def
R42486:42496 Imp <> empty_state def
R42459:42463 Imp <> E_Seq constr
R42678:42680 Coq.Init.Logic <> :type_scope:x_'='_x not
R42701:42719 Imp <> ceval_deterministic thm
R42724:42734 Imp <> empty_state def
R42678:42680 Coq.Init.Logic <> :type_scope:x_'='_x not
R42701:42719 Imp <> ceval_deterministic thm
R42724:42734 Imp <> empty_state def
R42776:42778 Coq.Init.Logic <> :type_scope:x_'='_x not
R42775:42775 Imp <> Y def
R42783:42783 Imp <> Y def
R42776:42778 Coq.Init.Logic <> :type_scope:x_'='_x not
R42775:42775 Imp <> Y def
R42783:42783 Imp <> Y def
ind 43191:43210 <> var_not_used_in_aexp
constr 43241:43246 <> VNUNum
constr 43295:43299 <> VNUId
constr 43357:43363 <> VNUPlus
constr 43498:43505 <> VNUMinus
constr 43641:43647 <> VNUMult
R43215:43216 SfLib <> id ind
R43221:43224 Imp <> aexp ind
R43259:43278 Equiv <> var_not_used_in_aexp ind
R43283:43286 Imp <> ANum constr
R43288:43288 Equiv <> n var
R43322:43341 Equiv <> var_not_used_in_aexp ind
R43346:43348 Imp <> AId constr
R43350:43350 Equiv <> Y var
R43313:43316 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R43317:43317 Equiv <> Y var
R43457:43476 Equiv <> var_not_used_in_aexp ind
R43481:43485 Imp <> APlus constr
R43490:43491 Equiv <> a2 var
R43487:43488 Equiv <> a1 var
R43422:43441 Equiv <> var_not_used_in_aexp ind
R43445:43446 Equiv <> a2 var
R43387:43406 Equiv <> var_not_used_in_aexp ind
R43410:43411 Equiv <> a1 var
R43599:43618 Equiv <> var_not_used_in_aexp ind
R43623:43628 Imp <> AMinus constr
R43633:43634 Equiv <> a2 var
R43630:43631 Equiv <> a1 var
R43564:43583 Equiv <> var_not_used_in_aexp ind
R43587:43588 Equiv <> a2 var
R43529:43548 Equiv <> var_not_used_in_aexp ind
R43552:43553 Equiv <> a1 var
R43741:43760 Equiv <> var_not_used_in_aexp ind
R43765:43769 Imp <> AMult constr
R43774:43775 Equiv <> a2 var
R43771:43772 Equiv <> a1 var
R43706:43725 Equiv <> var_not_used_in_aexp ind
R43729:43730 Equiv <> a2 var
R43671:43690 Equiv <> var_not_used_in_aexp ind
R43694:43695 Equiv <> a1 var
prf 43786:43800 <> aeval_weakening
R43878:43880 Coq.Init.Logic <> :type_scope:x_'='_x not
R43854:43858 Imp <> aeval def
R43877:43877 Equiv <> a var
R43861:43866 Imp <> update def
R43873:43874 Equiv <> ni var
R43871:43871 Equiv <> i var
R43868:43869 Equiv <> st var
R43881:43885 Imp <> aeval def
R43890:43890 Equiv <> a var
R43887:43888 Equiv <> st var
R43824:43843 Equiv <> var_not_used_in_aexp ind
R43847:43847 Equiv <> a var
R43845:43845 Equiv <> i var
prf 44200:44215 <> inequiv_exercise
R44221:44222 Coq.Init.Logic <> :type_scope:'~'_x not
R44223:44228 Equiv <> cequiv def
R44256:44259 Imp <> ::'SKIP' not
R44231:44236 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44242:44245 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44250:44253 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44237:44241 Imp <> BTrue constr
R44246:44249 Imp <> ::'SKIP' not
mod 46289:46292 <> Himp
ind 46397:46399 Himp com
constr 46415:46419 Himp CSkip
constr 46431:46434 Himp CAss
constr 46460:46463 Himp CSeq
constr 46489:46491 Himp CIf
constr 46525:46530 Himp CWhile
constr 46557:46562 Himp CHavoc
R46423:46425 Equiv <> com ind
R46452:46454 Equiv <> com ind
R46444:46447 Imp <> aexp ind
R46438:46439 SfLib <> id ind
R46481:46483 Equiv <> com ind
R46474:46476 Equiv <> com ind
R46467:46469 Equiv <> com ind
R46517:46519 Equiv <> com ind
R46510:46512 Equiv <> com ind
R46503:46505 Equiv <> com ind
R46495:46498 Imp <> bexp ind
R46549:46551 Equiv <> com ind
R46542:46544 Equiv <> com ind
R46534:46537 Imp <> bexp ind
R46572:46574 Equiv <> com ind
R46566:46567 SfLib <> id ind
R46821:46825 Equiv Himp CSkip constr
not 46807 Himp ::'SKIP'
R46855:46858 Equiv Himp CAss constr
not 46837 Himp ::x_'::='_x
R46906:46909 Equiv Himp CSeq constr
not 46889 Himp ::x_';;'_x
R46994:46999 Equiv Himp CWhile constr
not 46963 Himp ::'WHILE'_x_'DO'_x_'END'
R47093:47095 Equiv Himp CIf constr
not 47051 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R47168:47173 Equiv Himp CHavoc constr
not 47152 Himp ::'HAVOC'_x
ind 47584:47588 Himp ceval
constr 47629:47634 Himp E_Skip
constr 47677:47681 Himp E_Ass
constr 47805:47809 Himp E_Seq
constr 47935:47942 Himp E_IfTrue
constr 48111:48119 Himp E_IfFalse
constr 48291:48300 Himp E_WhileEnd
constr 48424:48434 Himp E_WhileLoop
R47608:47612 Imp <> state def
R47599:47603 Imp <> state def
R47592:47594 Equiv Himp com ind
R48728:48732 Equiv <> ceval ind
R47650:47654 Imp <> state def
R47661:47663 Equiv Himp ::x_'/'_x_'||'_x not
R47666:47669 Equiv Himp ::x_'/'_x_'||'_x not
R47657:47660 Equiv Himp ::'SKIP' not
R47664:47665 Equiv <> st var
R47670:47671 Equiv <> st var
R47698:47702 Imp <> state def
R47711:47714 Imp <> aexp ind
R47722:47724 Coq.Init.Datatypes <> nat ind
R47732:47733 SfLib <> id ind
R47768:47768 Equiv Himp ::x_'/'_x_'||'_x not
R47777:47780 Equiv Himp ::x_'/'_x_'||'_x not
R47783:47786 Equiv Himp ::x_'/'_x_'||'_x not
R47770:47774 Equiv Himp ::x_'::='_x not
R47769:47769 Equiv <> X var
R47775:47776 Equiv <> a1 var
R47781:47782 Equiv <> st var
R47787:47792 Imp <> update def
R47799:47799 Equiv <> n var
R47797:47797 Equiv <> X var
R47794:47795 Equiv <> st var
R47760:47762 Coq.Init.Logic <> :type_scope:x_'='_x not
R47749:47753 Imp <> aeval def
R47758:47759 Equiv <> a1 var
R47755:47756 Equiv <> st var
R47763:47763 Equiv <> n var
R47829:47831 Equiv Himp com ind
R47849:47853 Imp <> state def
R47907:47907 Equiv Himp ::x_'/'_x_'||'_x not
R47916:47919 Equiv Himp ::x_'/'_x_'||'_x not
R47922:47925 Equiv Himp ::x_'/'_x_'||'_x not
R47910:47913 Equiv Himp ::x_';;'_x not
R47908:47909 Equiv <> c1 var
R47914:47915 Equiv <> c2 var
R47920:47921 Equiv <> st var
R47926:47929 Equiv <> st'' var
R47889:47891 Equiv Himp ::x_'/'_x_'||'_x not
R47895:47898 Equiv Himp ::x_'/'_x_'||'_x not
R47887:47888 Equiv <> c2 var
R47892:47894 Equiv <> st' var
R47899:47902 Equiv <> st'' var
R47871:47873 Equiv Himp ::x_'/'_x_'||'_x not
R47876:47879 Equiv Himp ::x_'/'_x_'||'_x not
R47869:47870 Equiv <> c1 var
R47874:47875 Equiv <> st var
R47880:47882 Equiv <> st' var
R47963:47967 Imp <> state def
R47976:47979 Imp <> bexp ind
R47991:47993 Equiv Himp com ind
R48067:48067 Equiv Himp ::x_'/'_x_'||'_x not
R48093:48096 Equiv Himp ::x_'/'_x_'||'_x not
R48099:48102 Equiv Himp ::x_'/'_x_'||'_x not
R48068:48071 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48074:48079 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48082:48087 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48090:48092 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48072:48073 Equiv <> b1 var
R48080:48081 Equiv <> c1 var
R48088:48089 Equiv <> c2 var
R48097:48098 Equiv <> st var
R48103:48105 Equiv <> st' var
R48051:48053 Equiv Himp ::x_'/'_x_'||'_x not
R48056:48059 Equiv Himp ::x_'/'_x_'||'_x not
R48049:48050 Equiv <> c1 var
R48054:48055 Equiv <> st var
R48060:48062 Equiv <> st' var
R48023:48025 Coq.Init.Logic <> :type_scope:x_'='_x not
R48012:48016 Imp <> beval def
R48021:48022 Equiv <> b1 var
R48018:48019 Equiv <> st var
R48026:48029 Coq.Init.Datatypes <> true constr
R48140:48144 Imp <> state def
R48153:48156 Imp <> bexp ind
R48168:48170 Equiv Himp com ind
R48247:48247 Equiv Himp ::x_'/'_x_'||'_x not
R48273:48276 Equiv Himp ::x_'/'_x_'||'_x not
R48279:48282 Equiv Himp ::x_'/'_x_'||'_x not
R48248:48251 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48254:48259 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48262:48267 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48270:48272 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48252:48253 Equiv <> b1 var
R48260:48261 Equiv <> c1 var
R48268:48269 Equiv <> c2 var
R48277:48278 Equiv <> st var
R48283:48285 Equiv <> st' var
R48231:48233 Equiv Himp ::x_'/'_x_'||'_x not
R48236:48239 Equiv Himp ::x_'/'_x_'||'_x not
R48229:48230 Equiv <> c2 var
R48234:48235 Equiv <> st var
R48240:48242 Equiv <> st' var
R48201:48203 Coq.Init.Logic <> :type_scope:x_'='_x not
R48190:48194 Imp <> beval def
R48199:48200 Equiv <> b1 var
R48196:48197 Equiv <> st var
R48204:48208 Coq.Init.Datatypes <> false constr
R48317:48320 Imp <> bexp ind
R48329:48333 Imp <> state def
R48342:48344 Equiv Himp com ind
R48388:48388 Equiv Himp ::x_'/'_x_'||'_x not
R48407:48410 Equiv Himp ::x_'/'_x_'||'_x not
R48413:48416 Equiv Himp ::x_'/'_x_'||'_x not
R48389:48394 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48397:48400 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48403:48406 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48395:48396 Equiv <> b1 var
R48401:48402 Equiv <> c1 var
R48411:48412 Equiv <> st var
R48417:48418 Equiv <> st var
R48376:48378 Coq.Init.Logic <> :type_scope:x_'='_x not
R48365:48369 Imp <> beval def
R48374:48375 Equiv <> b1 var
R48371:48372 Equiv <> st var
R48379:48383 Coq.Init.Datatypes <> false constr
R48460:48464 Imp <> state def
R48473:48476 Imp <> bexp ind
R48485:48487 Equiv Himp com ind
R48641:48641 Equiv Himp ::x_'/'_x_'||'_x not
R48660:48663 Equiv Himp ::x_'/'_x_'||'_x not
R48666:48669 Equiv Himp ::x_'/'_x_'||'_x not
R48642:48647 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48650:48653 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48656:48659 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48648:48649 Equiv <> b1 var
R48654:48655 Equiv <> c1 var
R48664:48665 Equiv <> st var
R48670:48673 Equiv <> st'' var
R48585:48585 Equiv Himp ::x_'/'_x_'||'_x not
R48604:48607 Equiv Himp ::x_'/'_x_'||'_x not
R48611:48614 Equiv Himp ::x_'/'_x_'||'_x not
R48586:48591 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48594:48597 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48600:48603 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48592:48593 Equiv <> b1 var
R48598:48599 Equiv <> c1 var
R48608:48610 Equiv <> st' var
R48615:48618 Equiv <> st'' var
R48551:48553 Equiv Himp ::x_'/'_x_'||'_x not
R48556:48559 Equiv Himp ::x_'/'_x_'||'_x not
R48549:48550 Equiv <> c1 var
R48554:48555 Equiv <> st var
R48560:48562 Equiv <> st' var
R48520:48522 Coq.Init.Logic <> :type_scope:x_'='_x not
R48509:48513 Imp <> beval def
R48518:48519 Equiv <> b1 var
R48515:48516 Equiv <> st var
R48523:48526 Coq.Init.Datatypes <> true constr
R48728:48732 Equiv Himp ceval ind
not 48703 Himp ::x_'/'_x_'||'_x
def 49106:49119 Himp havoc_example1
R49123:49123 Equiv Himp ::x_'/'_x_'||'_x not
R49131:49134 Equiv Himp ::x_'/'_x_'||'_x not
R49146:49149 Equiv Himp ::x_'/'_x_'||'_x not
R49124:49129 Equiv Himp ::'HAVOC'_x not
R49130:49130 Imp <> X def
R49135:49145 Imp <> empty_state def
R49150:49155 Imp <> update def
R49169:49169 Imp <> X def
R49157:49167 Imp <> empty_state def
def 49219:49232 Himp havoc_example2
R49238:49238 Equiv Himp ::x_'/'_x_'||'_x not
R49253:49256 Equiv Himp ::x_'/'_x_'||'_x not
R49268:49271 Equiv Himp ::x_'/'_x_'||'_x not
R49243:49245 Equiv Himp ::x_';;'_x not
R49239:49242 Equiv Himp ::'SKIP' not
R49246:49251 Equiv Himp ::'HAVOC'_x not
R49252:49252 Imp <> Z def
R49257:49267 Imp <> empty_state def
R49272:49277 Imp <> update def
R49291:49291 Imp <> Z def
R49279:49289 Imp <> empty_state def
def 49432:49437 Himp cequiv
R49448:49450 Equiv Himp com ind
R49479:49483 Imp <> state def
R49502:49506 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R49490:49492 Equiv Himp ::x_'/'_x_'||'_x not
R49495:49498 Equiv Himp ::x_'/'_x_'||'_x not
R49488:49489 Equiv <> c1 var
R49493:49494 Equiv <> st var
R49499:49501 Equiv <> st' var
R49509:49511 Equiv Himp ::x_'/'_x_'||'_x not
R49514:49517 Equiv Himp ::x_'/'_x_'||'_x not
R49507:49508 Equiv <> c2 var
R49512:49513 Equiv <> st var
R49518:49520 Equiv <> st' var
def 49821:49823 Himp pXY
R49837:49839 Equiv Himp ::x_';;'_x not
R49830:49835 Equiv Himp ::'HAVOC'_x not
R49836:49836 Imp <> X def
R49840:49845 Equiv Himp ::'HAVOC'_x not
R49846:49846 Imp <> Y def
def 49861:49863 Himp pYX
R49877:49879 Equiv Himp ::x_';;'_x not
R49870:49875 Equiv Himp ::'HAVOC'_x not
R49876:49876 Imp <> Y def
R49880:49885 Equiv Himp ::'HAVOC'_x not
R49886:49886 Imp <> X def
prf 49994:50007 Himp pXY_cequiv_pYX
R50027:50030 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50013:50018 Equiv Himp cequiv def
R50024:50026 Equiv Himp pYX def
R50020:50022 Equiv Himp pXY def
R50031:50031 Coq.Init.Logic <> :type_scope:'~'_x not
R50032:50037 Equiv Himp cequiv def
R50043:50045 Equiv Himp pYX def
R50039:50041 Equiv Himp pXY def
def 50211:50216 Himp ptwice
R50230:50232 Equiv Himp ::x_';;'_x not
R50223:50228 Equiv Himp ::'HAVOC'_x not
R50229:50229 Imp <> X def
R50233:50238 Equiv Himp ::'HAVOC'_x not
R50239:50239 Imp <> Y def
def 50254:50258 Himp pcopy
R50272:50274 Equiv Himp ::x_';;'_x not
R50265:50270 Equiv Himp ::'HAVOC'_x not
R50271:50271 Imp <> X def
R50276:50280 Equiv Himp ::x_'::='_x not
R50275:50275 Imp <> Y def
R50281:50283 Imp <> AId constr
R50285:50285 Imp <> X def
prf 50456:50474 Himp ptwice_cequiv_pcopy
R50499:50502 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50480:50485 Equiv Himp cequiv def
R50494:50498 Equiv Himp pcopy def
R50487:50492 Equiv Himp ptwice def
R50503:50503 Coq.Init.Logic <> :type_scope:'~'_x not
R50504:50509 Equiv Himp cequiv def
R50518:50522 Equiv Himp pcopy def
R50511:50516 Equiv Himp ptwice def
def 51366:51367 Himp p1
R51371:51373 Equiv Himp com ind
R51380:51386 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51414:51422 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51465:51470 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51387:51390 Imp <> BNot constr
R51393:51395 Imp <> BEq constr
R51406:51409 Imp <> ANum constr
R51398:51400 Imp <> AId constr
R51402:51402 Imp <> X def
R51430:51436 Equiv Himp ::x_';;'_x not
R51423:51428 Equiv Himp ::'HAVOC'_x not
R51429:51429 Imp <> Y def
R51438:51442 Equiv Himp ::x_'::='_x not
R51437:51437 Imp <> X def
R51443:51447 Imp <> APlus constr
R51458:51461 Imp <> ANum constr
R51450:51452 Imp <> AId constr
R51454:51454 Imp <> X def
def 51485:51486 Himp p2
R51490:51492 Equiv Himp com ind
R51499:51505 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51533:51541 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51546:51551 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51506:51509 Imp <> BNot constr
R51512:51514 Imp <> BEq constr
R51525:51528 Imp <> ANum constr
R51517:51519 Imp <> AId constr
R51521:51521 Imp <> X def
R51542:51545 Equiv Himp ::'SKIP' not
prf 51809:51822 Himp p1_may_diverge
R51856:51857 Coq.Init.Logic <> :type_scope:'~'_x not
R51860:51862 Equiv Himp ::x_'/'_x_'||'_x not
R51865:51868 Equiv Himp ::x_'/'_x_'||'_x not
R51858:51859 Equiv Himp p1 def
R51863:51864 Equiv <> st var
R51869:51871 Equiv <> st' var
R51845:51848 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R51841:51842 Equiv <> st var
R51844:51844 Imp <> X def
prf 51917:51930 Himp p2_may_diverge
R51964:51965 Coq.Init.Logic <> :type_scope:'~'_x not
R51968:51970 Equiv Himp ::x_'/'_x_'||'_x not
R51973:51976 Equiv Himp ::x_'/'_x_'||'_x not
R51966:51967 Equiv Himp p2 def
R51971:51972 Equiv <> st var
R51977:51979 Equiv <> st' var
R51953:51956 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R51949:51950 Equiv <> st var
R51952:51952 Imp <> X def
prf 52116:52126 Himp p1_p2_equiv
R52130:52135 Equiv Himp cequiv def
R52140:52141 Equiv Himp p2 def
R52137:52138 Equiv Himp p1 def
def 52323:52324 Himp p3
R52328:52330 Equiv Himp com ind
R52349:52353 Equiv Himp ::x_';;'_x not
R52338:52342 Equiv Himp ::x_'::='_x not
R52337:52337 Imp <> Z def
R52343:52346 Imp <> ANum constr
R52354:52360 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52388:52396 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52418:52423 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52361:52364 Imp <> BNot constr
R52367:52369 Imp <> BEq constr
R52380:52383 Imp <> ANum constr
R52372:52374 Imp <> AId constr
R52376:52376 Imp <> X def
R52404:52410 Equiv Himp ::x_';;'_x not
R52397:52402 Equiv Himp ::'HAVOC'_x not
R52403:52403 Imp <> X def
R52411:52416 Equiv Himp ::'HAVOC'_x not
R52417:52417 Imp <> Z def
def 52438:52439 Himp p4
R52443:52445 Equiv Himp com ind
R52466:52470 Equiv Himp ::x_';;'_x not
R52453:52458 Equiv Himp ::x_'::='_x not
R52465:52465 Equiv Himp ::x_'::='_x not
R52452:52452 Imp <> X def
R52459:52462 Imp <> ANum constr
R52472:52477 Equiv Himp ::x_'::='_x not
R52484:52484 Equiv Himp ::x_'::='_x not
R52471:52471 Imp <> Z def
R52478:52481 Imp <> ANum constr
prf 52497:52509 Himp p3_p4_inequiv
R52513:52514 Coq.Init.Logic <> :type_scope:'~'_x not
R52515:52520 Equiv Himp cequiv def
R52525:52526 Equiv Himp p4 def
R52522:52523 Equiv Himp p3 def
def 52653:52654 Himp p5
R52658:52660 Equiv Himp com ind
R52667:52673 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52701:52709 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52717:52722 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52674:52677 Imp <> BNot constr
R52680:52682 Imp <> BEq constr
R52693:52696 Imp <> ANum constr
R52685:52687 Imp <> AId constr
R52689:52689 Imp <> X def
R52710:52715 Equiv Himp ::'HAVOC'_x not
R52716:52716 Imp <> X def
def 52737:52738 Himp p6
R52742:52744 Equiv Himp com ind
R52752:52756 Equiv Himp ::x_'::='_x not
R52751:52751 Imp <> X def
R52757:52760 Imp <> ANum constr
prf 52775:52785 Himp p5_p6_equiv
R52789:52794 Equiv Himp cequiv def
R52799:52800 Equiv Himp p6 def
R52796:52797 Equiv Himp p5 def
R52854:52857 Equiv Himp <> mod
def 53711:53717 <> stequiv
R53730:53734 Imp <> state def
R53759:53760 SfLib <> id ind
R53769:53771 Coq.Init.Logic <> :type_scope:x_'='_x not
R53764:53766 Equiv <> st1 var
R53768:53768 Equiv <> X var
R53772:53774 Equiv <> st2 var
R53776:53776 Equiv <> X var
R53808:53814 Equiv <> stequiv def
not 53790 <> ::x_'~'_x
prf 54088:54099 <> stequiv_refl
R54116:54120 Imp <> state def
R54129:54131 Equiv <> ::x_'~'_x not
R54127:54128 Equiv <> st var
R54132:54133 Equiv <> st var
prf 54245:54255 <> stequiv_sym
R54277:54281 Imp <> state def
R54307:54309 Equiv <> ::x_'~'_x not
R54304:54306 Equiv <> st2 var
R54310:54312 Equiv <> st1 var
R54291:54293 Equiv <> ::x_'~'_x not
R54288:54290 Equiv <> st1 var
R54294:54296 Equiv <> st2 var
prf 54430:54442 <> stequiv_trans
R54468:54472 Imp <> state def
R54514:54516 Equiv <> ::x_'~'_x not
R54511:54513 Equiv <> st1 var
R54517:54519 Equiv <> st3 var
R54498:54500 Equiv <> ::x_'~'_x not
R54495:54497 Equiv <> st2 var
R54501:54503 Equiv <> st3 var
R54482:54484 Equiv <> ::x_'~'_x not
R54479:54481 Equiv <> st1 var
R54485:54487 Equiv <> st2 var
prf 54666:54679 <> stequiv_update
R54701:54705 Imp <> state def
R54737:54738 SfLib <> id ind
R54744:54746 Coq.Init.Datatypes <> nat ind
R54766:54768 Equiv <> ::x_'~'_x not
R54752:54757 Imp <> update def
R54765:54765 Equiv <> n var
R54763:54763 Equiv <> X var
R54759:54761 Equiv <> st1 var
R54769:54774 Imp <> update def
R54782:54782 Equiv <> n var
R54780:54780 Equiv <> X var
R54776:54778 Equiv <> st2 var
R54714:54716 Equiv <> ::x_'~'_x not
R54711:54713 Equiv <> st1 var
R54717:54719 Equiv <> st2 var
prf 55027:55039 <> stequiv_aeval
R55061:55065 Imp <> state def
R55097:55100 Imp <> aexp ind
R55115:55117 Coq.Init.Logic <> :type_scope:x_'='_x not
R55104:55108 Imp <> aeval def
R55114:55114 Equiv <> a var
R55110:55112 Equiv <> st1 var
R55118:55122 Imp <> aeval def
R55128:55128 Equiv <> a var
R55124:55126 Equiv <> st2 var
R55075:55077 Equiv <> ::x_'~'_x not
R55072:55074 Equiv <> st1 var
R55078:55080 Equiv <> st2 var
prf 55244:55256 <> stequiv_beval
R55278:55282 Imp <> state def
R55314:55317 Imp <> bexp ind
R55332:55334 Coq.Init.Logic <> :type_scope:x_'='_x not
R55321:55325 Imp <> beval def
R55331:55331 Equiv <> b var
R55327:55329 Equiv <> st1 var
R55335:55339 Imp <> beval def
R55345:55345 Equiv <> b var
R55341:55343 Equiv <> st2 var
R55292:55294 Equiv <> ::x_'~'_x not
R55289:55291 Equiv <> st1 var
R55295:55297 Equiv <> st2 var
prf 55575:55587 <> stequiv_ceval
R55608:55612 Imp <> state def
R55644:55646 Imp <> com ind
R55656:55660 Imp <> state def
R55693:55699 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R55712:55718 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R55752:55752 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R55707:55711 Imp <> state def
R55719:55719 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R55735:55740 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R55721:55723 Imp <> ::x_'/'_x_'||'_x not
R55727:55730 Imp <> ::x_'/'_x_'||'_x not
R55720:55720 Equiv <> c var
R55724:55726 Equiv <> st2 var
R55731:55734 Equiv <> st2' var
R55745:55747 Equiv <> ::x_'~'_x not
R55741:55744 Equiv <> st1' var
R55748:55751 Equiv <> st2' var
R55670:55672 Imp <> ::x_'/'_x_'||'_x not
R55676:55679 Imp <> ::x_'/'_x_'||'_x not
R55669:55669 Equiv <> c var
R55673:55675 Equiv <> st1 var
R55680:55683 Equiv <> st1' var
R55621:55623 Equiv <> ::x_'~'_x not
R55618:55620 Equiv <> st1 var
R55624:55626 Equiv <> st2 var
R55966:55971 Imp <> update def
R55966:55971 Imp <> update def
R56043:56055 Equiv <> stequiv_aeval prfax
R56043:56055 Equiv <> stequiv_aeval prfax
R56084:56097 Equiv <> stequiv_update prfax
R56084:56097 Equiv <> stequiv_update prfax
R56275:56279 Imp <> E_Seq constr
R56275:56279 Imp <> E_Seq constr
R56430:56437 Imp <> E_IfTrue constr
R56430:56437 Imp <> E_IfTrue constr
R56471:56483 Equiv <> stequiv_beval prfax
R56471:56483 Equiv <> stequiv_beval prfax
R56634:56642 Imp <> E_IfFalse constr
R56634:56642 Imp <> E_IfFalse constr
R56675:56687 Equiv <> stequiv_beval prfax
R56675:56687 Equiv <> stequiv_beval prfax
R56787:56796 Imp <> E_WhileEnd constr
R56787:56796 Imp <> E_WhileEnd constr
R56829:56841 Equiv <> stequiv_beval prfax
R56829:56841 Equiv <> stequiv_beval prfax
R57045:57055 Imp <> E_WhileLoop constr
R57045:57055 Imp <> E_WhileLoop constr
R57106:57118 Equiv <> stequiv_beval prfax
R57106:57118 Equiv <> stequiv_beval prfax
ind 57588:57593 <> ceval'
constr 57634:57640 <> E_equiv
R57613:57617 Imp <> state def
R57604:57608 Imp <> state def
R57597:57599 Imp <> com ind
R57762:57767 Equiv <> ceval' ind
R57711:57713 Equiv <> ::x_'/'_x_'||'''_x not
R57716:57720 Equiv <> ::x_'/'_x_'||'''_x not
R57710:57710 Equiv <> c var
R57714:57715 Equiv <> st var
R57721:57724 Equiv <> st'' var
R57695:57697 Equiv <> ::x_'~'_x not
R57692:57694 Equiv <> st' var
R57698:57701 Equiv <> st'' var
R57671:57673 Imp <> ::x_'/'_x_'||'_x not
R57676:57679 Imp <> ::x_'/'_x_'||'_x not
R57670:57670 Equiv <> c var
R57674:57675 Equiv <> st var
R57680:57682 Equiv <> st' var
R57762:57767 Equiv <> ceval' ind
not 57736 <> ::x_'/'_x_'||'''_x
def 57857:57863 <> cequiv'
R57874:57876 Imp <> com ind
R57908:57912 Imp <> state def
R57920:57920 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R57936:57942 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R57958:57958 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R57923:57925 Equiv <> ::x_'/'_x_'||'''_x not
R57928:57932 Equiv <> ::x_'/'_x_'||'''_x not
R57921:57922 Equiv <> c1 var
R57926:57927 Equiv <> st var
R57933:57935 Equiv <> st' var
R57945:57947 Equiv <> ::x_'/'_x_'||'''_x not
R57950:57954 Equiv <> ::x_'/'_x_'||'''_x not
R57943:57944 Equiv <> c2 var
R57948:57949 Equiv <> st var
R57955:57957 Equiv <> st' var
prf 58130:58144 <> cequiv__cequiv'
R58163:58165 Imp <> com ind
R58187:58193 Equiv <> cequiv' def
R58198:58199 Equiv <> c2 var
R58195:58196 Equiv <> c1 var
R58171:58176 Equiv <> cequiv def
R58181:58182 Equiv <> c2 var
R58178:58179 Equiv <> c1 var
R58219:58224 Equiv <> cequiv def
R58227:58233 Equiv <> cequiv' def
R58285:58291 Equiv <> E_equiv constr
R58285:58291 Equiv <> E_equiv constr
R58387:58393 Equiv <> E_equiv constr
R58387:58393 Equiv <> E_equiv constr
def 58617:58636 <> identity_assignment'
R58642:58648 Equiv <> cequiv' def
R58657:58661 Imp <> ::x_'::='_x not
R58656:58656 Imp <> X def
R58662:58664 Imp <> AId constr
R58666:58666 Imp <> X def
R58650:58653 Imp <> ::'SKIP' not
R58688:58694 Equiv <> cequiv' def
R58823:58828 Imp <> update def
R58843:58843 Imp <> X def
R58835:58835 Imp <> X def
R58809:58815 Equiv <> E_equiv constr
R58823:58828 Imp <> update def
R58843:58843 Imp <> X def
R58835:58835 Imp <> X def
R58809:58815 Equiv <> E_equiv constr
R58888:58900 Equiv <> stequiv_trans prfax
R58888:58900 Equiv <> stequiv_trans prfax
R58928:58934 Equiv <> stequiv def
R58951:58961 Imp <> update_same prfax
R58951:58961 Imp <> update_same prfax
prf 60338:60368 <> swap_noninterfering_assignments
R60472:60477 Equiv <> cequiv def
R60521:60523 Imp <> ::x_';;'_x not
R60514:60518 Imp <> ::x_'::='_x not
R60512:60513 Equiv <> l2 var
R60519:60520 Equiv <> a2 var
R60526:60530 Imp <> ::x_'::='_x not
R60524:60525 Equiv <> l1 var
R60531:60532 Equiv <> a1 var
R60493:60495 Imp <> ::x_';;'_x not
R60486:60490 Imp <> ::x_'::='_x not
R60484:60485 Equiv <> l1 var
R60491:60492 Equiv <> a1 var
R60498:60502 Imp <> ::x_'::='_x not
R60496:60497 Equiv <> l2 var
R60503:60504 Equiv <> a2 var
R60440:60459 Equiv <> var_not_used_in_aexp ind
R60464:60465 Equiv <> a1 var
R60461:60462 Equiv <> l2 var
R60408:60427 Equiv <> var_not_used_in_aexp ind
R60432:60433 Equiv <> a2 var
R60429:60430 Equiv <> l1 var
R60395:60398 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R60393:60394 Equiv <> l1 var
R60399:60400 Equiv <> l2 var
