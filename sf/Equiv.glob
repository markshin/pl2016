DIGEST f8c81ab849257d1636a513c298b81bfa
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
def 3825:3830 <> prog_a
R3834:3836 Imp <> com ind
R3843:3848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3876:3883 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3912:3917 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3849:3852 Imp <> BNot constr
R3855:3857 Imp <> BLe constr
R3868:3871 Imp <> ANum constr
R3860:3862 Imp <> AId constr
R3864:3864 Imp <> X def
R3885:3889 Imp <> ::x_'::='_x not
R3884:3884 Imp <> X def
R3890:3894 Imp <> APlus constr
R3905:3908 Imp <> ANum constr
R3897:3899 Imp <> AId constr
R3901:3901 Imp <> X def
def 3932:3937 <> prog_b
R3941:3943 Imp <> com ind
R4060:4064 Imp <> ::x_';;'_x not
R3950:3953 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3974:3983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4031:4042 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4055:4059 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3954:3956 Imp <> BEq constr
R3967:3970 Imp <> ANum constr
R3959:3961 Imp <> AId constr
R3963:3963 Imp <> X def
R4012:4018 Imp <> ::x_';;'_x not
R3985:3989 Imp <> ::x_'::='_x not
R3984:3984 Imp <> X def
R3990:3994 Imp <> APlus constr
R4005:4008 Imp <> ANum constr
R3997:3999 Imp <> AId constr
R4001:4001 Imp <> X def
R4020:4024 Imp <> ::x_'::='_x not
R4019:4019 Imp <> Y def
R4025:4028 Imp <> ANum constr
R4044:4048 Imp <> ::x_'::='_x not
R4043:4043 Imp <> Y def
R4049:4052 Imp <> ANum constr
R4093:4097 Imp <> ::x_';;'_x not
R4066:4070 Imp <> ::x_'::='_x not
R4065:4065 Imp <> X def
R4071:4076 Imp <> AMinus constr
R4087:4089 Imp <> AId constr
R4091:4091 Imp <> Y def
R4079:4081 Imp <> AId constr
R4083:4083 Imp <> X def
R4099:4103 Imp <> ::x_'::='_x not
R4098:4098 Imp <> Y def
R4104:4107 Imp <> ANum constr
def 4124:4129 <> prog_c
R4133:4135 Imp <> com ind
R4142:4145 Imp <> ::'SKIP' not
def 4160:4165 <> prog_d
R4169:4171 Imp <> com ind
R4178:4183 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4211:4218 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4263:4268 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4187 Imp <> BNot constr
R4190:4192 Imp <> BEq constr
R4203:4206 Imp <> ANum constr
R4195:4197 Imp <> AId constr
R4199:4199 Imp <> X def
R4220:4224 Imp <> ::x_'::='_x not
R4219:4219 Imp <> X def
R4225:4229 Imp <> APlus constr
R4256:4259 Imp <> ANum constr
R4232:4236 Imp <> AMult constr
R4247:4249 Imp <> AId constr
R4251:4251 Imp <> Y def
R4239:4241 Imp <> AId constr
R4243:4243 Imp <> X def
def 4283:4288 <> prog_e
R4292:4294 Imp <> com ind
R4302:4306 Imp <> ::x_'::='_x not
R4301:4301 Imp <> Y def
R4307:4310 Imp <> ANum constr
def 4327:4332 <> prog_f
R4336:4338 Imp <> com ind
R4373:4377 Imp <> ::x_';;'_x not
R4346:4350 Imp <> ::x_'::='_x not
R4345:4345 Imp <> Y def
R4351:4355 Imp <> APlus constr
R4366:4369 Imp <> ANum constr
R4358:4360 Imp <> AId constr
R4362:4362 Imp <> X def
R4378:4383 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4410:4417 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4446:4451 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4384:4387 Imp <> BNot constr
R4390:4392 Imp <> BEq constr
R4403:4405 Imp <> AId constr
R4407:4407 Imp <> Y def
R4395:4397 Imp <> AId constr
R4399:4399 Imp <> X def
R4419:4423 Imp <> ::x_'::='_x not
R4418:4418 Imp <> Y def
R4424:4428 Imp <> APlus constr
R4439:4442 Imp <> ANum constr
R4431:4433 Imp <> AId constr
R4435:4435 Imp <> X def
def 4466:4471 <> prog_g
R4475:4477 Imp <> com ind
R4484:4489 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4495:4502 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4507:4512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4490:4494 Imp <> BTrue constr
R4503:4506 Imp <> ::'SKIP' not
def 4527:4532 <> prog_h
R4536:4538 Imp <> com ind
R4545:4550 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4577:4584 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4613:4618 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4551:4554 Imp <> BNot constr
R4557:4559 Imp <> BEq constr
R4570:4572 Imp <> AId constr
R4574:4574 Imp <> X def
R4562:4564 Imp <> AId constr
R4566:4566 Imp <> X def
R4586:4590 Imp <> ::x_'::='_x not
R4585:4585 Imp <> X def
R4591:4595 Imp <> APlus constr
R4606:4609 Imp <> ANum constr
R4598:4600 Imp <> AId constr
R4602:4602 Imp <> X def
def 4633:4638 <> prog_i
R4642:4644 Imp <> com ind
R4651:4656 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4683:4690 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4719:4724 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4657:4660 Imp <> BNot constr
R4663:4665 Imp <> BEq constr
R4676:4678 Imp <> AId constr
R4680:4680 Imp <> Y def
R4668:4670 Imp <> AId constr
R4672:4672 Imp <> X def
R4692:4696 Imp <> ::x_'::='_x not
R4691:4691 Imp <> X def
R4697:4701 Imp <> APlus constr
R4712:4715 Imp <> ANum constr
R4704:4706 Imp <> AId constr
R4708:4708 Imp <> Y def
def 4739:4751 <> equiv_classes
R4755:4758 Coq.Init.Datatypes <> list ind
R4761:4764 Coq.Init.Datatypes <> list ind
R4766:4768 Imp <> com ind
R4793:4797 SfLib <> admit prfax
prf 5052:5065 <> aequiv_example
R5070:5075 Equiv <> aequiv def
R5103:5106 Imp <> ANum constr
R5078:5083 Imp <> AMinus constr
R5094:5096 Imp <> AId constr
R5098:5098 Imp <> X def
R5086:5088 Imp <> AId constr
R5090:5090 Imp <> X def
prf 5161:5174 <> bequiv_example
R5179:5184 Equiv <> bequiv def
R5226:5230 Imp <> BTrue constr
R5187:5189 Imp <> BEq constr
R5217:5220 Imp <> ANum constr
R5192:5197 Imp <> AMinus constr
R5208:5210 Imp <> AId constr
R5212:5212 Imp <> X def
R5200:5202 Imp <> AId constr
R5204:5204 Imp <> X def
R5262:5266 Imp <> beval def
R5279:5292 Equiv <> aequiv_example thm
R5279:5292 Equiv <> aequiv_example thm
prf 5452:5460 <> skip_left
R5475:5480 Equiv <> cequiv def
R5505:5505 Equiv <> c var
R5493:5495 Imp <> ::x_';;'_x not
R5489:5492 Imp <> ::'SKIP' not
R5496:5496 Equiv <> c var
R5683:5687 Imp <> E_Seq constr
R5683:5687 Imp <> E_Seq constr
R5708:5713 Imp <> E_Skip constr
R5708:5713 Imp <> E_Skip constr
prf 5879:5888 <> skip_right
R5903:5908 Equiv <> cequiv def
R5931:5931 Equiv <> c var
R5917:5919 Imp <> ::x_';;'_x not
R5916:5916 Equiv <> c var
R5920:5923 Imp <> ::'SKIP' not
R6045:6049 Imp <> E_Seq constr
R6045:6049 Imp <> E_Seq constr
R6076:6081 Imp <> E_Skip constr
R6076:6081 Imp <> E_Skip constr
prf 6199:6213 <> IFB_true_simple
R6232:6237 Equiv <> cequiv def
R6280:6281 Equiv <> c1 var
R6245:6248 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6254:6259 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6262:6267 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6270:6272 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6249:6253 Imp <> BTrue constr
R6260:6261 Equiv <> c1 var
R6268:6269 Equiv <> c2 var
R6414:6421 Imp <> E_IfTrue constr
R6414:6421 Imp <> E_IfTrue constr
prf 8344:8351 <> IFB_true
R8399:8404 Equiv <> cequiv def
R8449:8450 Equiv <> c1 var
R8415:8418 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8420:8425 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8428:8433 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8436:8438 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8419:8419 Equiv <> b var
R8426:8427 Equiv <> c1 var
R8434:8435 Equiv <> c2 var
R8375:8380 Equiv <> bequiv def
R8384:8388 Imp <> BTrue constr
R8382:8382 Equiv <> b var
R8651:8656 Equiv <> bequiv def
R8745:8752 Imp <> E_IfTrue constr
R8745:8752 Imp <> E_IfTrue constr
R8782:8787 Equiv <> bequiv def
prf 8896:8904 <> IFB_false
R8947:8952 Equiv <> cequiv def
R8991:8992 Equiv <> c2 var
R8960:8963 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8965:8970 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8973:8978 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8981:8983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8964:8964 Equiv <> b var
R8971:8972 Equiv <> c1 var
R8979:8980 Equiv <> c2 var
R8925:8930 Equiv <> bequiv def
R8934:8939 Imp <> BFalse constr
R8932:8932 Equiv <> b var
R9061:9066 Equiv <> bequiv def
R9145:9153 Imp <> E_IfFalse constr
R9145:9153 Imp <> E_IfFalse constr
R9163:9168 Equiv <> bequiv def
prf 9386:9401 <> swap_if_branches
R9422:9427 Equiv <> cequiv def
R9465:9468 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9475:9480 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9483:9488 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9491:9493 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9469:9472 Imp <> BNot constr
R9474:9474 Equiv <> b var
R9481:9482 Equiv <> e2 var
R9489:9490 Equiv <> e1 var
R9434:9437 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9439:9444 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9447:9452 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9455:9457 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9438:9438 Equiv <> b var
R9445:9446 Equiv <> e1 var
R9453:9454 Equiv <> e2 var
R9559:9567 Imp <> E_IfFalse constr
R9559:9567 Imp <> E_IfFalse constr
R9620:9627 Imp <> E_IfTrue constr
R9620:9627 Imp <> E_IfTrue constr
R9702:9710 Imp <> E_IfFalse constr
R9702:9710 Imp <> E_IfFalse constr
R9738:9741 Coq.Init.Datatypes <> negb def
R9750:9762 Coq.Bool.Bool <> negb_true_iff thm
R9750:9762 Coq.Bool.Bool <> negb_true_iff thm
R9801:9808 Imp <> E_IfTrue constr
R9801:9808 Imp <> E_IfTrue constr
R9830:9843 Coq.Bool.Bool <> negb_false_iff thm
R9830:9843 Coq.Bool.Bool <> negb_false_iff thm
prf 10232:10242 <> WHILE_false
R10287:10292 Equiv <> cequiv def
R10327:10330 Imp <> ::'SKIP' not
R10302:10307 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10309:10312 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10314:10317 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10308:10308 Equiv <> b var
R10313:10313 Equiv <> c var
R10263:10268 Equiv <> bequiv def
R10272:10277 Imp <> BFalse constr
R10270:10270 Equiv <> b var
R10448:10453 Imp <> E_Skip constr
R10448:10453 Imp <> E_Skip constr
R10496:10501 Equiv <> bequiv def
R10595:10604 Imp <> E_WhileEnd constr
R10595:10604 Imp <> E_WhileEnd constr
prf 11946:11963 <> WHILE_true_nonterm
R12014:12016 Coq.Init.Logic <> :type_scope:'~'_x not
R12047:12048 Coq.Init.Logic <> :type_scope:'~'_x not
R12017:12017 Imp <> ::x_'/'_x_'||'_x not
R12034:12037 Imp <> ::x_'/'_x_'||'_x not
R12040:12043 Imp <> ::x_'/'_x_'||'_x not
R12018:12023 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12025:12028 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12030:12033 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12024:12024 Equiv <> b var
R12029:12029 Equiv <> c var
R12038:12039 Equiv <> st var
R12044:12046 Equiv <> st' var
R11991:11996 Equiv <> bequiv def
R12000:12004 Imp <> BTrue constr
R11998:11998 Equiv <> b var
R12131:12136 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12138:12141 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12143:12146 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12131:12136 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12138:12141 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12143:12146 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12458:12463 Equiv <> bequiv def
prf 12980:12989 <> WHILE_true
R13033:13038 Equiv <> cequiv def
R13075:13080 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13086:13089 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13094:13097 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13081:13085 Imp <> BTrue constr
R13090:13093 Imp <> ::'SKIP' not
R13049:13054 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13056:13059 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13061:13064 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13055:13055 Equiv <> b var
R13060:13060 Equiv <> c var
R13009:13014 Equiv <> bequiv def
R13018:13022 Imp <> BTrue constr
R13016:13016 Equiv <> b var
R13180:13197 Equiv <> WHILE_true_nonterm thm
R13180:13197 Equiv <> WHILE_true_nonterm thm
R13238:13255 Equiv <> WHILE_true_nonterm thm
R13238:13255 Equiv <> WHILE_true_nonterm thm
R13296:13313 Equiv <> WHILE_true_nonterm thm
R13296:13313 Equiv <> WHILE_true_nonterm thm
R13343:13348 Equiv <> bequiv def
prf 13389:13402 <> loop_unrolling
R13419:13424 Equiv <> cequiv def
R13454:13457 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13459:13465 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13486:13492 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13497:13499 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13458:13458 Equiv <> b var
R13467:13469 Imp <> ::x_';;'_x not
R13466:13466 Equiv <> c var
R13470:13475 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13477:13480 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13482:13485 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13476:13476 Equiv <> b var
R13481:13481 Equiv <> c var
R13493:13496 Imp <> ::'SKIP' not
R13431:13436 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13438:13441 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13443:13446 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13437:13437 Equiv <> b var
R13442:13442 Equiv <> c var
R13659:13667 Imp <> E_IfFalse constr
R13659:13667 Imp <> E_IfFalse constr
R13688:13693 Imp <> E_Skip constr
R13688:13693 Imp <> E_Skip constr
R13731:13738 Imp <> E_IfTrue constr
R13731:13738 Imp <> E_IfTrue constr
R13765:13769 Imp <> E_Seq constr
R13765:13769 Imp <> E_Seq constr
R13916:13926 Imp <> E_WhileLoop constr
R13916:13926 Imp <> E_WhileLoop constr
R14052:14061 Imp <> E_WhileEnd constr
R14052:14061 Imp <> E_WhileEnd constr
prf 14144:14152 <> seq_assoc
R14175:14180 Equiv <> cequiv def
R14200:14202 Imp <> ::x_';;'_x not
R14209:14209 Imp <> ::x_';;'_x not
R14198:14199 Equiv <> c1 var
R14205:14206 Imp <> ::x_';;'_x not
R14203:14204 Equiv <> c2 var
R14207:14208 Equiv <> c3 var
R14183:14183 Imp <> ::x_';;'_x not
R14190:14192 Imp <> ::x_';;'_x not
R14186:14187 Imp <> ::x_';;'_x not
R14184:14185 Equiv <> c1 var
R14188:14189 Equiv <> c2 var
R14193:14194 Equiv <> c3 var
R14315:14319 Imp <> E_Seq constr
R14315:14319 Imp <> E_Seq constr
R14361:14365 Imp <> E_Seq constr
R14361:14365 Imp <> E_Seq constr
R14467:14471 Imp <> E_Seq constr
R14467:14471 Imp <> E_Seq constr
R14501:14505 Imp <> E_Seq constr
R14501:14505 Imp <> E_Seq constr
prf 14886:14914 <> identity_assignment_first_try
R14928:14929 SfLib <> id ind
R14935:14940 Equiv <> cequiv def
R14956:14959 Imp <> ::'SKIP' not
R14944:14948 Imp <> ::x_'::='_x not
R14943:14943 Equiv <> X var
R14949:14951 Imp <> AId constr
R14953:14953 Equiv <> X var
R15065:15070 Imp <> update def
R15065:15070 Imp <> update def
ax 17104:17128 <> functional_extensionality
R17163:17163 Equiv <> Y var
R17158:17158 Equiv <> X var
R17203:17205 Coq.Init.Logic <> :type_scope:x_'='_x not
R17202:17202 Equiv <> f var
R17206:17206 Equiv <> g var
R17183:17183 Equiv <> X var
R17190:17192 Coq.Init.Logic <> :type_scope:x_'='_x not
R17187:17187 Equiv <> f var
R17189:17189 Equiv <> x var
R17193:17193 Equiv <> g var
R17195:17195 Equiv <> x var
prf 17489:17507 <> identity_assignment
R17521:17522 SfLib <> id ind
R17528:17533 Equiv <> cequiv def
R17557:17560 Imp <> ::'SKIP' not
R17541:17545 Imp <> ::x_'::='_x not
R17540:17540 Equiv <> X var
R17546:17548 Imp <> AId constr
R17550:17550 Equiv <> X var
R17665:17670 Imp <> update def
R17665:17670 Imp <> update def
R17730:17754 Equiv <> functional_extensionality prfax
R17730:17754 Equiv <> functional_extensionality prfax
R17805:17815 Imp <> update_same thm
R17805:17815 Imp <> update_same thm
R17895:17898 Coq.Init.Logic <> :type_scope:x_'='_x not
R17919:17919 Coq.Init.Logic <> :type_scope:x_'='_x not
R17899:17904 Imp <> update def
R17895:17898 Coq.Init.Logic <> :type_scope:x_'='_x not
R17919:17919 Coq.Init.Logic <> :type_scope:x_'='_x not
R17899:17904 Imp <> update def
R17939:17963 Equiv <> functional_extensionality prfax
R17939:17963 Equiv <> functional_extensionality prfax
R17992:18002 Imp <> update_same thm
R17992:18002 Imp <> update_same thm
prf 18144:18156 <> assign_aequiv
R18197:18202 Equiv <> cequiv def
R18211:18215 Imp <> ::x_'::='_x not
R18210:18210 Equiv <> X var
R18216:18216 Equiv <> e var
R18204:18207 Imp <> ::'SKIP' not
R18174:18179 Equiv <> aequiv def
R18189:18189 Equiv <> e var
R18182:18184 Imp <> AId constr
R18186:18186 Equiv <> X var
R18244:18249 Equiv <> aequiv def
R18318:18321 Coq.Init.Logic <> :type_scope:x_'='_x not
R18342:18342 Coq.Init.Logic <> :type_scope:x_'='_x not
R18322:18327 Imp <> update def
R18318:18321 Coq.Init.Logic <> :type_scope:x_'='_x not
R18342:18342 Coq.Init.Logic <> :type_scope:x_'='_x not
R18322:18327 Imp <> update def
R18354:18378 Equiv <> functional_extensionality prfax
R18354:18378 Equiv <> functional_extensionality prfax
R18397:18407 Imp <> update_same thm
R18397:18407 Imp <> update_same thm
R18531:18533 Coq.Init.Logic <> :type_scope:x_'='_x not
R18534:18539 Imp <> update def
R18547:18551 Imp <> aeval def
R18531:18533 Coq.Init.Logic <> :type_scope:x_'='_x not
R18534:18539 Imp <> update def
R18547:18551 Imp <> aeval def
R18586:18610 Equiv <> functional_extensionality prfax
R18586:18610 Equiv <> functional_extensionality prfax
R18629:18639 Imp <> update_same thm
R18629:18639 Imp <> update_same thm
prf 19264:19274 <> refl_aequiv
R19290:19293 Imp <> aexp ind
R19297:19302 Equiv <> aequiv def
R19306:19306 Equiv <> a var
R19304:19304 Equiv <> a var
prf 19357:19366 <> sym_aequiv
R19386:19389 Imp <> aexp ind
R19412:19417 Equiv <> aequiv def
R19422:19423 Equiv <> a1 var
R19419:19420 Equiv <> a2 var
R19396:19401 Equiv <> aequiv def
R19406:19407 Equiv <> a2 var
R19403:19404 Equiv <> a1 var
prf 19494:19505 <> trans_aequiv
R19528:19531 Imp <> aexp ind
R19570:19575 Equiv <> aequiv def
R19580:19581 Equiv <> a3 var
R19577:19578 Equiv <> a1 var
R19554:19559 Equiv <> aequiv def
R19564:19565 Equiv <> a3 var
R19561:19562 Equiv <> a2 var
R19538:19543 Equiv <> aequiv def
R19548:19549 Equiv <> a2 var
R19545:19546 Equiv <> a1 var
R19601:19606 Equiv <> aequiv def
prf 19701:19711 <> refl_bequiv
R19727:19730 Imp <> bexp ind
R19734:19739 Equiv <> bequiv def
R19743:19743 Equiv <> b var
R19741:19741 Equiv <> b var
R19762:19767 Equiv <> bequiv def
prf 19809:19818 <> sym_bequiv
R19838:19841 Imp <> bexp ind
R19864:19869 Equiv <> bequiv def
R19874:19875 Equiv <> b1 var
R19871:19872 Equiv <> b2 var
R19848:19853 Equiv <> bequiv def
R19858:19859 Equiv <> b2 var
R19855:19856 Equiv <> b1 var
R19894:19899 Equiv <> bequiv def
prf 19961:19972 <> trans_bequiv
R19995:19998 Imp <> bexp ind
R20037:20042 Equiv <> bequiv def
R20047:20048 Equiv <> b3 var
R20044:20045 Equiv <> b1 var
R20021:20026 Equiv <> bequiv def
R20031:20032 Equiv <> b3 var
R20028:20029 Equiv <> b2 var
R20005:20010 Equiv <> bequiv def
R20015:20016 Equiv <> b2 var
R20012:20013 Equiv <> b1 var
R20068:20073 Equiv <> bequiv def
prf 20168:20178 <> refl_cequiv
R20194:20196 Imp <> com ind
R20200:20205 Equiv <> cequiv def
R20209:20209 Equiv <> c var
R20207:20207 Equiv <> c var
R20228:20233 Equiv <> cequiv def
R20259:20266 Coq.Init.Logic <> iff_refl thm
R20259:20266 Coq.Init.Logic <> iff_refl thm
prf 20282:20291 <> sym_cequiv
R20311:20313 Imp <> com ind
R20336:20341 Equiv <> cequiv def
R20346:20347 Equiv <> c1 var
R20343:20344 Equiv <> c2 var
R20320:20325 Equiv <> cequiv def
R20330:20331 Equiv <> c2 var
R20327:20328 Equiv <> c1 var
R20366:20371 Equiv <> cequiv def
R20421:20425 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20409:20411 Imp <> ::x_'/'_x_'||'_x not
R20414:20417 Imp <> ::x_'/'_x_'||'_x not
R20428:20430 Imp <> ::x_'/'_x_'||'_x not
R20433:20436 Imp <> ::x_'/'_x_'||'_x not
R20421:20425 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20409:20411 Imp <> ::x_'/'_x_'||'_x not
R20414:20417 Imp <> ::x_'/'_x_'||'_x not
R20428:20430 Imp <> ::x_'/'_x_'||'_x not
R20433:20436 Imp <> ::x_'/'_x_'||'_x not
R20499:20505 Coq.Init.Logic <> iff_sym thm
R20499:20505 Coq.Init.Logic <> iff_sym thm
prf 20532:20540 <> iff_trans
R20606:20610 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20604:20605 Equiv <> P1 var
R20611:20612 Equiv <> P3 var
R20591:20595 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20589:20590 Equiv <> P2 var
R20596:20597 Equiv <> P3 var
R20576:20580 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20574:20575 Equiv <> P1 var
R20581:20582 Equiv <> P2 var
prf 20780:20791 <> trans_cequiv
R20814:20816 Imp <> com ind
R20855:20860 Equiv <> cequiv def
R20865:20866 Equiv <> c3 var
R20862:20863 Equiv <> c1 var
R20839:20844 Equiv <> cequiv def
R20849:20850 Equiv <> c3 var
R20846:20847 Equiv <> c2 var
R20823:20828 Equiv <> cequiv def
R20833:20834 Equiv <> c2 var
R20830:20831 Equiv <> c1 var
R20886:20891 Equiv <> cequiv def
R20952:20954 Imp <> ::x_'/'_x_'||'_x not
R20957:20960 Imp <> ::x_'/'_x_'||'_x not
R20934:20942 Equiv <> iff_trans thm
R20952:20954 Imp <> ::x_'/'_x_'||'_x not
R20957:20960 Imp <> ::x_'/'_x_'||'_x not
R20934:20942 Equiv <> iff_trans thm
prf 22319:22333 <> CAss_congruence
R22375:22380 Equiv <> cequiv def
R22395:22398 Imp <> CAss constr
R22402:22404 Equiv <> a1' var
R22400:22400 Equiv <> i var
R22383:22386 Imp <> CAss constr
R22390:22391 Equiv <> a1 var
R22388:22388 Equiv <> i var
R22356:22361 Equiv <> aequiv def
R22366:22368 Equiv <> a1' var
R22363:22364 Equiv <> a1 var
R22517:22521 Imp <> E_Ass constr
R22517:22521 Imp <> E_Ass constr
R22604:22608 Imp <> E_Ass constr
R22604:22608 Imp <> E_Ass constr
prf 24462:24478 <> CWhile_congruence
R24542:24547 Equiv <> cequiv def
R24571:24576 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24580:24583 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24587:24590 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24577:24579 Equiv <> b1' var
R24584:24586 Equiv <> c1' var
R24550:24555 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24558:24561 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24564:24567 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24556:24557 Equiv <> b1 var
R24562:24563 Equiv <> c1 var
R24523:24528 Equiv <> cequiv def
R24533:24535 Equiv <> c1' var
R24530:24531 Equiv <> c1 var
R24506:24511 Equiv <> bequiv def
R24516:24518 Equiv <> b1' var
R24513:24514 Equiv <> b1 var
R24634:24639 Equiv <> bequiv def
R24641:24646 Equiv <> cequiv def
R24738:24743 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24746:24749 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24752:24755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24738:24743 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24746:24749 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24752:24755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24866:24875 Imp <> E_WhileEnd constr
R24866:24875 Imp <> E_WhileEnd constr
R24941:24951 Imp <> E_WhileLoop constr
R24941:24951 Imp <> E_WhileLoop constr
R25208:25213 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25217:25220 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25224:25227 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25208:25213 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25217:25220 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25224:25227 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25341:25350 Imp <> E_WhileEnd constr
R25341:25350 Imp <> E_WhileEnd constr
R25416:25426 Imp <> E_WhileLoop constr
R25416:25426 Imp <> E_WhileLoop constr
prf 25730:25744 <> CSeq_congruence
R25808:25813 Equiv <> cequiv def
R25828:25829 Imp <> ::x_';;'_x not
R25825:25827 Equiv <> c1' var
R25830:25832 Equiv <> c2' var
R25818:25819 Imp <> ::x_';;'_x not
R25816:25817 Equiv <> c1 var
R25820:25821 Equiv <> c2 var
R25789:25794 Equiv <> cequiv def
R25799:25801 Equiv <> c2' var
R25796:25797 Equiv <> c2 var
R25772:25777 Equiv <> cequiv def
R25782:25784 Equiv <> c1' var
R25779:25780 Equiv <> c1 var
R25853:25858 Equiv <> cequiv def
R25917:25921 Imp <> E_Seq constr
R25917:25921 Imp <> E_Seq constr
R26020:26024 Imp <> E_Seq constr
R26020:26024 Imp <> E_Seq constr
prf 26166:26179 <> CIf_congruence
R26263:26268 Equiv <> cequiv def
R26298:26301 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26304:26309 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26313:26318 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26322:26324 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26302:26303 Equiv <> b' var
R26310:26312 Equiv <> c1' var
R26319:26321 Equiv <> c2' var
R26271:26274 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26276:26281 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26284:26289 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26292:26294 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26275:26275 Equiv <> b var
R26282:26283 Equiv <> c1 var
R26290:26291 Equiv <> c2 var
R26244:26249 Equiv <> cequiv def
R26254:26256 Equiv <> c2' var
R26251:26252 Equiv <> c2 var
R26227:26232 Equiv <> cequiv def
R26237:26239 Equiv <> c1' var
R26234:26235 Equiv <> c1 var
R26212:26217 Equiv <> bequiv def
R26221:26222 Equiv <> b' var
R26219:26219 Equiv <> b var
R26344:26349 Equiv <> bequiv def
R26352:26357 Equiv <> cequiv def
R26418:26425 Imp <> E_IfTrue constr
R26418:26425 Imp <> E_IfTrue constr
R26491:26499 Imp <> E_IfFalse constr
R26491:26499 Imp <> E_IfFalse constr
R26588:26595 Imp <> E_IfTrue constr
R26588:26595 Imp <> E_IfTrue constr
R26657:26665 Imp <> E_IfFalse constr
R26657:26665 Imp <> E_IfFalse constr
R26737:26740 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R26741:26742 Coq.Lists.List ListNotations :list_scope:'['_']' not
def 26871:26888 <> congruence_example
R26893:26898 Equiv <> cequiv def
R27081:27088 Imp <> ::x_';;'_x not
R27070:27074 Imp <> ::x_'::='_x not
R27069:27069 Imp <> X def
R27075:27078 Imp <> ANum constr
R27089:27093 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27114:27132 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27161:27204 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27218:27225 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27094:27096 Imp <> BEq constr
R27107:27110 Imp <> ANum constr
R27099:27101 Imp <> AId constr
R27103:27103 Imp <> X def
R27134:27138 Imp <> ::x_'::='_x not
R27133:27133 Imp <> Y def
R27139:27144 Imp <> AMinus constr
R27155:27157 Imp <> AId constr
R27159:27159 Imp <> X def
R27147:27149 Imp <> AId constr
R27151:27151 Imp <> X def
R27206:27210 Imp <> ::x_'::='_x not
R27205:27205 Imp <> Y def
R27211:27214 Imp <> ANum constr
R26938:26945 Imp <> ::x_';;'_x not
R26927:26931 Imp <> ::x_'::='_x not
R26926:26926 Imp <> X def
R26932:26935 Imp <> ANum constr
R26946:26950 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26971:26989 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27002:27019 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27033:27040 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26951:26953 Imp <> BEq constr
R26964:26967 Imp <> ANum constr
R26956:26958 Imp <> AId constr
R26960:26960 Imp <> X def
R26991:26995 Imp <> ::x_'::='_x not
R26990:26990 Imp <> Y def
R26996:26999 Imp <> ANum constr
R27021:27025 Imp <> ::x_'::='_x not
R27020:27020 Imp <> Y def
R27026:27029 Imp <> ANum constr
R27244:27258 Equiv <> CSeq_congruence thm
R27244:27258 Equiv <> CSeq_congruence thm
R27272:27282 Equiv <> refl_cequiv thm
R27272:27282 Equiv <> refl_cequiv thm
R27296:27309 Equiv <> CIf_congruence thm
R27296:27309 Equiv <> CIf_congruence thm
R27324:27334 Equiv <> refl_bequiv thm
R27324:27334 Equiv <> refl_bequiv thm
R27349:27363 Equiv <> CAss_congruence thm
R27349:27363 Equiv <> CAss_congruence thm
R27373:27378 Equiv <> aequiv def
R27413:27422 Coq.Arith.Minus <> minus_diag thm
R27413:27422 Coq.Arith.Minus <> minus_diag thm
R27437:27447 Equiv <> refl_cequiv thm
R27437:27447 Equiv <> refl_cequiv thm
def 28011:28022 <> atrans_sound
R28042:28045 Imp <> aexp ind
R28034:28037 Imp <> aexp ind
R28072:28075 Imp <> aexp ind
R28083:28088 Equiv <> aequiv def
R28093:28098 Equiv <> atrans var
R28100:28100 Equiv <> a var
R28090:28090 Equiv <> a var
def 28116:28127 <> btrans_sound
R28147:28150 Imp <> bexp ind
R28139:28142 Imp <> bexp ind
R28177:28180 Imp <> bexp ind
R28188:28193 Equiv <> bequiv def
R28198:28203 Equiv <> btrans var
R28205:28205 Equiv <> b var
R28195:28195 Equiv <> b var
def 28221:28232 <> ctrans_sound
R28251:28253 Imp <> com ind
R28244:28246 Imp <> com ind
R28280:28282 Imp <> com ind
R28290:28295 Equiv <> cequiv def
R28300:28305 Equiv <> ctrans var
R28307:28307 Equiv <> c var
R28297:28297 Equiv <> c var
def 28625:28643 <> fold_constants_aexp
R28650:28653 Imp <> aexp ind
R28658:28661 Imp <> aexp ind
R28674:28674 Equiv <> a var
R28685:28688 Imp <> ANum constr
R28701:28704 Imp <> ANum constr
R28712:28714 Imp <> AId constr
R28728:28730 Imp <> AId constr
R28738:28742 Imp <> APlus constr
R28767:28767 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28790:28791 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28814:28814 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28768:28786 Equiv <> fold_constants_aexp def
R28792:28810 Equiv <> fold_constants_aexp def
R28829:28829 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28837:28838 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28846:28846 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28830:28833 Imp <> ANum constr
R28839:28842 Imp <> ANum constr
R28851:28854 Imp <> ANum constr
R28859:28861 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R28874:28874 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28878:28879 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28883:28883 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28888:28892 Imp <> APlus constr
R28916:28921 Imp <> AMinus constr
R28945:28945 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28968:28969 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28992:28992 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28946:28964 Equiv <> fold_constants_aexp def
R28970:28988 Equiv <> fold_constants_aexp def
R29007:29007 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29015:29016 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29024:29024 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29008:29011 Imp <> ANum constr
R29017:29020 Imp <> ANum constr
R29029:29032 Imp <> ANum constr
R29037:29039 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R29052:29052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29056:29057 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29061:29061 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29066:29071 Imp <> AMinus constr
R29095:29099 Imp <> AMult constr
R29124:29124 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29147:29148 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29171:29171 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29125:29143 Equiv <> fold_constants_aexp def
R29149:29167 Equiv <> fold_constants_aexp def
R29186:29186 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29194:29195 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29203:29203 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29187:29190 Imp <> ANum constr
R29196:29199 Imp <> ANum constr
R29208:29211 Imp <> ANum constr
R29216:29218 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R29231:29231 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29235:29236 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29240:29240 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29245:29249 Imp <> AMult constr
def 29285:29297 <> fold_aexp_ex1
R29373:29378 Coq.Init.Logic <> :type_scope:x_'='_x not
R29305:29323 Equiv <> fold_constants_aexp def
R29333:29337 Imp <> AMult constr
R29366:29368 Imp <> AId constr
R29370:29370 Imp <> X def
R29340:29344 Imp <> APlus constr
R29356:29359 Imp <> ANum constr
R29347:29350 Imp <> ANum constr
R29379:29383 Imp <> AMult constr
R29395:29397 Imp <> AId constr
R29399:29399 Imp <> X def
R29386:29389 Imp <> ANum constr
def 29742:29754 <> fold_aexp_ex2
R29847:29851 Coq.Init.Logic <> :type_scope:x_'='_x not
R29762:29780 Equiv <> fold_constants_aexp def
R29790:29795 Imp <> AMinus constr
R29806:29810 Imp <> APlus constr
R29839:29841 Imp <> AId constr
R29843:29843 Imp <> Y def
R29813:29817 Imp <> AMult constr
R29829:29832 Imp <> ANum constr
R29820:29823 Imp <> ANum constr
R29798:29800 Imp <> AId constr
R29802:29802 Imp <> X def
R29852:29857 Imp <> AMinus constr
R29868:29872 Imp <> APlus constr
R29884:29886 Imp <> AId constr
R29888:29888 Imp <> Y def
R29875:29878 Imp <> ANum constr
R29860:29862 Imp <> AId constr
R29864:29864 Imp <> X def
def 30115:30133 <> fold_constants_bexp
R30140:30143 Imp <> bexp ind
R30148:30151 Imp <> bexp ind
R30164:30164 Equiv <> b var
R30175:30179 Imp <> BTrue constr
R30191:30195 Imp <> BTrue constr
R30201:30206 Imp <> BFalse constr
R30217:30222 Imp <> BFalse constr
R30228:30230 Imp <> BEq constr
R30255:30255 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30278:30279 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30302:30302 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30256:30274 Equiv <> fold_constants_aexp def
R30280:30298 Equiv <> fold_constants_aexp def
R30317:30317 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30325:30326 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30334:30334 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30318:30321 Imp <> ANum constr
R30327:30330 Imp <> ANum constr
R30342:30348 Coq.Arith.EqNat <> beq_nat def
R30372:30377 Imp <> BFalse constr
R30361:30365 Imp <> BTrue constr
R30387:30387 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30391:30392 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30396:30396 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30401:30403 Imp <> BEq constr
R30427:30429 Imp <> BLe constr
R30454:30454 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30477:30478 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30501:30501 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30455:30473 Equiv <> fold_constants_aexp def
R30479:30497 Equiv <> fold_constants_aexp def
R30516:30516 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30524:30525 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30533:30533 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30517:30520 Imp <> ANum constr
R30526:30529 Imp <> ANum constr
R30541:30547 SfLib <> ble_nat def
R30571:30576 Imp <> BFalse constr
R30560:30564 Imp <> BTrue constr
R30586:30586 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30590:30591 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30595:30595 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30600:30602 Imp <> BLe constr
R30626:30629 Imp <> BNot constr
R30652:30670 Equiv <> fold_constants_bexp def
R30689:30693 Imp <> BTrue constr
R30698:30703 Imp <> BFalse constr
R30713:30718 Imp <> BFalse constr
R30723:30727 Imp <> BTrue constr
R30744:30747 Imp <> BNot constr
R30767:30770 Imp <> BAnd constr
R30795:30795 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30818:30819 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30842:30842 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30796:30814 Equiv <> fold_constants_bexp def
R30820:30838 Equiv <> fold_constants_bexp def
R30857:30857 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30863:30864 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30870:30870 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30858:30862 Imp <> BTrue constr
R30865:30869 Imp <> BTrue constr
R30875:30879 Imp <> BTrue constr
R30889:30889 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30895:30896 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30903:30903 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30890:30894 Imp <> BTrue constr
R30897:30902 Imp <> BFalse constr
R30908:30913 Imp <> BFalse constr
R30923:30923 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30930:30931 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30937:30937 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30924:30929 Imp <> BFalse constr
R30932:30936 Imp <> BTrue constr
R30942:30947 Imp <> BFalse constr
R30957:30957 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30964:30965 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30972:30972 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30958:30963 Imp <> BFalse constr
R30966:30971 Imp <> BFalse constr
R30977:30982 Imp <> BFalse constr
R30992:30992 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30996:30997 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31001:31001 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31006:31009 Imp <> BAnd constr
def 31045:31057 <> fold_bexp_ex1
R31124:31128 Coq.Init.Logic <> :type_scope:x_'='_x not
R31065:31083 Equiv <> fold_constants_bexp def
R31086:31089 Imp <> BAnd constr
R31098:31101 Imp <> BNot constr
R31104:31107 Imp <> BAnd constr
R31116:31120 Imp <> BTrue constr
R31109:31114 Imp <> BFalse constr
R31091:31095 Imp <> BTrue constr
R31129:31133 Imp <> BTrue constr
def 31170:31182 <> fold_bexp_ex2
R31335:31339 Coq.Init.Logic <> :type_scope:x_'='_x not
R31190:31208 Equiv <> fold_constants_bexp def
R31218:31221 Imp <> BAnd constr
R31259:31261 Imp <> BEq constr
R31291:31296 Imp <> AMinus constr
R31308:31312 Imp <> APlus constr
R31324:31327 Imp <> ANum constr
R31315:31318 Imp <> ANum constr
R31299:31302 Imp <> ANum constr
R31264:31267 Imp <> ANum constr
R31224:31226 Imp <> BEq constr
R31237:31239 Imp <> AId constr
R31241:31241 Imp <> Y def
R31229:31231 Imp <> AId constr
R31233:31233 Imp <> X def
R31340:31343 Imp <> BAnd constr
R31367:31371 Imp <> BTrue constr
R31346:31348 Imp <> BEq constr
R31359:31361 Imp <> AId constr
R31363:31363 Imp <> Y def
R31351:31353 Imp <> AId constr
R31355:31355 Imp <> X def
def 31536:31553 <> fold_constants_com
R31560:31562 Imp <> com ind
R31567:31569 Imp <> com ind
R31582:31582 Equiv <> c var
R31593:31596 Imp <> ::'SKIP' not
R31613:31616 Imp <> ::'SKIP' not
R31623:31627 Imp <> ::x_'::='_x not
R31641:31644 Imp <> CAss constr
R31649:31667 Equiv <> fold_constants_aexp def
R31678:31681 Imp <> ::x_';;'_x not
R31696:31696 Imp <> ::x_';;'_x not
R31718:31723 Imp <> ::x_';;'_x not
R31745:31745 Imp <> ::x_';;'_x not
R31697:31714 Equiv <> fold_constants_com def
R31724:31741 Equiv <> fold_constants_com def
R31751:31754 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31756:31761 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31764:31769 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31772:31774 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31792:31810 Equiv <> fold_constants_bexp def
R31827:31831 Imp <> BTrue constr
R31836:31853 Equiv <> fold_constants_com def
R31866:31871 Imp <> BFalse constr
R31876:31893 Equiv <> fold_constants_com def
R31912:31915 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31918:31923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31945:31972 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31994:31996 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31924:31941 Equiv <> fold_constants_com def
R31973:31990 Equiv <> fold_constants_com def
R32012:32017 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32019:32022 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32024:32027 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32045:32063 Equiv <> fold_constants_bexp def
R32080:32084 Imp <> BTrue constr
R32089:32094 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32100:32103 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32108:32111 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32095:32099 Imp <> BTrue constr
R32104:32107 Imp <> ::'SKIP' not
R32121:32126 Imp <> BFalse constr
R32131:32134 Imp <> ::'SKIP' not
R32150:32155 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32158:32162 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32183:32187 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32163:32180 Equiv <> fold_constants_com def
R32182:32182 Equiv <> c var
def 32226:32237 <> fold_com_ex1
R32693:32733 Coq.Init.Logic <> :type_scope:x_'='_x not
R32995:32995 Coq.Init.Logic <> :type_scope:x_'='_x not
R32243:32260 Equiv <> fold_constants_com def
R32325:32332 Imp <> ::x_';;'_x not
R32297:32301 Imp <> ::x_'::='_x not
R32296:32296 Imp <> X def
R32302:32306 Imp <> APlus constr
R32318:32321 Imp <> ANum constr
R32309:32312 Imp <> ANum constr
R32362:32369 Imp <> ::x_';;'_x not
R32334:32338 Imp <> ::x_'::='_x not
R32333:32333 Imp <> Y def
R32339:32344 Imp <> AMinus constr
R32355:32358 Imp <> ANum constr
R32347:32349 Imp <> AId constr
R32351:32351 Imp <> X def
R32484:32491 Imp <> ::x_';;'_x not
R32370:32373 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32428:32440 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32445:32463 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32476:32483 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32374:32376 Imp <> BEq constr
R32404:32408 Imp <> APlus constr
R32420:32423 Imp <> ANum constr
R32411:32414 Imp <> ANum constr
R32379:32384 Imp <> AMinus constr
R32395:32397 Imp <> AId constr
R32399:32399 Imp <> Y def
R32387:32389 Imp <> AId constr
R32391:32391 Imp <> X def
R32441:32444 Imp <> ::'SKIP' not
R32465:32469 Imp <> ::x_'::='_x not
R32464:32464 Imp <> Y def
R32470:32473 Imp <> ANum constr
R32608:32615 Imp <> ::x_';;'_x not
R32492:32495 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32552:32564 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32577:32594 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32599:32607 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32496:32498 Imp <> BLe constr
R32510:32515 Imp <> AMinus constr
R32527:32531 Imp <> APlus constr
R32543:32546 Imp <> ANum constr
R32534:32537 Imp <> ANum constr
R32518:32521 Imp <> ANum constr
R32501:32504 Imp <> ANum constr
R32566:32570 Imp <> ::x_'::='_x not
R32565:32565 Imp <> Y def
R32571:32574 Imp <> ANum constr
R32595:32598 Imp <> ::'SKIP' not
R32616:32621 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32642:32653 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32682:32691 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32622:32624 Imp <> BEq constr
R32635:32638 Imp <> ANum constr
R32627:32629 Imp <> AId constr
R32631:32631 Imp <> Y def
R32655:32659 Imp <> ::x_'::='_x not
R32654:32654 Imp <> X def
R32660:32664 Imp <> APlus constr
R32675:32678 Imp <> ANum constr
R32667:32669 Imp <> AId constr
R32671:32671 Imp <> X def
R32746:32753 Imp <> ::x_';;'_x not
R32735:32739 Imp <> ::x_'::='_x not
R32734:32734 Imp <> X def
R32740:32743 Imp <> ANum constr
R32783:32790 Imp <> ::x_';;'_x not
R32755:32759 Imp <> ::x_'::='_x not
R32754:32754 Imp <> Y def
R32760:32765 Imp <> AMinus constr
R32776:32779 Imp <> ANum constr
R32768:32770 Imp <> AId constr
R32772:32772 Imp <> X def
R32891:32898 Imp <> ::x_';;'_x not
R32791:32794 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32832:32844 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32849:32868 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32881:32890 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32795:32797 Imp <> BEq constr
R32825:32828 Imp <> ANum constr
R32800:32805 Imp <> AMinus constr
R32816:32818 Imp <> AId constr
R32820:32820 Imp <> Y def
R32808:32810 Imp <> AId constr
R32812:32812 Imp <> X def
R32845:32848 Imp <> ::'SKIP' not
R32870:32874 Imp <> ::x_'::='_x not
R32869:32869 Imp <> Y def
R32875:32878 Imp <> ANum constr
R32911:32918 Imp <> ::x_';;'_x not
R32900:32904 Imp <> ::x_'::='_x not
R32899:32899 Imp <> Y def
R32905:32908 Imp <> ANum constr
R32919:32924 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32945:32956 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32985:32994 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32925:32927 Imp <> BEq constr
R32938:32941 Imp <> ANum constr
R32930:32932 Imp <> AId constr
R32934:32934 Imp <> Y def
R32958:32962 Imp <> ::x_'::='_x not
R32957:32957 Imp <> X def
R32963:32967 Imp <> APlus constr
R32978:32981 Imp <> ANum constr
R32970:32972 Imp <> AId constr
R32974:32974 Imp <> X def
prf 33245:33269 <> fold_constants_aexp_sound
R33276:33287 Equiv <> atrans_sound def
R33289:33307 Equiv <> fold_constants_aexp def
R33326:33337 Equiv <> atrans_sound def
R33357:33362 Equiv <> aequiv def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
prf 36855:36879 <> fold_constants_bexp_sound
R36885:36896 Equiv <> btrans_sound def
R36898:36916 Equiv <> fold_constants_bexp def
R36935:36946 Equiv <> btrans_sound def
R36966:36971 Equiv <> bequiv def
R37484:37502 Equiv <> fold_constants_aexp def
R37484:37502 Equiv <> fold_constants_aexp def
R37541:37559 Equiv <> fold_constants_aexp def
R37541:37559 Equiv <> fold_constants_aexp def
R37597:37601 Imp <> aeval def
R37616:37620 Imp <> aeval def
R37663:37687 Equiv <> fold_constants_aexp_sound thm
R37616:37620 Imp <> aeval def
R37597:37601 Imp <> aeval def
R37663:37687 Equiv <> fold_constants_aexp_sound thm
R37717:37721 Imp <> aeval def
R37736:37740 Imp <> aeval def
R37783:37807 Equiv <> fold_constants_aexp_sound thm
R37736:37740 Imp <> aeval def
R37717:37721 Imp <> aeval def
R37783:37807 Equiv <> fold_constants_aexp_sound thm
R37998:38004 Coq.Arith.EqNat <> beq_nat def
R37998:38004 Coq.Arith.EqNat <> beq_nat def
R38112:38130 Equiv <> fold_constants_aexp def
R38112:38130 Equiv <> fold_constants_aexp def
R38167:38185 Equiv <> fold_constants_aexp def
R38167:38185 Equiv <> fold_constants_aexp def
R38221:38225 Imp <> aeval def
R38240:38244 Imp <> aeval def
R38280:38304 Equiv <> fold_constants_aexp_sound thm
R38240:38244 Imp <> aeval def
R38221:38225 Imp <> aeval def
R38280:38304 Equiv <> fold_constants_aexp_sound thm
R38332:38336 Imp <> aeval def
R38351:38355 Imp <> aeval def
R38391:38415 Equiv <> fold_constants_aexp_sound thm
R38351:38355 Imp <> aeval def
R38332:38336 Imp <> aeval def
R38391:38415 Equiv <> fold_constants_aexp_sound thm
R38498:38504 SfLib <> ble_nat def
R38498:38504 SfLib <> ble_nat def
R38576:38594 Equiv <> fold_constants_bexp def
R38576:38594 Equiv <> fold_constants_bexp def
R38707:38725 Equiv <> fold_constants_bexp def
R38707:38725 Equiv <> fold_constants_bexp def
R38765:38783 Equiv <> fold_constants_bexp def
R38765:38783 Equiv <> fold_constants_bexp def
prf 39026:39049 <> fold_constants_com_sound
R39056:39067 Equiv <> ctrans_sound def
R39069:39086 Equiv <> fold_constants_com def
R39106:39117 Equiv <> ctrans_sound def
R39191:39201 Equiv <> refl_cequiv thm
R39191:39201 Equiv <> refl_cequiv thm
R39224:39238 Equiv <> CAss_congruence thm
R39224:39238 Equiv <> CAss_congruence thm
R39247:39271 Equiv <> fold_constants_aexp_sound thm
R39247:39271 Equiv <> fold_constants_aexp_sound thm
R39293:39307 Equiv <> CSeq_congruence thm
R39293:39307 Equiv <> CSeq_congruence thm
R39349:39354 Equiv <> bequiv def
R39359:39377 Equiv <> fold_constants_bexp def
R39349:39354 Equiv <> bequiv def
R39359:39377 Equiv <> fold_constants_bexp def
R39421:39445 Equiv <> fold_constants_bexp_sound thm
R39421:39445 Equiv <> fold_constants_bexp_sound thm
R39462:39480 Equiv <> fold_constants_bexp def
R39654:39667 Equiv <> CIf_congruence thm
R39462:39480 Equiv <> fold_constants_bexp def
R39654:39667 Equiv <> CIf_congruence thm
R39654:39667 Equiv <> CIf_congruence thm
R39654:39667 Equiv <> CIf_congruence thm
R39654:39667 Equiv <> CIf_congruence thm
R39654:39667 Equiv <> CIf_congruence thm
R39654:39667 Equiv <> CIf_congruence thm
R39722:39733 Equiv <> trans_cequiv thm
R39722:39733 Equiv <> trans_cequiv thm
R39772:39779 Equiv <> IFB_true thm
R39772:39779 Equiv <> IFB_true thm
R39834:39845 Equiv <> trans_cequiv thm
R39834:39845 Equiv <> trans_cequiv thm
R39884:39892 Equiv <> IFB_false thm
R39884:39892 Equiv <> IFB_false thm
R39938:39943 Equiv <> bequiv def
R39948:39966 Equiv <> fold_constants_bexp def
R39938:39943 Equiv <> bequiv def
R39948:39966 Equiv <> fold_constants_bexp def
R39981:40005 Equiv <> fold_constants_bexp_sound thm
R39981:40005 Equiv <> fold_constants_bexp_sound thm
R40020:40038 Equiv <> fold_constants_bexp def
R40064:40073 Equiv <> WHILE_true thm
R40100:40116 Equiv <> CWhile_congruence thm
R40020:40038 Equiv <> fold_constants_bexp def
R40064:40073 Equiv <> WHILE_true thm
R40064:40073 Equiv <> WHILE_true thm
R40064:40073 Equiv <> WHILE_true thm
R40064:40073 Equiv <> WHILE_true thm
R40064:40073 Equiv <> WHILE_true thm
R40064:40073 Equiv <> WHILE_true thm
R40100:40116 Equiv <> CWhile_congruence thm
R40100:40116 Equiv <> CWhile_congruence thm
R40100:40116 Equiv <> CWhile_congruence thm
R40100:40116 Equiv <> CWhile_congruence thm
R40100:40116 Equiv <> CWhile_congruence thm
R40159:40164 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R40171:40174 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R40176:40179 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R40165:40170 Imp <> BFalse constr
R40140:40151 Equiv <> trans_cequiv thm
R40159:40164 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R40171:40174 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R40176:40179 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R40165:40170 Imp <> BFalse constr
R40140:40151 Equiv <> trans_cequiv thm
R40191:40207 Equiv <> CWhile_congruence thm
R40191:40207 Equiv <> CWhile_congruence thm
R40228:40238 Equiv <> refl_cequiv thm
R40228:40238 Equiv <> refl_cequiv thm
R40249:40259 Equiv <> WHILE_false thm
R40249:40259 Equiv <> WHILE_false thm
R40268:40278 Equiv <> refl_bequiv thm
R40268:40278 Equiv <> refl_bequiv thm
R40292:40302 Equiv <> WHILE_false thm
def 41782:41800 <> optimize_0plus_aexp
R41805:41808 Imp <> aexp ind
R41813:41816 Imp <> aexp ind
R41829:41829 Equiv <> e var
R41840:41843 Imp <> ANum constr
R41856:41859 Imp <> ANum constr
R41867:41869 Imp <> AId constr
R41876:41878 Imp <> AId constr
R41886:41890 Imp <> APlus constr
R41893:41896 Imp <> ANum constr
R41906:41910 Imp <> APlus constr
R41916:41919 Imp <> ANum constr
R41933:41951 Equiv <> optimize_0plus_aexp def
R41933:41951 Equiv <> optimize_0plus_aexp def
R41960:41964 Imp <> APlus constr
R41981:41985 Imp <> APlus constr
R42013:42031 Equiv <> optimize_0plus_aexp def
R41988:42006 Equiv <> optimize_0plus_aexp def
R42041:42046 Imp <> AMinus constr
R42063:42068 Imp <> AMinus constr
R42096:42114 Equiv <> optimize_0plus_aexp def
R42071:42089 Equiv <> optimize_0plus_aexp def
R42124:42128 Imp <> AMult constr
R42145:42149 Imp <> AMult constr
R42177:42195 Equiv <> optimize_0plus_aexp def
R42152:42170 Equiv <> optimize_0plus_aexp def
def 42218:42236 <> optimize_0plus_bexp
R42243:42246 Imp <> bexp ind
R42251:42254 Imp <> bexp ind
R42267:42267 Equiv <> b var
R42278:42282 Imp <> BTrue constr
R42287:42291 Imp <> BTrue constr
R42297:42302 Imp <> BFalse constr
R42307:42312 Imp <> BFalse constr
R42318:42320 Imp <> BEq constr
R42338:42340 Imp <> BEq constr
R42368:42386 Equiv <> optimize_0plus_aexp def
R42343:42361 Equiv <> optimize_0plus_aexp def
R42396:42398 Imp <> BLe constr
R42416:42418 Imp <> BLe constr
R42446:42464 Equiv <> optimize_0plus_aexp def
R42421:42439 Equiv <> optimize_0plus_aexp def
R42474:42477 Imp <> BNot constr
R42492:42495 Imp <> BNot constr
R42498:42516 Equiv <> optimize_0plus_bexp def
R42526:42529 Imp <> BAnd constr
R42547:42550 Imp <> BAnd constr
R42578:42596 Equiv <> optimize_0plus_bexp def
R42553:42571 Equiv <> optimize_0plus_bexp def
def 42619:42636 <> optimize_0plus_com
R42643:42645 Imp <> com ind
R42650:42652 Imp <> com ind
R42665:42665 Equiv <> c var
R42676:42679 Imp <> ::'SKIP' not
R42694:42697 Imp <> ::'SKIP' not
R42704:42708 Imp <> ::x_'::='_x not
R42721:42724 Imp <> CAss constr
R42729:42747 Equiv <> optimize_0plus_aexp def
R42758:42761 Imp <> ::x_';;'_x not
R42775:42775 Imp <> ::x_';;'_x not
R42797:42802 Imp <> ::x_';;'_x not
R42824:42824 Imp <> ::x_';;'_x not
R42776:42793 Equiv <> optimize_0plus_com def
R42803:42820 Equiv <> optimize_0plus_com def
R42830:42833 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42835:42840 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42843:42848 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42851:42853 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42864:42868 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42890:42902 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42924:42935 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42957:42965 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R42869:42887 Equiv <> optimize_0plus_bexp def
R42903:42920 Equiv <> optimize_0plus_com def
R42936:42953 Equiv <> optimize_0plus_com def
R42971:42976 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R42978:42981 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R42983:42986 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R42997:43003 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43025:43038 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43059:43069 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43004:43022 Equiv <> optimize_0plus_bexp def
R43039:43056 Equiv <> optimize_0plus_com def
R43058:43058 Equiv <> c var
def 43090:43104 <> constfold_0plus
R43110:43112 Imp <> com ind
R43117:43119 Imp <> com ind
R43126:43143 Equiv <> optimize_0plus_com def
R43146:43163 Equiv <> fold_constants_com def
R43165:43165 Equiv <> c var
prf 43177:43201 <> optimize_0plus_aexp_sound
R43206:43217 Equiv <> atrans_sound def
R43219:43237 Equiv <> optimize_0plus_aexp def
R43259:43270 Equiv <> atrans_sound def
R43301:43311 Equiv <> refl_aequiv thm
R43301:43311 Equiv <> refl_aequiv thm
R43329:43339 Equiv <> refl_aequiv thm
R43329:43339 Equiv <> refl_aequiv thm
R43355:43360 Equiv <> aequiv def
R43378:43383 Equiv <> aequiv def
R43466:43471 Equiv <> aequiv def
R43616:43621 Equiv <> aequiv def
R43639:43644 Equiv <> aequiv def
R43727:43732 Equiv <> aequiv def
R43878:43883 Equiv <> aequiv def
R43901:43906 Equiv <> aequiv def
R43989:43994 Equiv <> aequiv def
prf 44142:44166 <> optimize_0plus_bexp_sound
R44171:44182 Equiv <> btrans_sound def
R44184:44202 Equiv <> optimize_0plus_bexp def
R44221:44232 Equiv <> btrans_sound def
R44264:44274 Equiv <> refl_bequiv thm
R44264:44274 Equiv <> refl_bequiv thm
R44292:44302 Equiv <> refl_bequiv thm
R44292:44302 Equiv <> refl_bequiv thm
R44315:44320 Equiv <> bequiv def
R44350:44368 Equiv <> optimize_0plus_aexp def
R44350:44368 Equiv <> optimize_0plus_aexp def
R44400:44418 Equiv <> optimize_0plus_aexp def
R44400:44418 Equiv <> optimize_0plus_aexp def
R44454:44458 Imp <> aeval def
R44472:44476 Imp <> aeval def
R44510:44534 Equiv <> optimize_0plus_aexp_sound thm
R44472:44476 Imp <> aeval def
R44454:44458 Imp <> aeval def
R44510:44534 Equiv <> optimize_0plus_aexp_sound thm
R44563:44567 Imp <> aeval def
R44582:44586 Imp <> aeval def
R44622:44646 Equiv <> optimize_0plus_aexp_sound thm
R44582:44586 Imp <> aeval def
R44563:44567 Imp <> aeval def
R44622:44646 Equiv <> optimize_0plus_aexp_sound thm
R44688:44693 Equiv <> bequiv def
R44723:44741 Equiv <> optimize_0plus_aexp def
R44723:44741 Equiv <> optimize_0plus_aexp def
R44773:44791 Equiv <> optimize_0plus_aexp def
R44773:44791 Equiv <> optimize_0plus_aexp def
R44827:44831 Imp <> aeval def
R44845:44849 Imp <> aeval def
R44883:44907 Equiv <> optimize_0plus_aexp_sound thm
R44845:44849 Imp <> aeval def
R44827:44831 Imp <> aeval def
R44883:44907 Equiv <> optimize_0plus_aexp_sound thm
R44936:44940 Imp <> aeval def
R44955:44959 Imp <> aeval def
R44995:45019 Equiv <> optimize_0plus_aexp_sound thm
R44955:44959 Imp <> aeval def
R44936:44940 Imp <> aeval def
R44995:45019 Equiv <> optimize_0plus_aexp_sound thm
R45061:45066 Equiv <> bequiv def
R45132:45137 Equiv <> bequiv def
prf 45225:45248 <> optimize_0plus_com_sound
R45253:45264 Equiv <> ctrans_sound def
R45266:45283 Equiv <> optimize_0plus_com def
R45302:45313 Equiv <> ctrans_sound def
R45356:45366 Equiv <> refl_cequiv thm
R45356:45366 Equiv <> refl_cequiv thm
R45385:45399 Equiv <> CAss_congruence thm
R45385:45399 Equiv <> CAss_congruence thm
R45408:45432 Equiv <> optimize_0plus_aexp_sound thm
R45408:45432 Equiv <> optimize_0plus_aexp_sound thm
R45451:45465 Equiv <> CSeq_congruence thm
R45451:45465 Equiv <> CSeq_congruence thm
R45510:45523 Equiv <> CIf_congruence thm
R45510:45523 Equiv <> CIf_congruence thm
R45532:45556 Equiv <> optimize_0plus_bexp_sound thm
R45532:45556 Equiv <> optimize_0plus_bexp_sound thm
R45599:45615 Equiv <> CWhile_congruence thm
R45599:45615 Equiv <> CWhile_congruence thm
R45624:45648 Equiv <> optimize_0plus_bexp_sound thm
R45624:45648 Equiv <> optimize_0plus_bexp_sound thm
prf 45677:45697 <> constfold_0plus_sound
R45702:45713 Equiv <> ctrans_sound def
R45715:45729 Equiv <> constfold_0plus def
R45748:45759 Equiv <> ctrans_sound def
R45771:45785 Equiv <> constfold_0plus def
R45810:45827 Equiv <> fold_constants_com def
R45810:45827 Equiv <> fold_constants_com def
R45847:45858 Equiv <> trans_cequiv thm
R45847:45858 Equiv <> trans_cequiv thm
R45890:45913 Equiv <> fold_constants_com_sound thm
R45890:45913 Equiv <> fold_constants_com_sound thm
R45924:45947 Equiv <> optimize_0plus_com_sound thm
R45924:45947 Equiv <> optimize_0plus_com_sound thm
def 46861:46870 <> subst_aexp
R46877:46878 SfLib <> id ind
R46886:46889 Imp <> aexp ind
R46897:46900 Imp <> aexp ind
R46905:46908 Imp <> aexp ind
R46921:46921 Equiv <> a var
R46932:46935 Imp <> ANum constr
R46948:46951 Imp <> ANum constr
R46959:46961 Imp <> AId constr
R46978:46986 SfLib <> eq_id_dec thm
R46988:46988 Equiv <> i var
R47005:47007 Imp <> AId constr
R46998:46998 Equiv <> u var
R47016:47020 Imp <> APlus constr
R47032:47036 Imp <> APlus constr
R47059:47068 Equiv <> subst_aexp def
R47072:47072 Equiv <> u var
R47070:47070 Equiv <> i var
R47039:47048 Equiv <> subst_aexp def
R47052:47052 Equiv <> u var
R47050:47050 Equiv <> i var
R47082:47087 Imp <> AMinus constr
R47098:47103 Imp <> AMinus constr
R47126:47135 Equiv <> subst_aexp def
R47139:47139 Equiv <> u var
R47137:47137 Equiv <> i var
R47106:47115 Equiv <> subst_aexp def
R47119:47119 Equiv <> u var
R47117:47117 Equiv <> i var
R47149:47153 Imp <> AMult constr
R47165:47169 Imp <> AMult constr
R47192:47201 Equiv <> subst_aexp def
R47205:47205 Equiv <> u var
R47203:47203 Equiv <> i var
R47172:47181 Equiv <> subst_aexp def
R47185:47185 Equiv <> u var
R47183:47183 Equiv <> i var
def 47227:47239 <> subst_aexp_ex
R47309:47314 Coq.Init.Logic <> :type_scope:x_'='_x not
R47356:47356 Coq.Init.Logic <> :type_scope:x_'='_x not
R47245:47254 Equiv <> subst_aexp def
R47287:47291 Imp <> APlus constr
R47302:47304 Imp <> AId constr
R47306:47306 Imp <> X def
R47294:47296 Imp <> AId constr
R47298:47298 Imp <> Y def
R47259:47263 Imp <> APlus constr
R47276:47279 Imp <> ANum constr
R47266:47269 Imp <> ANum constr
R47256:47256 Imp <> X def
R47315:47319 Imp <> APlus constr
R47330:47334 Imp <> APlus constr
R47347:47350 Imp <> ANum constr
R47337:47340 Imp <> ANum constr
R47322:47324 Imp <> AId constr
R47326:47326 Imp <> Y def
def 47552:47571 <> subst_equiv_property
R47598:47603 Equiv <> cequiv def
R47648:47650 Imp <> ::x_';;'_x not
R47641:47645 Imp <> ::x_'::='_x not
R47639:47640 Equiv <> i1 var
R47646:47647 Equiv <> a1 var
R47653:47657 Imp <> ::x_'::='_x not
R47651:47652 Equiv <> i2 var
R47658:47667 Equiv <> subst_aexp def
R47675:47676 Equiv <> a2 var
R47672:47673 Equiv <> a1 var
R47669:47670 Equiv <> i1 var
R47615:47617 Imp <> ::x_';;'_x not
R47608:47612 Imp <> ::x_'::='_x not
R47606:47607 Equiv <> i1 var
R47613:47614 Equiv <> a1 var
R47620:47624 Imp <> ::x_'::='_x not
R47618:47619 Equiv <> i2 var
R47625:47626 Equiv <> a2 var
prf 48931:48943 <> subst_inequiv
R48950:48951 Coq.Init.Logic <> :type_scope:'~'_x not
R48952:48971 Equiv <> subst_equiv_property def
R48990:49009 Equiv <> subst_equiv_property def
R49220:49235 Imp <> ::x_';;'_x not
R49193:49197 Imp <> ::x_'::='_x not
R49192:49192 Imp <> X def
R49198:49202 Imp <> APlus constr
R49213:49216 Imp <> ANum constr
R49205:49207 Imp <> AId constr
R49209:49209 Imp <> X def
R49237:49241 Imp <> ::x_'::='_x not
R49236:49236 Imp <> Y def
R49242:49244 Imp <> AId constr
R49246:49246 Imp <> X def
R49220:49235 Imp <> ::x_';;'_x not
R49193:49197 Imp <> ::x_'::='_x not
R49192:49192 Imp <> X def
R49198:49202 Imp <> APlus constr
R49213:49216 Imp <> ANum constr
R49205:49207 Imp <> AId constr
R49209:49209 Imp <> X def
R49237:49241 Imp <> ::x_'::='_x not
R49236:49236 Imp <> Y def
R49242:49244 Imp <> AId constr
R49246:49246 Imp <> X def
R49303:49318 Imp <> ::x_';;'_x not
R49276:49280 Imp <> ::x_'::='_x not
R49275:49275 Imp <> X def
R49281:49285 Imp <> APlus constr
R49296:49299 Imp <> ANum constr
R49288:49290 Imp <> AId constr
R49292:49292 Imp <> X def
R49320:49324 Imp <> ::x_'::='_x not
R49319:49319 Imp <> Y def
R49325:49329 Imp <> APlus constr
R49340:49343 Imp <> ANum constr
R49332:49334 Imp <> AId constr
R49336:49336 Imp <> X def
R49303:49318 Imp <> ::x_';;'_x not
R49276:49280 Imp <> ::x_'::='_x not
R49275:49275 Imp <> X def
R49281:49285 Imp <> APlus constr
R49296:49299 Imp <> ANum constr
R49288:49290 Imp <> AId constr
R49292:49292 Imp <> X def
R49320:49324 Imp <> ::x_'::='_x not
R49319:49319 Imp <> Y def
R49325:49329 Imp <> APlus constr
R49340:49343 Imp <> ANum constr
R49332:49334 Imp <> AId constr
R49336:49336 Imp <> X def
R49373:49378 Equiv <> cequiv def
R49373:49378 Equiv <> cequiv def
R49598:49603 Imp <> update def
R49630:49630 Imp <> Y def
R49606:49611 Imp <> update def
R49625:49625 Imp <> X def
R49613:49623 Imp <> empty_state def
R49598:49603 Imp <> update def
R49630:49630 Imp <> Y def
R49606:49611 Imp <> update def
R49625:49625 Imp <> X def
R49613:49623 Imp <> empty_state def
R49655:49660 Imp <> update def
R49687:49687 Imp <> Y def
R49663:49668 Imp <> update def
R49682:49682 Imp <> X def
R49670:49680 Imp <> empty_state def
R49655:49660 Imp <> update def
R49687:49687 Imp <> Y def
R49663:49668 Imp <> update def
R49682:49682 Imp <> X def
R49670:49680 Imp <> empty_state def
R49716:49718 Imp <> ::x_'/'_x_'||'_x not
R49730:49733 Imp <> ::x_'/'_x_'||'_x not
R49719:49729 Imp <> empty_state def
R49756:49758 Imp <> ::x_'/'_x_'||'_x not
R49770:49773 Imp <> ::x_'/'_x_'||'_x not
R49759:49769 Imp <> empty_state def
R49827:49832 Imp <> update def
R49846:49846 Imp <> X def
R49834:49844 Imp <> empty_state def
R49807:49811 Imp <> E_Seq constr
R49867:49871 Imp <> E_Ass constr
R49716:49718 Imp <> ::x_'/'_x_'||'_x not
R49730:49733 Imp <> ::x_'/'_x_'||'_x not
R49719:49729 Imp <> empty_state def
R49756:49758 Imp <> ::x_'/'_x_'||'_x not
R49770:49773 Imp <> ::x_'/'_x_'||'_x not
R49759:49769 Imp <> empty_state def
R49756:49758 Imp <> ::x_'/'_x_'||'_x not
R49770:49773 Imp <> ::x_'/'_x_'||'_x not
R49759:49769 Imp <> empty_state def
R49827:49832 Imp <> update def
R49846:49846 Imp <> X def
R49834:49844 Imp <> empty_state def
R49807:49811 Imp <> E_Seq constr
R49867:49871 Imp <> E_Ass constr
R49867:49871 Imp <> E_Ass constr
R49827:49832 Imp <> update def
R49846:49846 Imp <> X def
R49834:49844 Imp <> empty_state def
R49807:49811 Imp <> E_Seq constr
R49867:49871 Imp <> E_Ass constr
R49867:49871 Imp <> E_Ass constr
R49827:49832 Imp <> update def
R49846:49846 Imp <> X def
R49834:49844 Imp <> empty_state def
R49807:49811 Imp <> E_Seq constr
R49867:49871 Imp <> E_Ass constr
R49867:49871 Imp <> E_Ass constr
R49827:49832 Imp <> update def
R49846:49846 Imp <> X def
R49834:49844 Imp <> empty_state def
R49807:49811 Imp <> E_Seq constr
R50026:50028 Coq.Init.Logic <> :type_scope:x_'='_x not
R50049:50067 Imp <> ceval_deterministic thm
R50072:50082 Imp <> empty_state def
R50026:50028 Coq.Init.Logic <> :type_scope:x_'='_x not
R50049:50067 Imp <> ceval_deterministic thm
R50072:50082 Imp <> empty_state def
R50124:50126 Coq.Init.Logic <> :type_scope:x_'='_x not
R50123:50123 Imp <> Y def
R50131:50131 Imp <> Y def
R50124:50126 Coq.Init.Logic <> :type_scope:x_'='_x not
R50123:50123 Imp <> Y def
R50131:50131 Imp <> Y def
ind 50539:50558 <> var_not_used_in_aexp
constr 50589:50594 <> VNUNum
constr 50643:50647 <> VNUId
constr 50705:50711 <> VNUPlus
constr 50846:50853 <> VNUMinus
constr 50989:50995 <> VNUMult
R50563:50564 SfLib <> id ind
R50569:50572 Imp <> aexp ind
R50607:50626 Equiv <> var_not_used_in_aexp ind
R50631:50634 Imp <> ANum constr
R50636:50636 Equiv <> n var
R50670:50689 Equiv <> var_not_used_in_aexp ind
R50694:50696 Imp <> AId constr
R50698:50698 Equiv <> Y var
R50661:50664 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R50665:50665 Equiv <> Y var
R50805:50824 Equiv <> var_not_used_in_aexp ind
R50829:50833 Imp <> APlus constr
R50838:50839 Equiv <> a2 var
R50835:50836 Equiv <> a1 var
R50770:50789 Equiv <> var_not_used_in_aexp ind
R50793:50794 Equiv <> a2 var
R50735:50754 Equiv <> var_not_used_in_aexp ind
R50758:50759 Equiv <> a1 var
R50947:50966 Equiv <> var_not_used_in_aexp ind
R50971:50976 Imp <> AMinus constr
R50981:50982 Equiv <> a2 var
R50978:50979 Equiv <> a1 var
R50912:50931 Equiv <> var_not_used_in_aexp ind
R50935:50936 Equiv <> a2 var
R50877:50896 Equiv <> var_not_used_in_aexp ind
R50900:50901 Equiv <> a1 var
R51089:51108 Equiv <> var_not_used_in_aexp ind
R51113:51117 Imp <> AMult constr
R51122:51123 Equiv <> a2 var
R51119:51120 Equiv <> a1 var
R51054:51073 Equiv <> var_not_used_in_aexp ind
R51077:51078 Equiv <> a2 var
R51019:51038 Equiv <> var_not_used_in_aexp ind
R51042:51043 Equiv <> a1 var
prf 51134:51148 <> aeval_weakening
R51226:51228 Coq.Init.Logic <> :type_scope:x_'='_x not
R51202:51206 Imp <> aeval def
R51225:51225 Equiv <> a var
R51209:51214 Imp <> update def
R51221:51222 Equiv <> ni var
R51219:51219 Equiv <> i var
R51216:51217 Equiv <> st var
R51229:51233 Imp <> aeval def
R51238:51238 Equiv <> a var
R51235:51236 Equiv <> st var
R51172:51191 Equiv <> var_not_used_in_aexp ind
R51195:51195 Equiv <> a var
R51193:51193 Equiv <> i var
prf 51548:51563 <> inequiv_exercise
R51569:51570 Coq.Init.Logic <> :type_scope:'~'_x not
R51571:51576 Equiv <> cequiv def
R51604:51607 Imp <> ::'SKIP' not
R51579:51584 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R51590:51593 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R51598:51601 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R51585:51589 Imp <> BTrue constr
R51594:51597 Imp <> ::'SKIP' not
mod 53637:53640 <> Himp
ind 53745:53747 Himp com
constr 53763:53767 Himp CSkip
constr 53779:53782 Himp CAss
constr 53808:53811 Himp CSeq
constr 53837:53839 Himp CIf
constr 53873:53878 Himp CWhile
constr 53905:53910 Himp CHavoc
R53771:53773 Equiv <> com ind
R53800:53802 Equiv <> com ind
R53792:53795 Imp <> aexp ind
R53786:53787 SfLib <> id ind
R53829:53831 Equiv <> com ind
R53822:53824 Equiv <> com ind
R53815:53817 Equiv <> com ind
R53865:53867 Equiv <> com ind
R53858:53860 Equiv <> com ind
R53851:53853 Equiv <> com ind
R53843:53846 Imp <> bexp ind
R53897:53899 Equiv <> com ind
R53890:53892 Equiv <> com ind
R53882:53885 Imp <> bexp ind
R53920:53922 Equiv <> com ind
R53914:53915 SfLib <> id ind
R54169:54173 Equiv Himp CSkip constr
not 54155 Himp ::'SKIP'
R54203:54206 Equiv Himp CAss constr
not 54185 Himp ::x_'::='_x
R54254:54257 Equiv Himp CSeq constr
not 54237 Himp ::x_';;'_x
R54342:54347 Equiv Himp CWhile constr
not 54311 Himp ::'WHILE'_x_'DO'_x_'END'
R54441:54443 Equiv Himp CIf constr
not 54399 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R54516:54521 Equiv Himp CHavoc constr
not 54500 Himp ::'HAVOC'_x
ind 54932:54936 Himp ceval
constr 54977:54982 Himp E_Skip
constr 55025:55029 Himp E_Ass
constr 55153:55157 Himp E_Seq
constr 55283:55290 Himp E_IfTrue
constr 55459:55467 Himp E_IfFalse
constr 55639:55648 Himp E_WhileEnd
constr 55772:55782 Himp E_WhileLoop
R54956:54960 Imp <> state def
R54947:54951 Imp <> state def
R54940:54942 Equiv Himp com ind
R56076:56080 Equiv <> ceval ind
R54998:55002 Imp <> state def
R55009:55011 Equiv Himp ::x_'/'_x_'||'_x not
R55014:55017 Equiv Himp ::x_'/'_x_'||'_x not
R55005:55008 Equiv Himp ::'SKIP' not
R55012:55013 Equiv <> st var
R55018:55019 Equiv <> st var
R55046:55050 Imp <> state def
R55059:55062 Imp <> aexp ind
R55070:55072 Coq.Init.Datatypes <> nat ind
R55080:55081 SfLib <> id ind
R55116:55116 Equiv Himp ::x_'/'_x_'||'_x not
R55125:55128 Equiv Himp ::x_'/'_x_'||'_x not
R55131:55134 Equiv Himp ::x_'/'_x_'||'_x not
R55118:55122 Equiv Himp ::x_'::='_x not
R55117:55117 Equiv <> X var
R55123:55124 Equiv <> a1 var
R55129:55130 Equiv <> st var
R55135:55140 Imp <> update def
R55147:55147 Equiv <> n var
R55145:55145 Equiv <> X var
R55142:55143 Equiv <> st var
R55108:55110 Coq.Init.Logic <> :type_scope:x_'='_x not
R55097:55101 Imp <> aeval def
R55106:55107 Equiv <> a1 var
R55103:55104 Equiv <> st var
R55111:55111 Equiv <> n var
R55177:55179 Equiv Himp com ind
R55197:55201 Imp <> state def
R55255:55255 Equiv Himp ::x_'/'_x_'||'_x not
R55264:55267 Equiv Himp ::x_'/'_x_'||'_x not
R55270:55273 Equiv Himp ::x_'/'_x_'||'_x not
R55258:55261 Equiv Himp ::x_';;'_x not
R55256:55257 Equiv <> c1 var
R55262:55263 Equiv <> c2 var
R55268:55269 Equiv <> st var
R55274:55277 Equiv <> st'' var
R55237:55239 Equiv Himp ::x_'/'_x_'||'_x not
R55243:55246 Equiv Himp ::x_'/'_x_'||'_x not
R55235:55236 Equiv <> c2 var
R55240:55242 Equiv <> st' var
R55247:55250 Equiv <> st'' var
R55219:55221 Equiv Himp ::x_'/'_x_'||'_x not
R55224:55227 Equiv Himp ::x_'/'_x_'||'_x not
R55217:55218 Equiv <> c1 var
R55222:55223 Equiv <> st var
R55228:55230 Equiv <> st' var
R55311:55315 Imp <> state def
R55324:55327 Imp <> bexp ind
R55339:55341 Equiv Himp com ind
R55415:55415 Equiv Himp ::x_'/'_x_'||'_x not
R55441:55444 Equiv Himp ::x_'/'_x_'||'_x not
R55447:55450 Equiv Himp ::x_'/'_x_'||'_x not
R55416:55419 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55422:55427 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55430:55435 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55438:55440 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55420:55421 Equiv <> b1 var
R55428:55429 Equiv <> c1 var
R55436:55437 Equiv <> c2 var
R55445:55446 Equiv <> st var
R55451:55453 Equiv <> st' var
R55399:55401 Equiv Himp ::x_'/'_x_'||'_x not
R55404:55407 Equiv Himp ::x_'/'_x_'||'_x not
R55397:55398 Equiv <> c1 var
R55402:55403 Equiv <> st var
R55408:55410 Equiv <> st' var
R55371:55373 Coq.Init.Logic <> :type_scope:x_'='_x not
R55360:55364 Imp <> beval def
R55369:55370 Equiv <> b1 var
R55366:55367 Equiv <> st var
R55374:55377 Coq.Init.Datatypes <> true constr
R55488:55492 Imp <> state def
R55501:55504 Imp <> bexp ind
R55516:55518 Equiv Himp com ind
R55595:55595 Equiv Himp ::x_'/'_x_'||'_x not
R55621:55624 Equiv Himp ::x_'/'_x_'||'_x not
R55627:55630 Equiv Himp ::x_'/'_x_'||'_x not
R55596:55599 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55602:55607 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55610:55615 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55618:55620 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R55600:55601 Equiv <> b1 var
R55608:55609 Equiv <> c1 var
R55616:55617 Equiv <> c2 var
R55625:55626 Equiv <> st var
R55631:55633 Equiv <> st' var
R55579:55581 Equiv Himp ::x_'/'_x_'||'_x not
R55584:55587 Equiv Himp ::x_'/'_x_'||'_x not
R55577:55578 Equiv <> c2 var
R55582:55583 Equiv <> st var
R55588:55590 Equiv <> st' var
R55549:55551 Coq.Init.Logic <> :type_scope:x_'='_x not
R55538:55542 Imp <> beval def
R55547:55548 Equiv <> b1 var
R55544:55545 Equiv <> st var
R55552:55556 Coq.Init.Datatypes <> false constr
R55665:55668 Imp <> bexp ind
R55677:55681 Imp <> state def
R55690:55692 Equiv Himp com ind
R55736:55736 Equiv Himp ::x_'/'_x_'||'_x not
R55755:55758 Equiv Himp ::x_'/'_x_'||'_x not
R55761:55764 Equiv Himp ::x_'/'_x_'||'_x not
R55737:55742 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55745:55748 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55751:55754 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55743:55744 Equiv <> b1 var
R55749:55750 Equiv <> c1 var
R55759:55760 Equiv <> st var
R55765:55766 Equiv <> st var
R55724:55726 Coq.Init.Logic <> :type_scope:x_'='_x not
R55713:55717 Imp <> beval def
R55722:55723 Equiv <> b1 var
R55719:55720 Equiv <> st var
R55727:55731 Coq.Init.Datatypes <> false constr
R55808:55812 Imp <> state def
R55821:55824 Imp <> bexp ind
R55833:55835 Equiv Himp com ind
R55989:55989 Equiv Himp ::x_'/'_x_'||'_x not
R56008:56011 Equiv Himp ::x_'/'_x_'||'_x not
R56014:56017 Equiv Himp ::x_'/'_x_'||'_x not
R55990:55995 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55998:56001 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56004:56007 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55996:55997 Equiv <> b1 var
R56002:56003 Equiv <> c1 var
R56012:56013 Equiv <> st var
R56018:56021 Equiv <> st'' var
R55933:55933 Equiv Himp ::x_'/'_x_'||'_x not
R55952:55955 Equiv Himp ::x_'/'_x_'||'_x not
R55959:55962 Equiv Himp ::x_'/'_x_'||'_x not
R55934:55939 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55942:55945 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55948:55951 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55940:55941 Equiv <> b1 var
R55946:55947 Equiv <> c1 var
R55956:55958 Equiv <> st' var
R55963:55966 Equiv <> st'' var
R55899:55901 Equiv Himp ::x_'/'_x_'||'_x not
R55904:55907 Equiv Himp ::x_'/'_x_'||'_x not
R55897:55898 Equiv <> c1 var
R55902:55903 Equiv <> st var
R55908:55910 Equiv <> st' var
R55868:55870 Coq.Init.Logic <> :type_scope:x_'='_x not
R55857:55861 Imp <> beval def
R55866:55867 Equiv <> b1 var
R55863:55864 Equiv <> st var
R55871:55874 Coq.Init.Datatypes <> true constr
R56076:56080 Equiv Himp ceval ind
not 56051 Himp ::x_'/'_x_'||'_x
def 56454:56467 Himp havoc_example1
R56471:56471 Equiv Himp ::x_'/'_x_'||'_x not
R56479:56482 Equiv Himp ::x_'/'_x_'||'_x not
R56494:56497 Equiv Himp ::x_'/'_x_'||'_x not
R56472:56477 Equiv Himp ::'HAVOC'_x not
R56478:56478 Imp <> X def
R56483:56493 Imp <> empty_state def
R56498:56503 Imp <> update def
R56517:56517 Imp <> X def
R56505:56515 Imp <> empty_state def
def 56567:56580 Himp havoc_example2
R56586:56586 Equiv Himp ::x_'/'_x_'||'_x not
R56601:56604 Equiv Himp ::x_'/'_x_'||'_x not
R56616:56619 Equiv Himp ::x_'/'_x_'||'_x not
R56591:56593 Equiv Himp ::x_';;'_x not
R56587:56590 Equiv Himp ::'SKIP' not
R56594:56599 Equiv Himp ::'HAVOC'_x not
R56600:56600 Imp <> Z def
R56605:56615 Imp <> empty_state def
R56620:56625 Imp <> update def
R56639:56639 Imp <> Z def
R56627:56637 Imp <> empty_state def
def 56780:56785 Himp cequiv
R56796:56798 Equiv Himp com ind
R56827:56831 Imp <> state def
R56850:56854 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R56838:56840 Equiv Himp ::x_'/'_x_'||'_x not
R56843:56846 Equiv Himp ::x_'/'_x_'||'_x not
R56836:56837 Equiv <> c1 var
R56841:56842 Equiv <> st var
R56847:56849 Equiv <> st' var
R56857:56859 Equiv Himp ::x_'/'_x_'||'_x not
R56862:56865 Equiv Himp ::x_'/'_x_'||'_x not
R56855:56856 Equiv <> c2 var
R56860:56861 Equiv <> st var
R56866:56868 Equiv <> st' var
def 57169:57171 Himp pXY
R57185:57187 Equiv Himp ::x_';;'_x not
R57178:57183 Equiv Himp ::'HAVOC'_x not
R57184:57184 Imp <> X def
R57188:57193 Equiv Himp ::'HAVOC'_x not
R57194:57194 Imp <> Y def
def 57209:57211 Himp pYX
R57225:57227 Equiv Himp ::x_';;'_x not
R57218:57223 Equiv Himp ::'HAVOC'_x not
R57224:57224 Imp <> Y def
R57228:57233 Equiv Himp ::'HAVOC'_x not
R57234:57234 Imp <> X def
prf 57342:57355 Himp pXY_cequiv_pYX
R57375:57378 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R57361:57366 Equiv Himp cequiv def
R57372:57374 Equiv Himp pYX def
R57368:57370 Equiv Himp pXY def
R57379:57379 Coq.Init.Logic <> :type_scope:'~'_x not
R57380:57385 Equiv Himp cequiv def
R57391:57393 Equiv Himp pYX def
R57387:57389 Equiv Himp pXY def
def 57559:57564 Himp ptwice
R57578:57580 Equiv Himp ::x_';;'_x not
R57571:57576 Equiv Himp ::'HAVOC'_x not
R57577:57577 Imp <> X def
R57581:57586 Equiv Himp ::'HAVOC'_x not
R57587:57587 Imp <> Y def
def 57602:57606 Himp pcopy
R57620:57622 Equiv Himp ::x_';;'_x not
R57613:57618 Equiv Himp ::'HAVOC'_x not
R57619:57619 Imp <> X def
R57624:57628 Equiv Himp ::x_'::='_x not
R57623:57623 Imp <> Y def
R57629:57631 Imp <> AId constr
R57633:57633 Imp <> X def
prf 57804:57822 Himp ptwice_cequiv_pcopy
R57847:57850 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R57828:57833 Equiv Himp cequiv def
R57842:57846 Equiv Himp pcopy def
R57835:57840 Equiv Himp ptwice def
R57851:57851 Coq.Init.Logic <> :type_scope:'~'_x not
R57852:57857 Equiv Himp cequiv def
R57866:57870 Equiv Himp pcopy def
R57859:57864 Equiv Himp ptwice def
def 58714:58715 Himp p1
R58719:58721 Equiv Himp com ind
R58728:58734 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58762:58770 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58813:58818 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58735:58738 Imp <> BNot constr
R58741:58743 Imp <> BEq constr
R58754:58757 Imp <> ANum constr
R58746:58748 Imp <> AId constr
R58750:58750 Imp <> X def
R58778:58784 Equiv Himp ::x_';;'_x not
R58771:58776 Equiv Himp ::'HAVOC'_x not
R58777:58777 Imp <> Y def
R58786:58790 Equiv Himp ::x_'::='_x not
R58785:58785 Imp <> X def
R58791:58795 Imp <> APlus constr
R58806:58809 Imp <> ANum constr
R58798:58800 Imp <> AId constr
R58802:58802 Imp <> X def
def 58833:58834 Himp p2
R58838:58840 Equiv Himp com ind
R58847:58853 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58881:58889 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58894:58899 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58854:58857 Imp <> BNot constr
R58860:58862 Imp <> BEq constr
R58873:58876 Imp <> ANum constr
R58865:58867 Imp <> AId constr
R58869:58869 Imp <> X def
R58890:58893 Equiv Himp ::'SKIP' not
prf 59157:59170 Himp p1_may_diverge
R59204:59205 Coq.Init.Logic <> :type_scope:'~'_x not
R59208:59210 Equiv Himp ::x_'/'_x_'||'_x not
R59213:59216 Equiv Himp ::x_'/'_x_'||'_x not
R59206:59207 Equiv Himp p1 def
R59211:59212 Equiv <> st var
R59217:59219 Equiv <> st' var
R59193:59196 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R59189:59190 Equiv <> st var
R59192:59192 Imp <> X def
prf 59265:59278 Himp p2_may_diverge
R59312:59313 Coq.Init.Logic <> :type_scope:'~'_x not
R59316:59318 Equiv Himp ::x_'/'_x_'||'_x not
R59321:59324 Equiv Himp ::x_'/'_x_'||'_x not
R59314:59315 Equiv Himp p2 def
R59319:59320 Equiv <> st var
R59325:59327 Equiv <> st' var
R59301:59304 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R59297:59298 Equiv <> st var
R59300:59300 Imp <> X def
prf 59464:59474 Himp p1_p2_equiv
R59478:59483 Equiv Himp cequiv def
R59488:59489 Equiv Himp p2 def
R59485:59486 Equiv Himp p1 def
def 59671:59672 Himp p3
R59676:59678 Equiv Himp com ind
R59697:59701 Equiv Himp ::x_';;'_x not
R59686:59690 Equiv Himp ::x_'::='_x not
R59685:59685 Imp <> Z def
R59691:59694 Imp <> ANum constr
R59702:59708 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59736:59744 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59766:59771 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59709:59712 Imp <> BNot constr
R59715:59717 Imp <> BEq constr
R59728:59731 Imp <> ANum constr
R59720:59722 Imp <> AId constr
R59724:59724 Imp <> X def
R59752:59758 Equiv Himp ::x_';;'_x not
R59745:59750 Equiv Himp ::'HAVOC'_x not
R59751:59751 Imp <> X def
R59759:59764 Equiv Himp ::'HAVOC'_x not
R59765:59765 Imp <> Z def
def 59786:59787 Himp p4
R59791:59793 Equiv Himp com ind
R59814:59818 Equiv Himp ::x_';;'_x not
R59801:59806 Equiv Himp ::x_'::='_x not
R59813:59813 Equiv Himp ::x_'::='_x not
R59800:59800 Imp <> X def
R59807:59810 Imp <> ANum constr
R59820:59825 Equiv Himp ::x_'::='_x not
R59832:59832 Equiv Himp ::x_'::='_x not
R59819:59819 Imp <> Z def
R59826:59829 Imp <> ANum constr
prf 59845:59857 Himp p3_p4_inequiv
R59861:59862 Coq.Init.Logic <> :type_scope:'~'_x not
R59863:59868 Equiv Himp cequiv def
R59873:59874 Equiv Himp p4 def
R59870:59871 Equiv Himp p3 def
def 60001:60002 Himp p5
R60006:60008 Equiv Himp com ind
R60015:60021 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R60049:60057 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R60065:60070 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R60022:60025 Imp <> BNot constr
R60028:60030 Imp <> BEq constr
R60041:60044 Imp <> ANum constr
R60033:60035 Imp <> AId constr
R60037:60037 Imp <> X def
R60058:60063 Equiv Himp ::'HAVOC'_x not
R60064:60064 Imp <> X def
def 60085:60086 Himp p6
R60090:60092 Equiv Himp com ind
R60100:60104 Equiv Himp ::x_'::='_x not
R60099:60099 Imp <> X def
R60105:60108 Imp <> ANum constr
prf 60123:60133 Himp p5_p6_equiv
R60137:60142 Equiv Himp cequiv def
R60147:60148 Equiv Himp p6 def
R60144:60145 Equiv Himp p5 def
R60202:60205 Equiv Himp <> mod
def 61059:61065 <> stequiv
R61078:61082 Imp <> state def
R61107:61108 SfLib <> id ind
R61117:61119 Coq.Init.Logic <> :type_scope:x_'='_x not
R61112:61114 Equiv <> st1 var
R61116:61116 Equiv <> X var
R61120:61122 Equiv <> st2 var
R61124:61124 Equiv <> X var
R61156:61162 Equiv <> stequiv def
not 61138 <> ::x_'~'_x
prf 61436:61447 <> stequiv_refl
R61464:61468 Imp <> state def
R61477:61479 Equiv <> ::x_'~'_x not
R61475:61476 Equiv <> st var
R61480:61481 Equiv <> st var
prf 61593:61603 <> stequiv_sym
R61625:61629 Imp <> state def
R61655:61657 Equiv <> ::x_'~'_x not
R61652:61654 Equiv <> st2 var
R61658:61660 Equiv <> st1 var
R61639:61641 Equiv <> ::x_'~'_x not
R61636:61638 Equiv <> st1 var
R61642:61644 Equiv <> st2 var
prf 61778:61790 <> stequiv_trans
R61816:61820 Imp <> state def
R61862:61864 Equiv <> ::x_'~'_x not
R61859:61861 Equiv <> st1 var
R61865:61867 Equiv <> st3 var
R61846:61848 Equiv <> ::x_'~'_x not
R61843:61845 Equiv <> st2 var
R61849:61851 Equiv <> st3 var
R61830:61832 Equiv <> ::x_'~'_x not
R61827:61829 Equiv <> st1 var
R61833:61835 Equiv <> st2 var
prf 62014:62027 <> stequiv_update
R62049:62053 Imp <> state def
R62085:62086 SfLib <> id ind
R62092:62094 Coq.Init.Datatypes <> nat ind
R62114:62116 Equiv <> ::x_'~'_x not
R62100:62105 Imp <> update def
R62113:62113 Equiv <> n var
R62111:62111 Equiv <> X var
R62107:62109 Equiv <> st1 var
R62117:62122 Imp <> update def
R62130:62130 Equiv <> n var
R62128:62128 Equiv <> X var
R62124:62126 Equiv <> st2 var
R62062:62064 Equiv <> ::x_'~'_x not
R62059:62061 Equiv <> st1 var
R62065:62067 Equiv <> st2 var
prf 62375:62387 <> stequiv_aeval
R62409:62413 Imp <> state def
R62445:62448 Imp <> aexp ind
R62463:62465 Coq.Init.Logic <> :type_scope:x_'='_x not
R62452:62456 Imp <> aeval def
R62462:62462 Equiv <> a var
R62458:62460 Equiv <> st1 var
R62466:62470 Imp <> aeval def
R62476:62476 Equiv <> a var
R62472:62474 Equiv <> st2 var
R62423:62425 Equiv <> ::x_'~'_x not
R62420:62422 Equiv <> st1 var
R62426:62428 Equiv <> st2 var
prf 62592:62604 <> stequiv_beval
R62626:62630 Imp <> state def
R62662:62665 Imp <> bexp ind
R62680:62682 Coq.Init.Logic <> :type_scope:x_'='_x not
R62669:62673 Imp <> beval def
R62679:62679 Equiv <> b var
R62675:62677 Equiv <> st1 var
R62683:62687 Imp <> beval def
R62693:62693 Equiv <> b var
R62689:62691 Equiv <> st2 var
R62640:62642 Equiv <> ::x_'~'_x not
R62637:62639 Equiv <> st1 var
R62643:62645 Equiv <> st2 var
prf 62923:62935 <> stequiv_ceval
R62956:62960 Imp <> state def
R62992:62994 Imp <> com ind
R63004:63008 Imp <> state def
R63041:63047 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R63060:63066 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R63100:63100 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R63055:63059 Imp <> state def
R63067:63067 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R63083:63088 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R63069:63071 Imp <> ::x_'/'_x_'||'_x not
R63075:63078 Imp <> ::x_'/'_x_'||'_x not
R63068:63068 Equiv <> c var
R63072:63074 Equiv <> st2 var
R63079:63082 Equiv <> st2' var
R63093:63095 Equiv <> ::x_'~'_x not
R63089:63092 Equiv <> st1' var
R63096:63099 Equiv <> st2' var
R63018:63020 Imp <> ::x_'/'_x_'||'_x not
R63024:63027 Imp <> ::x_'/'_x_'||'_x not
R63017:63017 Equiv <> c var
R63021:63023 Equiv <> st1 var
R63028:63031 Equiv <> st1' var
R62969:62971 Equiv <> ::x_'~'_x not
R62966:62968 Equiv <> st1 var
R62972:62974 Equiv <> st2 var
R63314:63319 Imp <> update def
R63314:63319 Imp <> update def
R63391:63403 Equiv <> stequiv_aeval prfax
R63391:63403 Equiv <> stequiv_aeval prfax
R63432:63445 Equiv <> stequiv_update prfax
R63432:63445 Equiv <> stequiv_update prfax
R63623:63627 Imp <> E_Seq constr
R63623:63627 Imp <> E_Seq constr
R63778:63785 Imp <> E_IfTrue constr
R63778:63785 Imp <> E_IfTrue constr
R63819:63831 Equiv <> stequiv_beval prfax
R63819:63831 Equiv <> stequiv_beval prfax
R63982:63990 Imp <> E_IfFalse constr
R63982:63990 Imp <> E_IfFalse constr
R64023:64035 Equiv <> stequiv_beval prfax
R64023:64035 Equiv <> stequiv_beval prfax
R64135:64144 Imp <> E_WhileEnd constr
R64135:64144 Imp <> E_WhileEnd constr
R64177:64189 Equiv <> stequiv_beval prfax
R64177:64189 Equiv <> stequiv_beval prfax
R64393:64403 Imp <> E_WhileLoop constr
R64393:64403 Imp <> E_WhileLoop constr
R64454:64466 Equiv <> stequiv_beval prfax
R64454:64466 Equiv <> stequiv_beval prfax
ind 64936:64941 <> ceval'
constr 64982:64988 <> E_equiv
R64961:64965 Imp <> state def
R64952:64956 Imp <> state def
R64945:64947 Imp <> com ind
R65110:65115 Equiv <> ceval' ind
R65059:65061 Equiv <> ::x_'/'_x_'||'''_x not
R65064:65068 Equiv <> ::x_'/'_x_'||'''_x not
R65058:65058 Equiv <> c var
R65062:65063 Equiv <> st var
R65069:65072 Equiv <> st'' var
R65043:65045 Equiv <> ::x_'~'_x not
R65040:65042 Equiv <> st' var
R65046:65049 Equiv <> st'' var
R65019:65021 Imp <> ::x_'/'_x_'||'_x not
R65024:65027 Imp <> ::x_'/'_x_'||'_x not
R65018:65018 Equiv <> c var
R65022:65023 Equiv <> st var
R65028:65030 Equiv <> st' var
R65110:65115 Equiv <> ceval' ind
not 65084 <> ::x_'/'_x_'||'''_x
def 65205:65211 <> cequiv'
R65222:65224 Imp <> com ind
R65256:65260 Imp <> state def
R65268:65268 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R65284:65290 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R65306:65306 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R65271:65273 Equiv <> ::x_'/'_x_'||'''_x not
R65276:65280 Equiv <> ::x_'/'_x_'||'''_x not
R65269:65270 Equiv <> c1 var
R65274:65275 Equiv <> st var
R65281:65283 Equiv <> st' var
R65293:65295 Equiv <> ::x_'/'_x_'||'''_x not
R65298:65302 Equiv <> ::x_'/'_x_'||'''_x not
R65291:65292 Equiv <> c2 var
R65296:65297 Equiv <> st var
R65303:65305 Equiv <> st' var
prf 65478:65492 <> cequiv__cequiv'
R65511:65513 Imp <> com ind
R65535:65541 Equiv <> cequiv' def
R65546:65547 Equiv <> c2 var
R65543:65544 Equiv <> c1 var
R65519:65524 Equiv <> cequiv def
R65529:65530 Equiv <> c2 var
R65526:65527 Equiv <> c1 var
R65567:65572 Equiv <> cequiv def
R65575:65581 Equiv <> cequiv' def
R65633:65639 Equiv <> E_equiv constr
R65633:65639 Equiv <> E_equiv constr
R65735:65741 Equiv <> E_equiv constr
R65735:65741 Equiv <> E_equiv constr
def 65965:65984 <> identity_assignment'
R65990:65996 Equiv <> cequiv' def
R66005:66009 Imp <> ::x_'::='_x not
R66004:66004 Imp <> X def
R66010:66012 Imp <> AId constr
R66014:66014 Imp <> X def
R65998:66001 Imp <> ::'SKIP' not
R66036:66042 Equiv <> cequiv' def
R66171:66176 Imp <> update def
R66191:66191 Imp <> X def
R66183:66183 Imp <> X def
R66157:66163 Equiv <> E_equiv constr
R66171:66176 Imp <> update def
R66191:66191 Imp <> X def
R66183:66183 Imp <> X def
R66157:66163 Equiv <> E_equiv constr
R66236:66248 Equiv <> stequiv_trans prfax
R66236:66248 Equiv <> stequiv_trans prfax
R66276:66282 Equiv <> stequiv def
R66299:66309 Imp <> update_same thm
R66299:66309 Imp <> update_same thm
prf 67686:67716 <> swap_noninterfering_assignments
R67820:67825 Equiv <> cequiv def
R67869:67871 Imp <> ::x_';;'_x not
R67862:67866 Imp <> ::x_'::='_x not
R67860:67861 Equiv <> l2 var
R67867:67868 Equiv <> a2 var
R67874:67878 Imp <> ::x_'::='_x not
R67872:67873 Equiv <> l1 var
R67879:67880 Equiv <> a1 var
R67841:67843 Imp <> ::x_';;'_x not
R67834:67838 Imp <> ::x_'::='_x not
R67832:67833 Equiv <> l1 var
R67839:67840 Equiv <> a1 var
R67846:67850 Imp <> ::x_'::='_x not
R67844:67845 Equiv <> l2 var
R67851:67852 Equiv <> a2 var
R67788:67807 Equiv <> var_not_used_in_aexp ind
R67812:67813 Equiv <> a1 var
R67809:67810 Equiv <> l2 var
R67756:67775 Equiv <> var_not_used_in_aexp ind
R67780:67781 Equiv <> a2 var
R67777:67778 Equiv <> l1 var
R67743:67746 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R67741:67742 Equiv <> l1 var
R67747:67748 Equiv <> l2 var
