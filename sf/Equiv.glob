DIGEST 3c3a144f52b9d3efef325a88b0ca423a
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
def 3825:3830 <> prog_a
R3834:3836 Imp <> com ind
R3843:3848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3876:3883 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3912:3917 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3849:3852 Imp <> BNot constr
R3855:3857 Imp <> BLe constr
R3868:3871 Imp <> ANum constr
R3860:3862 Imp <> AId constr
R3864:3864 Imp <> X def
R3885:3889 Imp <> ::x_'::='_x not
R3884:3884 Imp <> X def
R3890:3894 Imp <> APlus constr
R3905:3908 Imp <> ANum constr
R3897:3899 Imp <> AId constr
R3901:3901 Imp <> X def
def 3932:3937 <> prog_b
R3941:3943 Imp <> com ind
R4060:4064 Imp <> ::x_';;'_x not
R3950:3953 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3974:3983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4031:4042 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4055:4059 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3954:3956 Imp <> BEq constr
R3967:3970 Imp <> ANum constr
R3959:3961 Imp <> AId constr
R3963:3963 Imp <> X def
R4012:4018 Imp <> ::x_';;'_x not
R3985:3989 Imp <> ::x_'::='_x not
R3984:3984 Imp <> X def
R3990:3994 Imp <> APlus constr
R4005:4008 Imp <> ANum constr
R3997:3999 Imp <> AId constr
R4001:4001 Imp <> X def
R4020:4024 Imp <> ::x_'::='_x not
R4019:4019 Imp <> Y def
R4025:4028 Imp <> ANum constr
R4044:4048 Imp <> ::x_'::='_x not
R4043:4043 Imp <> Y def
R4049:4052 Imp <> ANum constr
R4093:4097 Imp <> ::x_';;'_x not
R4066:4070 Imp <> ::x_'::='_x not
R4065:4065 Imp <> X def
R4071:4076 Imp <> AMinus constr
R4087:4089 Imp <> AId constr
R4091:4091 Imp <> Y def
R4079:4081 Imp <> AId constr
R4083:4083 Imp <> X def
R4099:4103 Imp <> ::x_'::='_x not
R4098:4098 Imp <> Y def
R4104:4107 Imp <> ANum constr
def 4124:4129 <> prog_c
R4133:4135 Imp <> com ind
R4142:4145 Imp <> ::'SKIP' not
def 4160:4165 <> prog_d
R4169:4171 Imp <> com ind
R4178:4183 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4211:4218 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4263:4268 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4187 Imp <> BNot constr
R4190:4192 Imp <> BEq constr
R4203:4206 Imp <> ANum constr
R4195:4197 Imp <> AId constr
R4199:4199 Imp <> X def
R4220:4224 Imp <> ::x_'::='_x not
R4219:4219 Imp <> X def
R4225:4229 Imp <> APlus constr
R4256:4259 Imp <> ANum constr
R4232:4236 Imp <> AMult constr
R4247:4249 Imp <> AId constr
R4251:4251 Imp <> Y def
R4239:4241 Imp <> AId constr
R4243:4243 Imp <> X def
def 4283:4288 <> prog_e
R4292:4294 Imp <> com ind
R4302:4306 Imp <> ::x_'::='_x not
R4301:4301 Imp <> Y def
R4307:4310 Imp <> ANum constr
def 4327:4332 <> prog_f
R4336:4338 Imp <> com ind
R4373:4377 Imp <> ::x_';;'_x not
R4346:4350 Imp <> ::x_'::='_x not
R4345:4345 Imp <> Y def
R4351:4355 Imp <> APlus constr
R4366:4369 Imp <> ANum constr
R4358:4360 Imp <> AId constr
R4362:4362 Imp <> X def
R4378:4383 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4410:4417 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4446:4451 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4384:4387 Imp <> BNot constr
R4390:4392 Imp <> BEq constr
R4403:4405 Imp <> AId constr
R4407:4407 Imp <> Y def
R4395:4397 Imp <> AId constr
R4399:4399 Imp <> X def
R4419:4423 Imp <> ::x_'::='_x not
R4418:4418 Imp <> Y def
R4424:4428 Imp <> APlus constr
R4439:4442 Imp <> ANum constr
R4431:4433 Imp <> AId constr
R4435:4435 Imp <> X def
def 4466:4471 <> prog_g
R4475:4477 Imp <> com ind
R4484:4489 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4495:4502 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4507:4512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4490:4494 Imp <> BTrue constr
R4503:4506 Imp <> ::'SKIP' not
def 4527:4532 <> prog_h
R4536:4538 Imp <> com ind
R4545:4550 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4577:4584 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4613:4618 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4551:4554 Imp <> BNot constr
R4557:4559 Imp <> BEq constr
R4570:4572 Imp <> AId constr
R4574:4574 Imp <> X def
R4562:4564 Imp <> AId constr
R4566:4566 Imp <> X def
R4586:4590 Imp <> ::x_'::='_x not
R4585:4585 Imp <> X def
R4591:4595 Imp <> APlus constr
R4606:4609 Imp <> ANum constr
R4598:4600 Imp <> AId constr
R4602:4602 Imp <> X def
def 4633:4638 <> prog_i
R4642:4644 Imp <> com ind
R4651:4656 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4683:4690 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4719:4724 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4657:4660 Imp <> BNot constr
R4663:4665 Imp <> BEq constr
R4676:4678 Imp <> AId constr
R4680:4680 Imp <> Y def
R4668:4670 Imp <> AId constr
R4672:4672 Imp <> X def
R4692:4696 Imp <> ::x_'::='_x not
R4691:4691 Imp <> X def
R4697:4701 Imp <> APlus constr
R4712:4715 Imp <> ANum constr
R4704:4706 Imp <> AId constr
R4708:4708 Imp <> Y def
def 4739:4751 <> equiv_classes
R4755:4758 Coq.Init.Datatypes <> list ind
R4761:4764 Coq.Init.Datatypes <> list ind
R4766:4768 Imp <> com ind
R4793:4797 SfLib <> admit prfax
prf 5052:5065 <> aequiv_example
R5070:5075 Equiv <> aequiv def
R5103:5106 Imp <> ANum constr
R5078:5083 Imp <> AMinus constr
R5094:5096 Imp <> AId constr
R5098:5098 Imp <> X def
R5086:5088 Imp <> AId constr
R5090:5090 Imp <> X def
prf 5161:5174 <> bequiv_example
R5179:5184 Equiv <> bequiv def
R5226:5230 Imp <> BTrue constr
R5187:5189 Imp <> BEq constr
R5217:5220 Imp <> ANum constr
R5192:5197 Imp <> AMinus constr
R5208:5210 Imp <> AId constr
R5212:5212 Imp <> X def
R5200:5202 Imp <> AId constr
R5204:5204 Imp <> X def
R5262:5266 Imp <> beval def
R5279:5292 Equiv <> aequiv_example thm
R5279:5292 Equiv <> aequiv_example thm
prf 5452:5460 <> skip_left
R5475:5480 Equiv <> cequiv def
R5505:5505 Equiv <> c var
R5493:5495 Imp <> ::x_';;'_x not
R5489:5492 Imp <> ::'SKIP' not
R5496:5496 Equiv <> c var
R5683:5687 Imp <> E_Seq constr
R5683:5687 Imp <> E_Seq constr
R5708:5713 Imp <> E_Skip constr
R5708:5713 Imp <> E_Skip constr
prf 5879:5888 <> skip_right
R5903:5908 Equiv <> cequiv def
R5931:5931 Equiv <> c var
R5917:5919 Imp <> ::x_';;'_x not
R5916:5916 Equiv <> c var
R5920:5923 Imp <> ::'SKIP' not
R6045:6049 Imp <> E_Seq constr
R6045:6049 Imp <> E_Seq constr
R6076:6081 Imp <> E_Skip constr
R6076:6081 Imp <> E_Skip constr
prf 6199:6213 <> IFB_true_simple
R6232:6237 Equiv <> cequiv def
R6280:6281 Equiv <> c1 var
R6245:6248 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6254:6259 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6262:6267 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6270:6272 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6249:6253 Imp <> BTrue constr
R6260:6261 Equiv <> c1 var
R6268:6269 Equiv <> c2 var
R6414:6421 Imp <> E_IfTrue constr
R6414:6421 Imp <> E_IfTrue constr
prf 8344:8351 <> IFB_true
R8399:8404 Equiv <> cequiv def
R8449:8450 Equiv <> c1 var
R8415:8418 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8420:8425 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8428:8433 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8436:8438 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8419:8419 Equiv <> b var
R8426:8427 Equiv <> c1 var
R8434:8435 Equiv <> c2 var
R8375:8380 Equiv <> bequiv def
R8384:8388 Imp <> BTrue constr
R8382:8382 Equiv <> b var
R8651:8656 Equiv <> bequiv def
R8745:8752 Imp <> E_IfTrue constr
R8745:8752 Imp <> E_IfTrue constr
R8782:8787 Equiv <> bequiv def
prf 8896:8904 <> IFB_false
R8947:8952 Equiv <> cequiv def
R8991:8992 Equiv <> c2 var
R8960:8963 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8965:8970 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8973:8978 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8981:8983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8964:8964 Equiv <> b var
R8971:8972 Equiv <> c1 var
R8979:8980 Equiv <> c2 var
R8925:8930 Equiv <> bequiv def
R8934:8939 Imp <> BFalse constr
R8932:8932 Equiv <> b var
R9061:9066 Equiv <> bequiv def
R9145:9153 Imp <> E_IfFalse constr
R9145:9153 Imp <> E_IfFalse constr
R9163:9168 Equiv <> bequiv def
prf 9385:9400 <> swap_if_branches
R9421:9426 Equiv <> cequiv def
R9464:9467 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9474:9479 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9482:9487 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9490:9492 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9468:9471 Imp <> BNot constr
R9473:9473 Equiv <> b var
R9480:9481 Equiv <> e2 var
R9488:9489 Equiv <> e1 var
R9433:9436 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9438:9443 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9446:9451 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9454:9456 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9437:9437 Equiv <> b var
R9444:9445 Equiv <> e1 var
R9452:9453 Equiv <> e2 var
R9558:9566 Imp <> E_IfFalse constr
R9558:9566 Imp <> E_IfFalse constr
prf 9928:9938 <> WHILE_false
R9983:9988 Equiv <> cequiv def
R10023:10026 Imp <> ::'SKIP' not
R9998:10003 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10005:10008 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10010:10013 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10004:10004 Equiv <> b var
R10009:10009 Equiv <> c var
R9959:9964 Equiv <> bequiv def
R9968:9973 Imp <> BFalse constr
R9966:9966 Equiv <> b var
R10144:10149 Imp <> E_Skip constr
R10144:10149 Imp <> E_Skip constr
R10262:10271 Imp <> E_WhileEnd constr
R10262:10271 Imp <> E_WhileEnd constr
prf 11612:11629 <> WHILE_true_nonterm
R11680:11682 Coq.Init.Logic <> :type_scope:'~'_x not
R11713:11714 Coq.Init.Logic <> :type_scope:'~'_x not
R11683:11683 Imp <> ::x_'/'_x_'||'_x not
R11700:11703 Imp <> ::x_'/'_x_'||'_x not
R11706:11709 Imp <> ::x_'/'_x_'||'_x not
R11684:11689 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11691:11694 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11696:11699 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11690:11690 Equiv <> b var
R11695:11695 Equiv <> c var
R11704:11705 Equiv <> st var
R11710:11712 Equiv <> st' var
R11657:11662 Equiv <> bequiv def
R11666:11670 Imp <> BTrue constr
R11664:11664 Equiv <> b var
R11797:11802 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11804:11807 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11809:11812 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11797:11802 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11804:11807 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11809:11812 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12124:12129 Equiv <> bequiv def
prf 12646:12655 <> WHILE_true
R12699:12704 Equiv <> cequiv def
R12741:12746 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12752:12755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12760:12763 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12747:12751 Imp <> BTrue constr
R12756:12759 Imp <> ::'SKIP' not
R12715:12720 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12722:12725 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12727:12730 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12721:12721 Equiv <> b var
R12726:12726 Equiv <> c var
R12675:12680 Equiv <> bequiv def
R12684:12688 Imp <> BTrue constr
R12682:12682 Equiv <> b var
prf 12825:12838 <> loop_unrolling
R12855:12860 Equiv <> cequiv def
R12890:12893 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12895:12901 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12922:12928 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12933:12935 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12894:12894 Equiv <> b var
R12903:12905 Imp <> ::x_';;'_x not
R12902:12902 Equiv <> c var
R12906:12911 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12913:12916 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12918:12921 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12912:12912 Equiv <> b var
R12917:12917 Equiv <> c var
R12929:12932 Imp <> ::'SKIP' not
R12867:12872 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12874:12877 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12879:12882 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12873:12873 Equiv <> b var
R12878:12878 Equiv <> c var
R13095:13103 Imp <> E_IfFalse constr
R13095:13103 Imp <> E_IfFalse constr
R13124:13129 Imp <> E_Skip constr
R13124:13129 Imp <> E_Skip constr
R13167:13174 Imp <> E_IfTrue constr
R13167:13174 Imp <> E_IfTrue constr
R13201:13205 Imp <> E_Seq constr
R13201:13205 Imp <> E_Seq constr
R13352:13362 Imp <> E_WhileLoop constr
R13352:13362 Imp <> E_WhileLoop constr
R13490:13499 Imp <> E_WhileEnd constr
R13490:13499 Imp <> E_WhileEnd constr
prf 13582:13590 <> seq_assoc
R13613:13618 Equiv <> cequiv def
R13638:13640 Imp <> ::x_';;'_x not
R13647:13647 Imp <> ::x_';;'_x not
R13636:13637 Equiv <> c1 var
R13643:13644 Imp <> ::x_';;'_x not
R13641:13642 Equiv <> c2 var
R13645:13646 Equiv <> c3 var
R13621:13621 Imp <> ::x_';;'_x not
R13628:13630 Imp <> ::x_';;'_x not
R13624:13625 Imp <> ::x_';;'_x not
R13622:13623 Equiv <> c1 var
R13626:13627 Equiv <> c2 var
R13631:13632 Equiv <> c3 var
prf 14000:14028 <> identity_assignment_first_try
R14042:14043 SfLib <> id ind
R14049:14054 Equiv <> cequiv def
R14070:14073 Imp <> ::'SKIP' not
R14058:14062 Imp <> ::x_'::='_x not
R14057:14057 Equiv <> X var
R14063:14065 Imp <> AId constr
R14067:14067 Equiv <> X var
R14179:14184 Imp <> update def
R14179:14184 Imp <> update def
ax 16218:16242 <> functional_extensionality
R16277:16277 Equiv <> Y var
R16272:16272 Equiv <> X var
R16317:16319 Coq.Init.Logic <> :type_scope:x_'='_x not
R16316:16316 Equiv <> f var
R16320:16320 Equiv <> g var
R16297:16297 Equiv <> X var
R16304:16306 Coq.Init.Logic <> :type_scope:x_'='_x not
R16301:16301 Equiv <> f var
R16303:16303 Equiv <> x var
R16307:16307 Equiv <> g var
R16309:16309 Equiv <> x var
prf 16603:16621 <> identity_assignment
R16635:16636 SfLib <> id ind
R16642:16647 Equiv <> cequiv def
R16671:16674 Imp <> ::'SKIP' not
R16655:16659 Imp <> ::x_'::='_x not
R16654:16654 Equiv <> X var
R16660:16662 Imp <> AId constr
R16664:16664 Equiv <> X var
R16779:16784 Imp <> update def
R16779:16784 Imp <> update def
R16844:16868 Equiv <> functional_extensionality prfax
R16844:16868 Equiv <> functional_extensionality prfax
R16894:16904 Imp <> update_same thm
R16894:16904 Imp <> update_same thm
R16984:16987 Coq.Init.Logic <> :type_scope:x_'='_x not
R17008:17008 Coq.Init.Logic <> :type_scope:x_'='_x not
R16988:16993 Imp <> update def
R16984:16987 Coq.Init.Logic <> :type_scope:x_'='_x not
R17008:17008 Coq.Init.Logic <> :type_scope:x_'='_x not
R16988:16993 Imp <> update def
R17028:17052 Equiv <> functional_extensionality prfax
R17028:17052 Equiv <> functional_extensionality prfax
R17081:17091 Imp <> update_same thm
R17081:17091 Imp <> update_same thm
prf 17226:17238 <> assign_aequiv
R17279:17284 Equiv <> cequiv def
R17293:17297 Imp <> ::x_'::='_x not
R17292:17292 Equiv <> X var
R17298:17298 Equiv <> e var
R17286:17289 Imp <> ::'SKIP' not
R17256:17261 Equiv <> aequiv def
R17271:17271 Equiv <> e var
R17264:17266 Imp <> AId constr
R17268:17268 Equiv <> X var
prf 17886:17896 <> refl_aequiv
R17912:17915 Imp <> aexp ind
R17919:17924 Equiv <> aequiv def
R17928:17928 Equiv <> a var
R17926:17926 Equiv <> a var
prf 17979:17988 <> sym_aequiv
R18008:18011 Imp <> aexp ind
R18034:18039 Equiv <> aequiv def
R18044:18045 Equiv <> a1 var
R18041:18042 Equiv <> a2 var
R18018:18023 Equiv <> aequiv def
R18028:18029 Equiv <> a2 var
R18025:18026 Equiv <> a1 var
prf 18116:18127 <> trans_aequiv
R18150:18153 Imp <> aexp ind
R18192:18197 Equiv <> aequiv def
R18202:18203 Equiv <> a3 var
R18199:18200 Equiv <> a1 var
R18176:18181 Equiv <> aequiv def
R18186:18187 Equiv <> a3 var
R18183:18184 Equiv <> a2 var
R18160:18165 Equiv <> aequiv def
R18170:18171 Equiv <> a2 var
R18167:18168 Equiv <> a1 var
R18223:18228 Equiv <> aequiv def
prf 18323:18333 <> refl_bequiv
R18349:18352 Imp <> bexp ind
R18356:18361 Equiv <> bequiv def
R18365:18365 Equiv <> b var
R18363:18363 Equiv <> b var
R18384:18389 Equiv <> bequiv def
prf 18431:18440 <> sym_bequiv
R18460:18463 Imp <> bexp ind
R18486:18491 Equiv <> bequiv def
R18496:18497 Equiv <> b1 var
R18493:18494 Equiv <> b2 var
R18470:18475 Equiv <> bequiv def
R18480:18481 Equiv <> b2 var
R18477:18478 Equiv <> b1 var
R18516:18521 Equiv <> bequiv def
prf 18583:18594 <> trans_bequiv
R18617:18620 Imp <> bexp ind
R18659:18664 Equiv <> bequiv def
R18669:18670 Equiv <> b3 var
R18666:18667 Equiv <> b1 var
R18643:18648 Equiv <> bequiv def
R18653:18654 Equiv <> b3 var
R18650:18651 Equiv <> b2 var
R18627:18632 Equiv <> bequiv def
R18637:18638 Equiv <> b2 var
R18634:18635 Equiv <> b1 var
R18690:18695 Equiv <> bequiv def
prf 18790:18800 <> refl_cequiv
R18816:18818 Imp <> com ind
R18822:18827 Equiv <> cequiv def
R18831:18831 Equiv <> c var
R18829:18829 Equiv <> c var
R18850:18855 Equiv <> cequiv def
R18881:18888 Coq.Init.Logic <> iff_refl thm
R18881:18888 Coq.Init.Logic <> iff_refl thm
prf 18904:18913 <> sym_cequiv
R18933:18935 Imp <> com ind
R18958:18963 Equiv <> cequiv def
R18968:18969 Equiv <> c1 var
R18965:18966 Equiv <> c2 var
R18942:18947 Equiv <> cequiv def
R18952:18953 Equiv <> c2 var
R18949:18950 Equiv <> c1 var
R18988:18993 Equiv <> cequiv def
R19043:19047 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19031:19033 Imp <> ::x_'/'_x_'||'_x not
R19036:19039 Imp <> ::x_'/'_x_'||'_x not
R19050:19052 Imp <> ::x_'/'_x_'||'_x not
R19055:19058 Imp <> ::x_'/'_x_'||'_x not
R19043:19047 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19031:19033 Imp <> ::x_'/'_x_'||'_x not
R19036:19039 Imp <> ::x_'/'_x_'||'_x not
R19050:19052 Imp <> ::x_'/'_x_'||'_x not
R19055:19058 Imp <> ::x_'/'_x_'||'_x not
R19121:19127 Coq.Init.Logic <> iff_sym thm
R19121:19127 Coq.Init.Logic <> iff_sym thm
prf 19154:19162 <> iff_trans
R19228:19232 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19226:19227 Equiv <> P1 var
R19233:19234 Equiv <> P3 var
R19213:19217 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19211:19212 Equiv <> P2 var
R19218:19219 Equiv <> P3 var
R19198:19202 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19196:19197 Equiv <> P1 var
R19203:19204 Equiv <> P2 var
prf 19402:19413 <> trans_cequiv
R19436:19438 Imp <> com ind
R19477:19482 Equiv <> cequiv def
R19487:19488 Equiv <> c3 var
R19484:19485 Equiv <> c1 var
R19461:19466 Equiv <> cequiv def
R19471:19472 Equiv <> c3 var
R19468:19469 Equiv <> c2 var
R19445:19450 Equiv <> cequiv def
R19455:19456 Equiv <> c2 var
R19452:19453 Equiv <> c1 var
R19508:19513 Equiv <> cequiv def
R19574:19576 Imp <> ::x_'/'_x_'||'_x not
R19579:19582 Imp <> ::x_'/'_x_'||'_x not
R19556:19564 Equiv <> iff_trans thm
R19574:19576 Imp <> ::x_'/'_x_'||'_x not
R19579:19582 Imp <> ::x_'/'_x_'||'_x not
R19556:19564 Equiv <> iff_trans thm
prf 20941:20955 <> CAss_congruence
R20997:21002 Equiv <> cequiv def
R21017:21020 Imp <> CAss constr
R21024:21026 Equiv <> a1' var
R21022:21022 Equiv <> i var
R21005:21008 Imp <> CAss constr
R21012:21013 Equiv <> a1 var
R21010:21010 Equiv <> i var
R20978:20983 Equiv <> aequiv def
R20988:20990 Equiv <> a1' var
R20985:20986 Equiv <> a1 var
R21139:21143 Imp <> E_Ass constr
R21139:21143 Imp <> E_Ass constr
R21226:21230 Imp <> E_Ass constr
R21226:21230 Imp <> E_Ass constr
prf 23084:23100 <> CWhile_congruence
R23164:23169 Equiv <> cequiv def
R23193:23198 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23202:23205 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23209:23212 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23199:23201 Equiv <> b1' var
R23206:23208 Equiv <> c1' var
R23172:23177 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23180:23183 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23186:23189 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23178:23179 Equiv <> b1 var
R23184:23185 Equiv <> c1 var
R23145:23150 Equiv <> cequiv def
R23155:23157 Equiv <> c1' var
R23152:23153 Equiv <> c1 var
R23128:23133 Equiv <> bequiv def
R23138:23140 Equiv <> b1' var
R23135:23136 Equiv <> b1 var
R23256:23261 Equiv <> bequiv def
R23263:23268 Equiv <> cequiv def
R23360:23365 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23368:23371 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23374:23377 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23360:23365 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23368:23371 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23374:23377 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23488:23497 Imp <> E_WhileEnd constr
R23488:23497 Imp <> E_WhileEnd constr
R23563:23573 Imp <> E_WhileLoop constr
R23563:23573 Imp <> E_WhileLoop constr
R23830:23835 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23839:23842 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23846:23849 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23830:23835 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23839:23842 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23846:23849 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23963:23972 Imp <> E_WhileEnd constr
R23963:23972 Imp <> E_WhileEnd constr
R24038:24048 Imp <> E_WhileLoop constr
R24038:24048 Imp <> E_WhileLoop constr
prf 24352:24366 <> CSeq_congruence
R24430:24435 Equiv <> cequiv def
R24450:24451 Imp <> ::x_';;'_x not
R24447:24449 Equiv <> c1' var
R24452:24454 Equiv <> c2' var
R24440:24441 Imp <> ::x_';;'_x not
R24438:24439 Equiv <> c1 var
R24442:24443 Equiv <> c2 var
R24411:24416 Equiv <> cequiv def
R24421:24423 Equiv <> c2' var
R24418:24419 Equiv <> c2 var
R24394:24399 Equiv <> cequiv def
R24404:24406 Equiv <> c1' var
R24401:24402 Equiv <> c1 var
prf 24564:24577 <> CIf_congruence
R24661:24666 Equiv <> cequiv def
R24696:24699 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24702:24707 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24711:24716 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24720:24722 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24700:24701 Equiv <> b' var
R24708:24710 Equiv <> c1' var
R24717:24719 Equiv <> c2' var
R24669:24672 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24674:24679 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24682:24687 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24690:24692 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24673:24673 Equiv <> b var
R24680:24681 Equiv <> c1 var
R24688:24689 Equiv <> c2 var
R24642:24647 Equiv <> cequiv def
R24652:24654 Equiv <> c2' var
R24649:24650 Equiv <> c2 var
R24625:24630 Equiv <> cequiv def
R24635:24637 Equiv <> c1' var
R24632:24633 Equiv <> c1 var
R24610:24615 Equiv <> bequiv def
R24619:24620 Equiv <> b' var
R24617:24617 Equiv <> b var
def 24889:24906 <> congruence_example
R24911:24916 Equiv <> cequiv def
R25099:25106 Imp <> ::x_';;'_x not
R25088:25092 Imp <> ::x_'::='_x not
R25087:25087 Imp <> X def
R25093:25096 Imp <> ANum constr
R25107:25111 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25132:25150 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25179:25222 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25236:25243 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25112:25114 Imp <> BEq constr
R25125:25128 Imp <> ANum constr
R25117:25119 Imp <> AId constr
R25121:25121 Imp <> X def
R25152:25156 Imp <> ::x_'::='_x not
R25151:25151 Imp <> Y def
R25157:25162 Imp <> AMinus constr
R25173:25175 Imp <> AId constr
R25177:25177 Imp <> X def
R25165:25167 Imp <> AId constr
R25169:25169 Imp <> X def
R25224:25228 Imp <> ::x_'::='_x not
R25223:25223 Imp <> Y def
R25229:25232 Imp <> ANum constr
R24956:24963 Imp <> ::x_';;'_x not
R24945:24949 Imp <> ::x_'::='_x not
R24944:24944 Imp <> X def
R24950:24953 Imp <> ANum constr
R24964:24968 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24989:25007 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25020:25037 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25051:25058 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24969:24971 Imp <> BEq constr
R24982:24985 Imp <> ANum constr
R24974:24976 Imp <> AId constr
R24978:24978 Imp <> X def
R25009:25013 Imp <> ::x_'::='_x not
R25008:25008 Imp <> Y def
R25014:25017 Imp <> ANum constr
R25039:25043 Imp <> ::x_'::='_x not
R25038:25038 Imp <> Y def
R25044:25047 Imp <> ANum constr
R25262:25276 Equiv <> CSeq_congruence prfax
R25262:25276 Equiv <> CSeq_congruence prfax
R25290:25300 Equiv <> refl_cequiv thm
R25290:25300 Equiv <> refl_cequiv thm
R25314:25327 Equiv <> CIf_congruence prfax
R25314:25327 Equiv <> CIf_congruence prfax
R25342:25352 Equiv <> refl_bequiv thm
R25342:25352 Equiv <> refl_bequiv thm
R25367:25381 Equiv <> CAss_congruence thm
R25367:25381 Equiv <> CAss_congruence thm
R25391:25396 Equiv <> aequiv def
R25431:25440 Coq.Arith.Minus <> minus_diag thm
R25431:25440 Coq.Arith.Minus <> minus_diag thm
R25455:25465 Equiv <> refl_cequiv thm
R25455:25465 Equiv <> refl_cequiv thm
def 26029:26040 <> atrans_sound
R26060:26063 Imp <> aexp ind
R26052:26055 Imp <> aexp ind
R26090:26093 Imp <> aexp ind
R26101:26106 Equiv <> aequiv def
R26111:26116 Equiv <> atrans var
R26118:26118 Equiv <> a var
R26108:26108 Equiv <> a var
def 26134:26145 <> btrans_sound
R26165:26168 Imp <> bexp ind
R26157:26160 Imp <> bexp ind
R26195:26198 Imp <> bexp ind
R26206:26211 Equiv <> bequiv def
R26216:26221 Equiv <> btrans var
R26223:26223 Equiv <> b var
R26213:26213 Equiv <> b var
def 26239:26250 <> ctrans_sound
R26269:26271 Imp <> com ind
R26262:26264 Imp <> com ind
R26298:26300 Imp <> com ind
R26308:26313 Equiv <> cequiv def
R26318:26323 Equiv <> ctrans var
R26325:26325 Equiv <> c var
R26315:26315 Equiv <> c var
def 26643:26661 <> fold_constants_aexp
R26668:26671 Imp <> aexp ind
R26676:26679 Imp <> aexp ind
R26692:26692 Equiv <> a var
R26703:26706 Imp <> ANum constr
R26719:26722 Imp <> ANum constr
R26730:26732 Imp <> AId constr
R26746:26748 Imp <> AId constr
R26756:26760 Imp <> APlus constr
R26785:26785 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26808:26809 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26832:26832 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26786:26804 Equiv <> fold_constants_aexp def
R26810:26828 Equiv <> fold_constants_aexp def
R26847:26847 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26855:26856 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26864:26864 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26848:26851 Imp <> ANum constr
R26857:26860 Imp <> ANum constr
R26869:26872 Imp <> ANum constr
R26877:26879 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R26892:26892 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26896:26897 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26901:26901 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26906:26910 Imp <> APlus constr
R26934:26939 Imp <> AMinus constr
R26963:26963 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26986:26987 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27010:27010 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26964:26982 Equiv <> fold_constants_aexp def
R26988:27006 Equiv <> fold_constants_aexp def
R27025:27025 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27033:27034 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27042:27042 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27026:27029 Imp <> ANum constr
R27035:27038 Imp <> ANum constr
R27047:27050 Imp <> ANum constr
R27055:27057 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R27070:27070 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27074:27075 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27079:27079 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27084:27089 Imp <> AMinus constr
R27113:27117 Imp <> AMult constr
R27142:27142 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27165:27166 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27189:27189 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27143:27161 Equiv <> fold_constants_aexp def
R27167:27185 Equiv <> fold_constants_aexp def
R27204:27204 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27212:27213 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27221:27221 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27205:27208 Imp <> ANum constr
R27214:27217 Imp <> ANum constr
R27226:27229 Imp <> ANum constr
R27234:27236 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R27249:27249 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27253:27254 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27258:27258 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27263:27267 Imp <> AMult constr
def 27303:27315 <> fold_aexp_ex1
R27391:27396 Coq.Init.Logic <> :type_scope:x_'='_x not
R27323:27341 Equiv <> fold_constants_aexp def
R27351:27355 Imp <> AMult constr
R27384:27386 Imp <> AId constr
R27388:27388 Imp <> X def
R27358:27362 Imp <> APlus constr
R27374:27377 Imp <> ANum constr
R27365:27368 Imp <> ANum constr
R27397:27401 Imp <> AMult constr
R27413:27415 Imp <> AId constr
R27417:27417 Imp <> X def
R27404:27407 Imp <> ANum constr
def 27760:27772 <> fold_aexp_ex2
R27865:27869 Coq.Init.Logic <> :type_scope:x_'='_x not
R27780:27798 Equiv <> fold_constants_aexp def
R27808:27813 Imp <> AMinus constr
R27824:27828 Imp <> APlus constr
R27857:27859 Imp <> AId constr
R27861:27861 Imp <> Y def
R27831:27835 Imp <> AMult constr
R27847:27850 Imp <> ANum constr
R27838:27841 Imp <> ANum constr
R27816:27818 Imp <> AId constr
R27820:27820 Imp <> X def
R27870:27875 Imp <> AMinus constr
R27886:27890 Imp <> APlus constr
R27902:27904 Imp <> AId constr
R27906:27906 Imp <> Y def
R27893:27896 Imp <> ANum constr
R27878:27880 Imp <> AId constr
R27882:27882 Imp <> X def
def 28133:28151 <> fold_constants_bexp
R28158:28161 Imp <> bexp ind
R28166:28169 Imp <> bexp ind
R28182:28182 Equiv <> b var
R28193:28197 Imp <> BTrue constr
R28209:28213 Imp <> BTrue constr
R28219:28224 Imp <> BFalse constr
R28235:28240 Imp <> BFalse constr
R28246:28248 Imp <> BEq constr
R28273:28273 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28296:28297 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28320:28320 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28274:28292 Equiv <> fold_constants_aexp def
R28298:28316 Equiv <> fold_constants_aexp def
R28335:28335 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28343:28344 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28352:28352 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28336:28339 Imp <> ANum constr
R28345:28348 Imp <> ANum constr
R28360:28366 Coq.Arith.EqNat <> beq_nat def
R28390:28395 Imp <> BFalse constr
R28379:28383 Imp <> BTrue constr
R28405:28405 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28409:28410 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28414:28414 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28419:28421 Imp <> BEq constr
R28445:28447 Imp <> BLe constr
R28472:28472 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28495:28496 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28519:28519 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28473:28491 Equiv <> fold_constants_aexp def
R28497:28515 Equiv <> fold_constants_aexp def
R28534:28534 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28542:28543 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28551:28551 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28535:28538 Imp <> ANum constr
R28544:28547 Imp <> ANum constr
R28559:28565 SfLib <> ble_nat def
R28589:28594 Imp <> BFalse constr
R28578:28582 Imp <> BTrue constr
R28604:28604 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28608:28609 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28613:28613 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28618:28620 Imp <> BLe constr
R28644:28647 Imp <> BNot constr
R28670:28688 Equiv <> fold_constants_bexp def
R28707:28711 Imp <> BTrue constr
R28716:28721 Imp <> BFalse constr
R28731:28736 Imp <> BFalse constr
R28741:28745 Imp <> BTrue constr
R28762:28765 Imp <> BNot constr
R28785:28788 Imp <> BAnd constr
R28813:28813 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28836:28837 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28860:28860 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28814:28832 Equiv <> fold_constants_bexp def
R28838:28856 Equiv <> fold_constants_bexp def
R28875:28875 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28881:28882 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28888:28888 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28876:28880 Imp <> BTrue constr
R28883:28887 Imp <> BTrue constr
R28893:28897 Imp <> BTrue constr
R28907:28907 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28913:28914 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28921:28921 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28908:28912 Imp <> BTrue constr
R28915:28920 Imp <> BFalse constr
R28926:28931 Imp <> BFalse constr
R28941:28941 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28948:28949 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28955:28955 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28942:28947 Imp <> BFalse constr
R28950:28954 Imp <> BTrue constr
R28960:28965 Imp <> BFalse constr
R28975:28975 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28982:28983 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28990:28990 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28976:28981 Imp <> BFalse constr
R28984:28989 Imp <> BFalse constr
R28995:29000 Imp <> BFalse constr
R29010:29010 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29014:29015 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29019:29019 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29024:29027 Imp <> BAnd constr
def 29063:29075 <> fold_bexp_ex1
R29142:29146 Coq.Init.Logic <> :type_scope:x_'='_x not
R29083:29101 Equiv <> fold_constants_bexp def
R29104:29107 Imp <> BAnd constr
R29116:29119 Imp <> BNot constr
R29122:29125 Imp <> BAnd constr
R29134:29138 Imp <> BTrue constr
R29127:29132 Imp <> BFalse constr
R29109:29113 Imp <> BTrue constr
R29147:29151 Imp <> BTrue constr
def 29188:29200 <> fold_bexp_ex2
R29353:29357 Coq.Init.Logic <> :type_scope:x_'='_x not
R29208:29226 Equiv <> fold_constants_bexp def
R29236:29239 Imp <> BAnd constr
R29277:29279 Imp <> BEq constr
R29309:29314 Imp <> AMinus constr
R29326:29330 Imp <> APlus constr
R29342:29345 Imp <> ANum constr
R29333:29336 Imp <> ANum constr
R29317:29320 Imp <> ANum constr
R29282:29285 Imp <> ANum constr
R29242:29244 Imp <> BEq constr
R29255:29257 Imp <> AId constr
R29259:29259 Imp <> Y def
R29247:29249 Imp <> AId constr
R29251:29251 Imp <> X def
R29358:29361 Imp <> BAnd constr
R29385:29389 Imp <> BTrue constr
R29364:29366 Imp <> BEq constr
R29377:29379 Imp <> AId constr
R29381:29381 Imp <> Y def
R29369:29371 Imp <> AId constr
R29373:29373 Imp <> X def
def 29554:29571 <> fold_constants_com
R29578:29580 Imp <> com ind
R29585:29587 Imp <> com ind
R29600:29600 Equiv <> c var
R29611:29614 Imp <> ::'SKIP' not
R29631:29634 Imp <> ::'SKIP' not
R29641:29645 Imp <> ::x_'::='_x not
R29659:29662 Imp <> CAss constr
R29667:29685 Equiv <> fold_constants_aexp def
R29696:29699 Imp <> ::x_';;'_x not
R29714:29714 Imp <> ::x_';;'_x not
R29736:29741 Imp <> ::x_';;'_x not
R29763:29763 Imp <> ::x_';;'_x not
R29715:29732 Equiv <> fold_constants_com def
R29742:29759 Equiv <> fold_constants_com def
R29769:29772 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29774:29779 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29782:29787 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29790:29792 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29810:29828 Equiv <> fold_constants_bexp def
R29845:29849 Imp <> BTrue constr
R29854:29871 Equiv <> fold_constants_com def
R29884:29889 Imp <> BFalse constr
R29894:29911 Equiv <> fold_constants_com def
R29930:29933 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29936:29941 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29963:29990 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30012:30014 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29942:29959 Equiv <> fold_constants_com def
R29991:30008 Equiv <> fold_constants_com def
R30030:30035 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30037:30040 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30042:30045 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30063:30081 Equiv <> fold_constants_bexp def
R30098:30102 Imp <> BTrue constr
R30107:30112 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30118:30121 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30126:30129 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30113:30117 Imp <> BTrue constr
R30122:30125 Imp <> ::'SKIP' not
R30139:30144 Imp <> BFalse constr
R30149:30152 Imp <> ::'SKIP' not
R30168:30173 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30176:30180 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30201:30205 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30181:30198 Equiv <> fold_constants_com def
R30200:30200 Equiv <> c var
def 30244:30255 <> fold_com_ex1
R30711:30751 Coq.Init.Logic <> :type_scope:x_'='_x not
R31013:31013 Coq.Init.Logic <> :type_scope:x_'='_x not
R30261:30278 Equiv <> fold_constants_com def
R30343:30350 Imp <> ::x_';;'_x not
R30315:30319 Imp <> ::x_'::='_x not
R30314:30314 Imp <> X def
R30320:30324 Imp <> APlus constr
R30336:30339 Imp <> ANum constr
R30327:30330 Imp <> ANum constr
R30380:30387 Imp <> ::x_';;'_x not
R30352:30356 Imp <> ::x_'::='_x not
R30351:30351 Imp <> Y def
R30357:30362 Imp <> AMinus constr
R30373:30376 Imp <> ANum constr
R30365:30367 Imp <> AId constr
R30369:30369 Imp <> X def
R30502:30509 Imp <> ::x_';;'_x not
R30388:30391 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30446:30458 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30463:30481 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30494:30501 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30392:30394 Imp <> BEq constr
R30422:30426 Imp <> APlus constr
R30438:30441 Imp <> ANum constr
R30429:30432 Imp <> ANum constr
R30397:30402 Imp <> AMinus constr
R30413:30415 Imp <> AId constr
R30417:30417 Imp <> Y def
R30405:30407 Imp <> AId constr
R30409:30409 Imp <> X def
R30459:30462 Imp <> ::'SKIP' not
R30483:30487 Imp <> ::x_'::='_x not
R30482:30482 Imp <> Y def
R30488:30491 Imp <> ANum constr
R30626:30633 Imp <> ::x_';;'_x not
R30510:30513 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30570:30582 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30595:30612 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30617:30625 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30514:30516 Imp <> BLe constr
R30528:30533 Imp <> AMinus constr
R30545:30549 Imp <> APlus constr
R30561:30564 Imp <> ANum constr
R30552:30555 Imp <> ANum constr
R30536:30539 Imp <> ANum constr
R30519:30522 Imp <> ANum constr
R30584:30588 Imp <> ::x_'::='_x not
R30583:30583 Imp <> Y def
R30589:30592 Imp <> ANum constr
R30613:30616 Imp <> ::'SKIP' not
R30634:30639 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30660:30671 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30700:30709 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30640:30642 Imp <> BEq constr
R30653:30656 Imp <> ANum constr
R30645:30647 Imp <> AId constr
R30649:30649 Imp <> Y def
R30673:30677 Imp <> ::x_'::='_x not
R30672:30672 Imp <> X def
R30678:30682 Imp <> APlus constr
R30693:30696 Imp <> ANum constr
R30685:30687 Imp <> AId constr
R30689:30689 Imp <> X def
R30764:30771 Imp <> ::x_';;'_x not
R30753:30757 Imp <> ::x_'::='_x not
R30752:30752 Imp <> X def
R30758:30761 Imp <> ANum constr
R30801:30808 Imp <> ::x_';;'_x not
R30773:30777 Imp <> ::x_'::='_x not
R30772:30772 Imp <> Y def
R30778:30783 Imp <> AMinus constr
R30794:30797 Imp <> ANum constr
R30786:30788 Imp <> AId constr
R30790:30790 Imp <> X def
R30909:30916 Imp <> ::x_';;'_x not
R30809:30812 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30850:30862 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30867:30886 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30899:30908 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30813:30815 Imp <> BEq constr
R30843:30846 Imp <> ANum constr
R30818:30823 Imp <> AMinus constr
R30834:30836 Imp <> AId constr
R30838:30838 Imp <> Y def
R30826:30828 Imp <> AId constr
R30830:30830 Imp <> X def
R30863:30866 Imp <> ::'SKIP' not
R30888:30892 Imp <> ::x_'::='_x not
R30887:30887 Imp <> Y def
R30893:30896 Imp <> ANum constr
R30929:30936 Imp <> ::x_';;'_x not
R30918:30922 Imp <> ::x_'::='_x not
R30917:30917 Imp <> Y def
R30923:30926 Imp <> ANum constr
R30937:30942 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30963:30974 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31003:31012 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30943:30945 Imp <> BEq constr
R30956:30959 Imp <> ANum constr
R30948:30950 Imp <> AId constr
R30952:30952 Imp <> Y def
R30976:30980 Imp <> ::x_'::='_x not
R30975:30975 Imp <> X def
R30981:30985 Imp <> APlus constr
R30996:30999 Imp <> ANum constr
R30988:30990 Imp <> AId constr
R30992:30992 Imp <> X def
prf 31263:31287 <> fold_constants_aexp_sound
R31294:31305 Equiv <> atrans_sound def
R31307:31325 Equiv <> fold_constants_aexp def
R31344:31355 Equiv <> atrans_sound def
R31375:31380 Equiv <> aequiv def
R31809:31827 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31809:31827 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31809:31827 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31809:31827 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
R31853:31871 Equiv <> fold_constants_aexp def
prf 34873:34897 <> fold_constants_bexp_sound
R34903:34914 Equiv <> btrans_sound def
R34916:34934 Equiv <> fold_constants_bexp def
R34953:34964 Equiv <> btrans_sound def
R34984:34989 Equiv <> bequiv def
R35500:35518 Equiv <> fold_constants_aexp def
R35500:35518 Equiv <> fold_constants_aexp def
R35557:35575 Equiv <> fold_constants_aexp def
R35557:35575 Equiv <> fold_constants_aexp def
R35613:35617 Imp <> aeval def
R35632:35636 Imp <> aeval def
R35679:35703 Equiv <> fold_constants_aexp_sound thm
R35632:35636 Imp <> aeval def
R35613:35617 Imp <> aeval def
R35679:35703 Equiv <> fold_constants_aexp_sound thm
R35733:35737 Imp <> aeval def
R35752:35756 Imp <> aeval def
R35799:35823 Equiv <> fold_constants_aexp_sound thm
R35752:35756 Imp <> aeval def
R35733:35737 Imp <> aeval def
R35799:35823 Equiv <> fold_constants_aexp_sound thm
R36014:36020 Coq.Arith.EqNat <> beq_nat def
R36014:36020 Coq.Arith.EqNat <> beq_nat def
R36124:36142 Equiv <> fold_constants_bexp def
R36124:36142 Equiv <> fold_constants_bexp def
R36255:36273 Equiv <> fold_constants_bexp def
R36255:36273 Equiv <> fold_constants_bexp def
R36313:36331 Equiv <> fold_constants_bexp def
R36313:36331 Equiv <> fold_constants_bexp def
prf 36574:36597 <> fold_constants_com_sound
R36604:36615 Equiv <> ctrans_sound def
R36617:36634 Equiv <> fold_constants_com def
R36654:36665 Equiv <> ctrans_sound def
R36739:36749 Equiv <> refl_cequiv thm
R36739:36749 Equiv <> refl_cequiv thm
R36772:36786 Equiv <> CAss_congruence thm
R36772:36786 Equiv <> CAss_congruence thm
R36795:36819 Equiv <> fold_constants_aexp_sound thm
R36795:36819 Equiv <> fold_constants_aexp_sound thm
R36841:36855 Equiv <> CSeq_congruence prfax
R36841:36855 Equiv <> CSeq_congruence prfax
R36897:36902 Equiv <> bequiv def
R36907:36925 Equiv <> fold_constants_bexp def
R36897:36902 Equiv <> bequiv def
R36907:36925 Equiv <> fold_constants_bexp def
R36969:36993 Equiv <> fold_constants_bexp_sound thm
R36969:36993 Equiv <> fold_constants_bexp_sound thm
R37010:37028 Equiv <> fold_constants_bexp def
R37202:37215 Equiv <> CIf_congruence prfax
R37010:37028 Equiv <> fold_constants_bexp def
R37202:37215 Equiv <> CIf_congruence prfax
R37202:37215 Equiv <> CIf_congruence prfax
R37202:37215 Equiv <> CIf_congruence prfax
R37202:37215 Equiv <> CIf_congruence prfax
R37202:37215 Equiv <> CIf_congruence prfax
R37202:37215 Equiv <> CIf_congruence prfax
R37270:37281 Equiv <> trans_cequiv thm
R37270:37281 Equiv <> trans_cequiv thm
R37320:37327 Equiv <> IFB_true thm
R37320:37327 Equiv <> IFB_true thm
R37382:37393 Equiv <> trans_cequiv thm
R37382:37393 Equiv <> trans_cequiv thm
R37432:37440 Equiv <> IFB_false thm
R37432:37440 Equiv <> IFB_false thm
def 39875:39884 <> subst_aexp
R39891:39892 SfLib <> id ind
R39900:39903 Imp <> aexp ind
R39911:39914 Imp <> aexp ind
R39919:39922 Imp <> aexp ind
R39935:39935 Equiv <> a var
R39946:39949 Imp <> ANum constr
R39962:39965 Imp <> ANum constr
R39973:39975 Imp <> AId constr
R39992:40000 SfLib <> eq_id_dec thm
R40002:40002 Equiv <> i var
R40019:40021 Imp <> AId constr
R40012:40012 Equiv <> u var
R40030:40034 Imp <> APlus constr
R40046:40050 Imp <> APlus constr
R40073:40082 Equiv <> subst_aexp def
R40086:40086 Equiv <> u var
R40084:40084 Equiv <> i var
R40053:40062 Equiv <> subst_aexp def
R40066:40066 Equiv <> u var
R40064:40064 Equiv <> i var
R40096:40101 Imp <> AMinus constr
R40112:40117 Imp <> AMinus constr
R40140:40149 Equiv <> subst_aexp def
R40153:40153 Equiv <> u var
R40151:40151 Equiv <> i var
R40120:40129 Equiv <> subst_aexp def
R40133:40133 Equiv <> u var
R40131:40131 Equiv <> i var
R40163:40167 Imp <> AMult constr
R40179:40183 Imp <> AMult constr
R40206:40215 Equiv <> subst_aexp def
R40219:40219 Equiv <> u var
R40217:40217 Equiv <> i var
R40186:40195 Equiv <> subst_aexp def
R40199:40199 Equiv <> u var
R40197:40197 Equiv <> i var
def 40241:40253 <> subst_aexp_ex
R40323:40328 Coq.Init.Logic <> :type_scope:x_'='_x not
R40370:40370 Coq.Init.Logic <> :type_scope:x_'='_x not
R40259:40268 Equiv <> subst_aexp def
R40301:40305 Imp <> APlus constr
R40316:40318 Imp <> AId constr
R40320:40320 Imp <> X def
R40308:40310 Imp <> AId constr
R40312:40312 Imp <> Y def
R40273:40277 Imp <> APlus constr
R40290:40293 Imp <> ANum constr
R40280:40283 Imp <> ANum constr
R40270:40270 Imp <> X def
R40329:40333 Imp <> APlus constr
R40344:40348 Imp <> APlus constr
R40361:40364 Imp <> ANum constr
R40351:40354 Imp <> ANum constr
R40336:40338 Imp <> AId constr
R40340:40340 Imp <> Y def
def 40566:40585 <> subst_equiv_property
R40612:40617 Equiv <> cequiv def
R40662:40664 Imp <> ::x_';;'_x not
R40655:40659 Imp <> ::x_'::='_x not
R40653:40654 Equiv <> i1 var
R40660:40661 Equiv <> a1 var
R40667:40671 Imp <> ::x_'::='_x not
R40665:40666 Equiv <> i2 var
R40672:40681 Equiv <> subst_aexp def
R40689:40690 Equiv <> a2 var
R40686:40687 Equiv <> a1 var
R40683:40684 Equiv <> i1 var
R40629:40631 Imp <> ::x_';;'_x not
R40622:40626 Imp <> ::x_'::='_x not
R40620:40621 Equiv <> i1 var
R40627:40628 Equiv <> a1 var
R40634:40638 Imp <> ::x_'::='_x not
R40632:40633 Equiv <> i2 var
R40639:40640 Equiv <> a2 var
prf 41945:41957 <> subst_inequiv
R41964:41965 Coq.Init.Logic <> :type_scope:'~'_x not
R41966:41985 Equiv <> subst_equiv_property def
R42004:42023 Equiv <> subst_equiv_property def
R42234:42249 Imp <> ::x_';;'_x not
R42207:42211 Imp <> ::x_'::='_x not
R42206:42206 Imp <> X def
R42212:42216 Imp <> APlus constr
R42227:42230 Imp <> ANum constr
R42219:42221 Imp <> AId constr
R42223:42223 Imp <> X def
R42251:42255 Imp <> ::x_'::='_x not
R42250:42250 Imp <> Y def
R42256:42258 Imp <> AId constr
R42260:42260 Imp <> X def
R42234:42249 Imp <> ::x_';;'_x not
R42207:42211 Imp <> ::x_'::='_x not
R42206:42206 Imp <> X def
R42212:42216 Imp <> APlus constr
R42227:42230 Imp <> ANum constr
R42219:42221 Imp <> AId constr
R42223:42223 Imp <> X def
R42251:42255 Imp <> ::x_'::='_x not
R42250:42250 Imp <> Y def
R42256:42258 Imp <> AId constr
R42260:42260 Imp <> X def
R42317:42332 Imp <> ::x_';;'_x not
R42290:42294 Imp <> ::x_'::='_x not
R42289:42289 Imp <> X def
R42295:42299 Imp <> APlus constr
R42310:42313 Imp <> ANum constr
R42302:42304 Imp <> AId constr
R42306:42306 Imp <> X def
R42334:42338 Imp <> ::x_'::='_x not
R42333:42333 Imp <> Y def
R42339:42343 Imp <> APlus constr
R42354:42357 Imp <> ANum constr
R42346:42348 Imp <> AId constr
R42350:42350 Imp <> X def
R42317:42332 Imp <> ::x_';;'_x not
R42290:42294 Imp <> ::x_'::='_x not
R42289:42289 Imp <> X def
R42295:42299 Imp <> APlus constr
R42310:42313 Imp <> ANum constr
R42302:42304 Imp <> AId constr
R42306:42306 Imp <> X def
R42334:42338 Imp <> ::x_'::='_x not
R42333:42333 Imp <> Y def
R42339:42343 Imp <> APlus constr
R42354:42357 Imp <> ANum constr
R42346:42348 Imp <> AId constr
R42350:42350 Imp <> X def
R42387:42392 Equiv <> cequiv def
R42387:42392 Equiv <> cequiv def
R42612:42617 Imp <> update def
R42644:42644 Imp <> Y def
R42620:42625 Imp <> update def
R42639:42639 Imp <> X def
R42627:42637 Imp <> empty_state def
R42612:42617 Imp <> update def
R42644:42644 Imp <> Y def
R42620:42625 Imp <> update def
R42639:42639 Imp <> X def
R42627:42637 Imp <> empty_state def
R42669:42674 Imp <> update def
R42701:42701 Imp <> Y def
R42677:42682 Imp <> update def
R42696:42696 Imp <> X def
R42684:42694 Imp <> empty_state def
R42669:42674 Imp <> update def
R42701:42701 Imp <> Y def
R42677:42682 Imp <> update def
R42696:42696 Imp <> X def
R42684:42694 Imp <> empty_state def
R42730:42732 Imp <> ::x_'/'_x_'||'_x not
R42744:42747 Imp <> ::x_'/'_x_'||'_x not
R42733:42743 Imp <> empty_state def
R42770:42772 Imp <> ::x_'/'_x_'||'_x not
R42784:42787 Imp <> ::x_'/'_x_'||'_x not
R42773:42783 Imp <> empty_state def
R42841:42846 Imp <> update def
R42860:42860 Imp <> X def
R42848:42858 Imp <> empty_state def
R42821:42825 Imp <> E_Seq constr
R42881:42885 Imp <> E_Ass constr
R42730:42732 Imp <> ::x_'/'_x_'||'_x not
R42744:42747 Imp <> ::x_'/'_x_'||'_x not
R42733:42743 Imp <> empty_state def
R42770:42772 Imp <> ::x_'/'_x_'||'_x not
R42784:42787 Imp <> ::x_'/'_x_'||'_x not
R42773:42783 Imp <> empty_state def
R42770:42772 Imp <> ::x_'/'_x_'||'_x not
R42784:42787 Imp <> ::x_'/'_x_'||'_x not
R42773:42783 Imp <> empty_state def
R42841:42846 Imp <> update def
R42860:42860 Imp <> X def
R42848:42858 Imp <> empty_state def
R42821:42825 Imp <> E_Seq constr
R42881:42885 Imp <> E_Ass constr
R42881:42885 Imp <> E_Ass constr
R42841:42846 Imp <> update def
R42860:42860 Imp <> X def
R42848:42858 Imp <> empty_state def
R42821:42825 Imp <> E_Seq constr
R42881:42885 Imp <> E_Ass constr
R42881:42885 Imp <> E_Ass constr
R42841:42846 Imp <> update def
R42860:42860 Imp <> X def
R42848:42858 Imp <> empty_state def
R42821:42825 Imp <> E_Seq constr
R42881:42885 Imp <> E_Ass constr
R42881:42885 Imp <> E_Ass constr
R42841:42846 Imp <> update def
R42860:42860 Imp <> X def
R42848:42858 Imp <> empty_state def
R42821:42825 Imp <> E_Seq constr
R43040:43042 Coq.Init.Logic <> :type_scope:x_'='_x not
R43063:43081 Imp <> ceval_deterministic thm
R43086:43096 Imp <> empty_state def
R43040:43042 Coq.Init.Logic <> :type_scope:x_'='_x not
R43063:43081 Imp <> ceval_deterministic thm
R43086:43096 Imp <> empty_state def
R43138:43140 Coq.Init.Logic <> :type_scope:x_'='_x not
R43137:43137 Imp <> Y def
R43145:43145 Imp <> Y def
R43138:43140 Coq.Init.Logic <> :type_scope:x_'='_x not
R43137:43137 Imp <> Y def
R43145:43145 Imp <> Y def
ind 43553:43572 <> var_not_used_in_aexp
constr 43603:43608 <> VNUNum
constr 43657:43661 <> VNUId
constr 43719:43725 <> VNUPlus
constr 43860:43867 <> VNUMinus
constr 44003:44009 <> VNUMult
R43577:43578 SfLib <> id ind
R43583:43586 Imp <> aexp ind
R43621:43640 Equiv <> var_not_used_in_aexp ind
R43645:43648 Imp <> ANum constr
R43650:43650 Equiv <> n var
R43684:43703 Equiv <> var_not_used_in_aexp ind
R43708:43710 Imp <> AId constr
R43712:43712 Equiv <> Y var
R43675:43678 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R43679:43679 Equiv <> Y var
R43819:43838 Equiv <> var_not_used_in_aexp ind
R43843:43847 Imp <> APlus constr
R43852:43853 Equiv <> a2 var
R43849:43850 Equiv <> a1 var
R43784:43803 Equiv <> var_not_used_in_aexp ind
R43807:43808 Equiv <> a2 var
R43749:43768 Equiv <> var_not_used_in_aexp ind
R43772:43773 Equiv <> a1 var
R43961:43980 Equiv <> var_not_used_in_aexp ind
R43985:43990 Imp <> AMinus constr
R43995:43996 Equiv <> a2 var
R43992:43993 Equiv <> a1 var
R43926:43945 Equiv <> var_not_used_in_aexp ind
R43949:43950 Equiv <> a2 var
R43891:43910 Equiv <> var_not_used_in_aexp ind
R43914:43915 Equiv <> a1 var
R44103:44122 Equiv <> var_not_used_in_aexp ind
R44127:44131 Imp <> AMult constr
R44136:44137 Equiv <> a2 var
R44133:44134 Equiv <> a1 var
R44068:44087 Equiv <> var_not_used_in_aexp ind
R44091:44092 Equiv <> a2 var
R44033:44052 Equiv <> var_not_used_in_aexp ind
R44056:44057 Equiv <> a1 var
prf 44148:44162 <> aeval_weakening
R44240:44242 Coq.Init.Logic <> :type_scope:x_'='_x not
R44216:44220 Imp <> aeval def
R44239:44239 Equiv <> a var
R44223:44228 Imp <> update def
R44235:44236 Equiv <> ni var
R44233:44233 Equiv <> i var
R44230:44231 Equiv <> st var
R44243:44247 Imp <> aeval def
R44252:44252 Equiv <> a var
R44249:44250 Equiv <> st var
R44186:44205 Equiv <> var_not_used_in_aexp ind
R44209:44209 Equiv <> a var
R44207:44207 Equiv <> i var
prf 44562:44577 <> inequiv_exercise
R44583:44584 Coq.Init.Logic <> :type_scope:'~'_x not
R44585:44590 Equiv <> cequiv def
R44618:44621 Imp <> ::'SKIP' not
R44593:44598 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44604:44607 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44612:44615 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44599:44603 Imp <> BTrue constr
R44608:44611 Imp <> ::'SKIP' not
mod 46651:46654 <> Himp
ind 46759:46761 Himp com
constr 46777:46781 Himp CSkip
constr 46793:46796 Himp CAss
constr 46822:46825 Himp CSeq
constr 46851:46853 Himp CIf
constr 46887:46892 Himp CWhile
constr 46919:46924 Himp CHavoc
R46785:46787 Equiv <> com ind
R46814:46816 Equiv <> com ind
R46806:46809 Imp <> aexp ind
R46800:46801 SfLib <> id ind
R46843:46845 Equiv <> com ind
R46836:46838 Equiv <> com ind
R46829:46831 Equiv <> com ind
R46879:46881 Equiv <> com ind
R46872:46874 Equiv <> com ind
R46865:46867 Equiv <> com ind
R46857:46860 Imp <> bexp ind
R46911:46913 Equiv <> com ind
R46904:46906 Equiv <> com ind
R46896:46899 Imp <> bexp ind
R46934:46936 Equiv <> com ind
R46928:46929 SfLib <> id ind
R47183:47187 Equiv Himp CSkip constr
not 47169 Himp ::'SKIP'
R47217:47220 Equiv Himp CAss constr
not 47199 Himp ::x_'::='_x
R47268:47271 Equiv Himp CSeq constr
not 47251 Himp ::x_';;'_x
R47356:47361 Equiv Himp CWhile constr
not 47325 Himp ::'WHILE'_x_'DO'_x_'END'
R47455:47457 Equiv Himp CIf constr
not 47413 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R47530:47535 Equiv Himp CHavoc constr
not 47514 Himp ::'HAVOC'_x
ind 47946:47950 Himp ceval
constr 47991:47996 Himp E_Skip
constr 48039:48043 Himp E_Ass
constr 48167:48171 Himp E_Seq
constr 48297:48304 Himp E_IfTrue
constr 48473:48481 Himp E_IfFalse
constr 48653:48662 Himp E_WhileEnd
constr 48786:48796 Himp E_WhileLoop
R47970:47974 Imp <> state def
R47961:47965 Imp <> state def
R47954:47956 Equiv Himp com ind
R49090:49094 Equiv <> ceval ind
R48012:48016 Imp <> state def
R48023:48025 Equiv Himp ::x_'/'_x_'||'_x not
R48028:48031 Equiv Himp ::x_'/'_x_'||'_x not
R48019:48022 Equiv Himp ::'SKIP' not
R48026:48027 Equiv <> st var
R48032:48033 Equiv <> st var
R48060:48064 Imp <> state def
R48073:48076 Imp <> aexp ind
R48084:48086 Coq.Init.Datatypes <> nat ind
R48094:48095 SfLib <> id ind
R48130:48130 Equiv Himp ::x_'/'_x_'||'_x not
R48139:48142 Equiv Himp ::x_'/'_x_'||'_x not
R48145:48148 Equiv Himp ::x_'/'_x_'||'_x not
R48132:48136 Equiv Himp ::x_'::='_x not
R48131:48131 Equiv <> X var
R48137:48138 Equiv <> a1 var
R48143:48144 Equiv <> st var
R48149:48154 Imp <> update def
R48161:48161 Equiv <> n var
R48159:48159 Equiv <> X var
R48156:48157 Equiv <> st var
R48122:48124 Coq.Init.Logic <> :type_scope:x_'='_x not
R48111:48115 Imp <> aeval def
R48120:48121 Equiv <> a1 var
R48117:48118 Equiv <> st var
R48125:48125 Equiv <> n var
R48191:48193 Equiv Himp com ind
R48211:48215 Imp <> state def
R48269:48269 Equiv Himp ::x_'/'_x_'||'_x not
R48278:48281 Equiv Himp ::x_'/'_x_'||'_x not
R48284:48287 Equiv Himp ::x_'/'_x_'||'_x not
R48272:48275 Equiv Himp ::x_';;'_x not
R48270:48271 Equiv <> c1 var
R48276:48277 Equiv <> c2 var
R48282:48283 Equiv <> st var
R48288:48291 Equiv <> st'' var
R48251:48253 Equiv Himp ::x_'/'_x_'||'_x not
R48257:48260 Equiv Himp ::x_'/'_x_'||'_x not
R48249:48250 Equiv <> c2 var
R48254:48256 Equiv <> st' var
R48261:48264 Equiv <> st'' var
R48233:48235 Equiv Himp ::x_'/'_x_'||'_x not
R48238:48241 Equiv Himp ::x_'/'_x_'||'_x not
R48231:48232 Equiv <> c1 var
R48236:48237 Equiv <> st var
R48242:48244 Equiv <> st' var
R48325:48329 Imp <> state def
R48338:48341 Imp <> bexp ind
R48353:48355 Equiv Himp com ind
R48429:48429 Equiv Himp ::x_'/'_x_'||'_x not
R48455:48458 Equiv Himp ::x_'/'_x_'||'_x not
R48461:48464 Equiv Himp ::x_'/'_x_'||'_x not
R48430:48433 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48436:48441 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48444:48449 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48452:48454 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48434:48435 Equiv <> b1 var
R48442:48443 Equiv <> c1 var
R48450:48451 Equiv <> c2 var
R48459:48460 Equiv <> st var
R48465:48467 Equiv <> st' var
R48413:48415 Equiv Himp ::x_'/'_x_'||'_x not
R48418:48421 Equiv Himp ::x_'/'_x_'||'_x not
R48411:48412 Equiv <> c1 var
R48416:48417 Equiv <> st var
R48422:48424 Equiv <> st' var
R48385:48387 Coq.Init.Logic <> :type_scope:x_'='_x not
R48374:48378 Imp <> beval def
R48383:48384 Equiv <> b1 var
R48380:48381 Equiv <> st var
R48388:48391 Coq.Init.Datatypes <> true constr
R48502:48506 Imp <> state def
R48515:48518 Imp <> bexp ind
R48530:48532 Equiv Himp com ind
R48609:48609 Equiv Himp ::x_'/'_x_'||'_x not
R48635:48638 Equiv Himp ::x_'/'_x_'||'_x not
R48641:48644 Equiv Himp ::x_'/'_x_'||'_x not
R48610:48613 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48616:48621 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48624:48629 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48632:48634 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48614:48615 Equiv <> b1 var
R48622:48623 Equiv <> c1 var
R48630:48631 Equiv <> c2 var
R48639:48640 Equiv <> st var
R48645:48647 Equiv <> st' var
R48593:48595 Equiv Himp ::x_'/'_x_'||'_x not
R48598:48601 Equiv Himp ::x_'/'_x_'||'_x not
R48591:48592 Equiv <> c2 var
R48596:48597 Equiv <> st var
R48602:48604 Equiv <> st' var
R48563:48565 Coq.Init.Logic <> :type_scope:x_'='_x not
R48552:48556 Imp <> beval def
R48561:48562 Equiv <> b1 var
R48558:48559 Equiv <> st var
R48566:48570 Coq.Init.Datatypes <> false constr
R48679:48682 Imp <> bexp ind
R48691:48695 Imp <> state def
R48704:48706 Equiv Himp com ind
R48750:48750 Equiv Himp ::x_'/'_x_'||'_x not
R48769:48772 Equiv Himp ::x_'/'_x_'||'_x not
R48775:48778 Equiv Himp ::x_'/'_x_'||'_x not
R48751:48756 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48759:48762 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48765:48768 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48757:48758 Equiv <> b1 var
R48763:48764 Equiv <> c1 var
R48773:48774 Equiv <> st var
R48779:48780 Equiv <> st var
R48738:48740 Coq.Init.Logic <> :type_scope:x_'='_x not
R48727:48731 Imp <> beval def
R48736:48737 Equiv <> b1 var
R48733:48734 Equiv <> st var
R48741:48745 Coq.Init.Datatypes <> false constr
R48822:48826 Imp <> state def
R48835:48838 Imp <> bexp ind
R48847:48849 Equiv Himp com ind
R49003:49003 Equiv Himp ::x_'/'_x_'||'_x not
R49022:49025 Equiv Himp ::x_'/'_x_'||'_x not
R49028:49031 Equiv Himp ::x_'/'_x_'||'_x not
R49004:49009 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49012:49015 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49018:49021 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49010:49011 Equiv <> b1 var
R49016:49017 Equiv <> c1 var
R49026:49027 Equiv <> st var
R49032:49035 Equiv <> st'' var
R48947:48947 Equiv Himp ::x_'/'_x_'||'_x not
R48966:48969 Equiv Himp ::x_'/'_x_'||'_x not
R48973:48976 Equiv Himp ::x_'/'_x_'||'_x not
R48948:48953 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48956:48959 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48962:48965 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48954:48955 Equiv <> b1 var
R48960:48961 Equiv <> c1 var
R48970:48972 Equiv <> st' var
R48977:48980 Equiv <> st'' var
R48913:48915 Equiv Himp ::x_'/'_x_'||'_x not
R48918:48921 Equiv Himp ::x_'/'_x_'||'_x not
R48911:48912 Equiv <> c1 var
R48916:48917 Equiv <> st var
R48922:48924 Equiv <> st' var
R48882:48884 Coq.Init.Logic <> :type_scope:x_'='_x not
R48871:48875 Imp <> beval def
R48880:48881 Equiv <> b1 var
R48877:48878 Equiv <> st var
R48885:48888 Coq.Init.Datatypes <> true constr
R49090:49094 Equiv Himp ceval ind
not 49065 Himp ::x_'/'_x_'||'_x
def 49468:49481 Himp havoc_example1
R49485:49485 Equiv Himp ::x_'/'_x_'||'_x not
R49493:49496 Equiv Himp ::x_'/'_x_'||'_x not
R49508:49511 Equiv Himp ::x_'/'_x_'||'_x not
R49486:49491 Equiv Himp ::'HAVOC'_x not
R49492:49492 Imp <> X def
R49497:49507 Imp <> empty_state def
R49512:49517 Imp <> update def
R49531:49531 Imp <> X def
R49519:49529 Imp <> empty_state def
def 49581:49594 Himp havoc_example2
R49600:49600 Equiv Himp ::x_'/'_x_'||'_x not
R49615:49618 Equiv Himp ::x_'/'_x_'||'_x not
R49630:49633 Equiv Himp ::x_'/'_x_'||'_x not
R49605:49607 Equiv Himp ::x_';;'_x not
R49601:49604 Equiv Himp ::'SKIP' not
R49608:49613 Equiv Himp ::'HAVOC'_x not
R49614:49614 Imp <> Z def
R49619:49629 Imp <> empty_state def
R49634:49639 Imp <> update def
R49653:49653 Imp <> Z def
R49641:49651 Imp <> empty_state def
def 49794:49799 Himp cequiv
R49810:49812 Equiv Himp com ind
R49841:49845 Imp <> state def
R49864:49868 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R49852:49854 Equiv Himp ::x_'/'_x_'||'_x not
R49857:49860 Equiv Himp ::x_'/'_x_'||'_x not
R49850:49851 Equiv <> c1 var
R49855:49856 Equiv <> st var
R49861:49863 Equiv <> st' var
R49871:49873 Equiv Himp ::x_'/'_x_'||'_x not
R49876:49879 Equiv Himp ::x_'/'_x_'||'_x not
R49869:49870 Equiv <> c2 var
R49874:49875 Equiv <> st var
R49880:49882 Equiv <> st' var
def 50183:50185 Himp pXY
R50199:50201 Equiv Himp ::x_';;'_x not
R50192:50197 Equiv Himp ::'HAVOC'_x not
R50198:50198 Imp <> X def
R50202:50207 Equiv Himp ::'HAVOC'_x not
R50208:50208 Imp <> Y def
def 50223:50225 Himp pYX
R50239:50241 Equiv Himp ::x_';;'_x not
R50232:50237 Equiv Himp ::'HAVOC'_x not
R50238:50238 Imp <> Y def
R50242:50247 Equiv Himp ::'HAVOC'_x not
R50248:50248 Imp <> X def
prf 50356:50369 Himp pXY_cequiv_pYX
R50389:50392 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50375:50380 Equiv Himp cequiv def
R50386:50388 Equiv Himp pYX def
R50382:50384 Equiv Himp pXY def
R50393:50393 Coq.Init.Logic <> :type_scope:'~'_x not
R50394:50399 Equiv Himp cequiv def
R50405:50407 Equiv Himp pYX def
R50401:50403 Equiv Himp pXY def
def 50573:50578 Himp ptwice
R50592:50594 Equiv Himp ::x_';;'_x not
R50585:50590 Equiv Himp ::'HAVOC'_x not
R50591:50591 Imp <> X def
R50595:50600 Equiv Himp ::'HAVOC'_x not
R50601:50601 Imp <> Y def
def 50616:50620 Himp pcopy
R50634:50636 Equiv Himp ::x_';;'_x not
R50627:50632 Equiv Himp ::'HAVOC'_x not
R50633:50633 Imp <> X def
R50638:50642 Equiv Himp ::x_'::='_x not
R50637:50637 Imp <> Y def
R50643:50645 Imp <> AId constr
R50647:50647 Imp <> X def
prf 50818:50836 Himp ptwice_cequiv_pcopy
R50861:50864 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50842:50847 Equiv Himp cequiv def
R50856:50860 Equiv Himp pcopy def
R50849:50854 Equiv Himp ptwice def
R50865:50865 Coq.Init.Logic <> :type_scope:'~'_x not
R50866:50871 Equiv Himp cequiv def
R50880:50884 Equiv Himp pcopy def
R50873:50878 Equiv Himp ptwice def
def 51728:51729 Himp p1
R51733:51735 Equiv Himp com ind
R51742:51748 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51776:51784 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51827:51832 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51749:51752 Imp <> BNot constr
R51755:51757 Imp <> BEq constr
R51768:51771 Imp <> ANum constr
R51760:51762 Imp <> AId constr
R51764:51764 Imp <> X def
R51792:51798 Equiv Himp ::x_';;'_x not
R51785:51790 Equiv Himp ::'HAVOC'_x not
R51791:51791 Imp <> Y def
R51800:51804 Equiv Himp ::x_'::='_x not
R51799:51799 Imp <> X def
R51805:51809 Imp <> APlus constr
R51820:51823 Imp <> ANum constr
R51812:51814 Imp <> AId constr
R51816:51816 Imp <> X def
def 51847:51848 Himp p2
R51852:51854 Equiv Himp com ind
R51861:51867 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51895:51903 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51908:51913 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51868:51871 Imp <> BNot constr
R51874:51876 Imp <> BEq constr
R51887:51890 Imp <> ANum constr
R51879:51881 Imp <> AId constr
R51883:51883 Imp <> X def
R51904:51907 Equiv Himp ::'SKIP' not
prf 52171:52184 Himp p1_may_diverge
R52218:52219 Coq.Init.Logic <> :type_scope:'~'_x not
R52222:52224 Equiv Himp ::x_'/'_x_'||'_x not
R52227:52230 Equiv Himp ::x_'/'_x_'||'_x not
R52220:52221 Equiv Himp p1 def
R52225:52226 Equiv <> st var
R52231:52233 Equiv <> st' var
R52207:52210 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R52203:52204 Equiv <> st var
R52206:52206 Imp <> X def
prf 52279:52292 Himp p2_may_diverge
R52326:52327 Coq.Init.Logic <> :type_scope:'~'_x not
R52330:52332 Equiv Himp ::x_'/'_x_'||'_x not
R52335:52338 Equiv Himp ::x_'/'_x_'||'_x not
R52328:52329 Equiv Himp p2 def
R52333:52334 Equiv <> st var
R52339:52341 Equiv <> st' var
R52315:52318 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R52311:52312 Equiv <> st var
R52314:52314 Imp <> X def
prf 52478:52488 Himp p1_p2_equiv
R52492:52497 Equiv Himp cequiv def
R52502:52503 Equiv Himp p2 def
R52499:52500 Equiv Himp p1 def
def 52685:52686 Himp p3
R52690:52692 Equiv Himp com ind
R52711:52715 Equiv Himp ::x_';;'_x not
R52700:52704 Equiv Himp ::x_'::='_x not
R52699:52699 Imp <> Z def
R52705:52708 Imp <> ANum constr
R52716:52722 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52750:52758 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52780:52785 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52723:52726 Imp <> BNot constr
R52729:52731 Imp <> BEq constr
R52742:52745 Imp <> ANum constr
R52734:52736 Imp <> AId constr
R52738:52738 Imp <> X def
R52766:52772 Equiv Himp ::x_';;'_x not
R52759:52764 Equiv Himp ::'HAVOC'_x not
R52765:52765 Imp <> X def
R52773:52778 Equiv Himp ::'HAVOC'_x not
R52779:52779 Imp <> Z def
def 52800:52801 Himp p4
R52805:52807 Equiv Himp com ind
R52828:52832 Equiv Himp ::x_';;'_x not
R52815:52820 Equiv Himp ::x_'::='_x not
R52827:52827 Equiv Himp ::x_'::='_x not
R52814:52814 Imp <> X def
R52821:52824 Imp <> ANum constr
R52834:52839 Equiv Himp ::x_'::='_x not
R52846:52846 Equiv Himp ::x_'::='_x not
R52833:52833 Imp <> Z def
R52840:52843 Imp <> ANum constr
prf 52859:52871 Himp p3_p4_inequiv
R52875:52876 Coq.Init.Logic <> :type_scope:'~'_x not
R52877:52882 Equiv Himp cequiv def
R52887:52888 Equiv Himp p4 def
R52884:52885 Equiv Himp p3 def
def 53015:53016 Himp p5
R53020:53022 Equiv Himp com ind
R53029:53035 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53063:53071 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53079:53084 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53036:53039 Imp <> BNot constr
R53042:53044 Imp <> BEq constr
R53055:53058 Imp <> ANum constr
R53047:53049 Imp <> AId constr
R53051:53051 Imp <> X def
R53072:53077 Equiv Himp ::'HAVOC'_x not
R53078:53078 Imp <> X def
def 53099:53100 Himp p6
R53104:53106 Equiv Himp com ind
R53114:53118 Equiv Himp ::x_'::='_x not
R53113:53113 Imp <> X def
R53119:53122 Imp <> ANum constr
prf 53137:53147 Himp p5_p6_equiv
R53151:53156 Equiv Himp cequiv def
R53161:53162 Equiv Himp p6 def
R53158:53159 Equiv Himp p5 def
R53216:53219 Equiv Himp <> mod
def 54073:54079 <> stequiv
R54092:54096 Imp <> state def
R54121:54122 SfLib <> id ind
R54131:54133 Coq.Init.Logic <> :type_scope:x_'='_x not
R54126:54128 Equiv <> st1 var
R54130:54130 Equiv <> X var
R54134:54136 Equiv <> st2 var
R54138:54138 Equiv <> X var
R54170:54176 Equiv <> stequiv def
not 54152 <> ::x_'~'_x
prf 54450:54461 <> stequiv_refl
R54478:54482 Imp <> state def
R54491:54493 Equiv <> ::x_'~'_x not
R54489:54490 Equiv <> st var
R54494:54495 Equiv <> st var
prf 54607:54617 <> stequiv_sym
R54639:54643 Imp <> state def
R54669:54671 Equiv <> ::x_'~'_x not
R54666:54668 Equiv <> st2 var
R54672:54674 Equiv <> st1 var
R54653:54655 Equiv <> ::x_'~'_x not
R54650:54652 Equiv <> st1 var
R54656:54658 Equiv <> st2 var
prf 54792:54804 <> stequiv_trans
R54830:54834 Imp <> state def
R54876:54878 Equiv <> ::x_'~'_x not
R54873:54875 Equiv <> st1 var
R54879:54881 Equiv <> st3 var
R54860:54862 Equiv <> ::x_'~'_x not
R54857:54859 Equiv <> st2 var
R54863:54865 Equiv <> st3 var
R54844:54846 Equiv <> ::x_'~'_x not
R54841:54843 Equiv <> st1 var
R54847:54849 Equiv <> st2 var
prf 55028:55041 <> stequiv_update
R55063:55067 Imp <> state def
R55099:55100 SfLib <> id ind
R55106:55108 Coq.Init.Datatypes <> nat ind
R55128:55130 Equiv <> ::x_'~'_x not
R55114:55119 Imp <> update def
R55127:55127 Equiv <> n var
R55125:55125 Equiv <> X var
R55121:55123 Equiv <> st1 var
R55131:55136 Imp <> update def
R55144:55144 Equiv <> n var
R55142:55142 Equiv <> X var
R55138:55140 Equiv <> st2 var
R55076:55078 Equiv <> ::x_'~'_x not
R55073:55075 Equiv <> st1 var
R55079:55081 Equiv <> st2 var
prf 55389:55401 <> stequiv_aeval
R55423:55427 Imp <> state def
R55459:55462 Imp <> aexp ind
R55477:55479 Coq.Init.Logic <> :type_scope:x_'='_x not
R55466:55470 Imp <> aeval def
R55476:55476 Equiv <> a var
R55472:55474 Equiv <> st1 var
R55480:55484 Imp <> aeval def
R55490:55490 Equiv <> a var
R55486:55488 Equiv <> st2 var
R55437:55439 Equiv <> ::x_'~'_x not
R55434:55436 Equiv <> st1 var
R55440:55442 Equiv <> st2 var
prf 55606:55618 <> stequiv_beval
R55640:55644 Imp <> state def
R55676:55679 Imp <> bexp ind
R55694:55696 Coq.Init.Logic <> :type_scope:x_'='_x not
R55683:55687 Imp <> beval def
R55693:55693 Equiv <> b var
R55689:55691 Equiv <> st1 var
R55697:55701 Imp <> beval def
R55707:55707 Equiv <> b var
R55703:55705 Equiv <> st2 var
R55654:55656 Equiv <> ::x_'~'_x not
R55651:55653 Equiv <> st1 var
R55657:55659 Equiv <> st2 var
prf 55937:55949 <> stequiv_ceval
R55970:55974 Imp <> state def
R56006:56008 Imp <> com ind
R56018:56022 Imp <> state def
R56055:56061 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R56074:56080 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R56114:56114 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R56069:56073 Imp <> state def
R56081:56081 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R56097:56102 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R56083:56085 Imp <> ::x_'/'_x_'||'_x not
R56089:56092 Imp <> ::x_'/'_x_'||'_x not
R56082:56082 Equiv <> c var
R56086:56088 Equiv <> st2 var
R56093:56096 Equiv <> st2' var
R56107:56109 Equiv <> ::x_'~'_x not
R56103:56106 Equiv <> st1' var
R56110:56113 Equiv <> st2' var
R56032:56034 Imp <> ::x_'/'_x_'||'_x not
R56038:56041 Imp <> ::x_'/'_x_'||'_x not
R56031:56031 Equiv <> c var
R56035:56037 Equiv <> st1 var
R56042:56045 Equiv <> st1' var
R55983:55985 Equiv <> ::x_'~'_x not
R55980:55982 Equiv <> st1 var
R55986:55988 Equiv <> st2 var
R56328:56333 Imp <> update def
R56328:56333 Imp <> update def
R56405:56417 Equiv <> stequiv_aeval prfax
R56405:56417 Equiv <> stequiv_aeval prfax
R56446:56459 Equiv <> stequiv_update prfax
R56446:56459 Equiv <> stequiv_update prfax
R56637:56641 Imp <> E_Seq constr
R56637:56641 Imp <> E_Seq constr
R56792:56799 Imp <> E_IfTrue constr
R56792:56799 Imp <> E_IfTrue constr
R56833:56845 Equiv <> stequiv_beval prfax
R56833:56845 Equiv <> stequiv_beval prfax
R56996:57004 Imp <> E_IfFalse constr
R56996:57004 Imp <> E_IfFalse constr
R57037:57049 Equiv <> stequiv_beval prfax
R57037:57049 Equiv <> stequiv_beval prfax
R57149:57158 Imp <> E_WhileEnd constr
R57149:57158 Imp <> E_WhileEnd constr
R57191:57203 Equiv <> stequiv_beval prfax
R57191:57203 Equiv <> stequiv_beval prfax
R57407:57417 Imp <> E_WhileLoop constr
R57407:57417 Imp <> E_WhileLoop constr
R57468:57480 Equiv <> stequiv_beval prfax
R57468:57480 Equiv <> stequiv_beval prfax
ind 57950:57955 <> ceval'
constr 57996:58002 <> E_equiv
R57975:57979 Imp <> state def
R57966:57970 Imp <> state def
R57959:57961 Imp <> com ind
R58124:58129 Equiv <> ceval' ind
R58073:58075 Equiv <> ::x_'/'_x_'||'''_x not
R58078:58082 Equiv <> ::x_'/'_x_'||'''_x not
R58072:58072 Equiv <> c var
R58076:58077 Equiv <> st var
R58083:58086 Equiv <> st'' var
R58057:58059 Equiv <> ::x_'~'_x not
R58054:58056 Equiv <> st' var
R58060:58063 Equiv <> st'' var
R58033:58035 Imp <> ::x_'/'_x_'||'_x not
R58038:58041 Imp <> ::x_'/'_x_'||'_x not
R58032:58032 Equiv <> c var
R58036:58037 Equiv <> st var
R58042:58044 Equiv <> st' var
R58124:58129 Equiv <> ceval' ind
not 58098 <> ::x_'/'_x_'||'''_x
def 58219:58225 <> cequiv'
R58236:58238 Imp <> com ind
R58270:58274 Imp <> state def
R58282:58282 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R58298:58304 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R58320:58320 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R58285:58287 Equiv <> ::x_'/'_x_'||'''_x not
R58290:58294 Equiv <> ::x_'/'_x_'||'''_x not
R58283:58284 Equiv <> c1 var
R58288:58289 Equiv <> st var
R58295:58297 Equiv <> st' var
R58307:58309 Equiv <> ::x_'/'_x_'||'''_x not
R58312:58316 Equiv <> ::x_'/'_x_'||'''_x not
R58305:58306 Equiv <> c2 var
R58310:58311 Equiv <> st var
R58317:58319 Equiv <> st' var
prf 58492:58506 <> cequiv__cequiv'
R58525:58527 Imp <> com ind
R58549:58555 Equiv <> cequiv' def
R58560:58561 Equiv <> c2 var
R58557:58558 Equiv <> c1 var
R58533:58538 Equiv <> cequiv def
R58543:58544 Equiv <> c2 var
R58540:58541 Equiv <> c1 var
R58581:58586 Equiv <> cequiv def
R58589:58595 Equiv <> cequiv' def
R58647:58653 Equiv <> E_equiv constr
R58647:58653 Equiv <> E_equiv constr
R58749:58755 Equiv <> E_equiv constr
R58749:58755 Equiv <> E_equiv constr
def 58979:58998 <> identity_assignment'
R59004:59010 Equiv <> cequiv' def
R59019:59023 Imp <> ::x_'::='_x not
R59018:59018 Imp <> X def
R59024:59026 Imp <> AId constr
R59028:59028 Imp <> X def
R59012:59015 Imp <> ::'SKIP' not
R59050:59056 Equiv <> cequiv' def
R59185:59190 Imp <> update def
R59205:59205 Imp <> X def
R59197:59197 Imp <> X def
R59171:59177 Equiv <> E_equiv constr
R59185:59190 Imp <> update def
R59205:59205 Imp <> X def
R59197:59197 Imp <> X def
R59171:59177 Equiv <> E_equiv constr
R59250:59262 Equiv <> stequiv_trans prfax
R59250:59262 Equiv <> stequiv_trans prfax
R59290:59296 Equiv <> stequiv def
R59313:59323 Imp <> update_same thm
R59313:59323 Imp <> update_same thm
prf 60700:60730 <> swap_noninterfering_assignments
R60834:60839 Equiv <> cequiv def
R60883:60885 Imp <> ::x_';;'_x not
R60876:60880 Imp <> ::x_'::='_x not
R60874:60875 Equiv <> l2 var
R60881:60882 Equiv <> a2 var
R60888:60892 Imp <> ::x_'::='_x not
R60886:60887 Equiv <> l1 var
R60893:60894 Equiv <> a1 var
R60855:60857 Imp <> ::x_';;'_x not
R60848:60852 Imp <> ::x_'::='_x not
R60846:60847 Equiv <> l1 var
R60853:60854 Equiv <> a1 var
R60860:60864 Imp <> ::x_'::='_x not
R60858:60859 Equiv <> l2 var
R60865:60866 Equiv <> a2 var
R60802:60821 Equiv <> var_not_used_in_aexp ind
R60826:60827 Equiv <> a1 var
R60823:60824 Equiv <> l2 var
R60770:60789 Equiv <> var_not_used_in_aexp ind
R60794:60795 Equiv <> a2 var
R60791:60792 Equiv <> l1 var
R60757:60760 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R60755:60756 Equiv <> l1 var
R60761:60762 Equiv <> l2 var
