DIGEST 289f30d20f172a59232cb8f852a1336b
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
def 3825:3830 <> prog_a
R3834:3836 Imp <> com ind
R3843:3848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3876:3883 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3912:3917 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3849:3852 Imp <> BNot constr
R3855:3857 Imp <> BLe constr
R3868:3871 Imp <> ANum constr
R3860:3862 Imp <> AId constr
R3864:3864 Imp <> X def
R3885:3889 Imp <> ::x_'::='_x not
R3884:3884 Imp <> X def
R3890:3894 Imp <> APlus constr
R3905:3908 Imp <> ANum constr
R3897:3899 Imp <> AId constr
R3901:3901 Imp <> X def
def 3932:3937 <> prog_b
R3941:3943 Imp <> com ind
R4060:4064 Imp <> ::x_';;'_x not
R3950:3953 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3974:3983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4031:4042 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4055:4059 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3954:3956 Imp <> BEq constr
R3967:3970 Imp <> ANum constr
R3959:3961 Imp <> AId constr
R3963:3963 Imp <> X def
R4012:4018 Imp <> ::x_';;'_x not
R3985:3989 Imp <> ::x_'::='_x not
R3984:3984 Imp <> X def
R3990:3994 Imp <> APlus constr
R4005:4008 Imp <> ANum constr
R3997:3999 Imp <> AId constr
R4001:4001 Imp <> X def
R4020:4024 Imp <> ::x_'::='_x not
R4019:4019 Imp <> Y def
R4025:4028 Imp <> ANum constr
R4044:4048 Imp <> ::x_'::='_x not
R4043:4043 Imp <> Y def
R4049:4052 Imp <> ANum constr
R4093:4097 Imp <> ::x_';;'_x not
R4066:4070 Imp <> ::x_'::='_x not
R4065:4065 Imp <> X def
R4071:4076 Imp <> AMinus constr
R4087:4089 Imp <> AId constr
R4091:4091 Imp <> Y def
R4079:4081 Imp <> AId constr
R4083:4083 Imp <> X def
R4099:4103 Imp <> ::x_'::='_x not
R4098:4098 Imp <> Y def
R4104:4107 Imp <> ANum constr
def 4124:4129 <> prog_c
R4133:4135 Imp <> com ind
R4142:4145 Imp <> ::'SKIP' not
def 4160:4165 <> prog_d
R4169:4171 Imp <> com ind
R4178:4183 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4211:4218 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4263:4268 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4187 Imp <> BNot constr
R4190:4192 Imp <> BEq constr
R4203:4206 Imp <> ANum constr
R4195:4197 Imp <> AId constr
R4199:4199 Imp <> X def
R4220:4224 Imp <> ::x_'::='_x not
R4219:4219 Imp <> X def
R4225:4229 Imp <> APlus constr
R4256:4259 Imp <> ANum constr
R4232:4236 Imp <> AMult constr
R4247:4249 Imp <> AId constr
R4251:4251 Imp <> Y def
R4239:4241 Imp <> AId constr
R4243:4243 Imp <> X def
def 4283:4288 <> prog_e
R4292:4294 Imp <> com ind
R4302:4306 Imp <> ::x_'::='_x not
R4301:4301 Imp <> Y def
R4307:4310 Imp <> ANum constr
def 4327:4332 <> prog_f
R4336:4338 Imp <> com ind
R4373:4377 Imp <> ::x_';;'_x not
R4346:4350 Imp <> ::x_'::='_x not
R4345:4345 Imp <> Y def
R4351:4355 Imp <> APlus constr
R4366:4369 Imp <> ANum constr
R4358:4360 Imp <> AId constr
R4362:4362 Imp <> X def
R4378:4383 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4410:4417 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4446:4451 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4384:4387 Imp <> BNot constr
R4390:4392 Imp <> BEq constr
R4403:4405 Imp <> AId constr
R4407:4407 Imp <> Y def
R4395:4397 Imp <> AId constr
R4399:4399 Imp <> X def
R4419:4423 Imp <> ::x_'::='_x not
R4418:4418 Imp <> Y def
R4424:4428 Imp <> APlus constr
R4439:4442 Imp <> ANum constr
R4431:4433 Imp <> AId constr
R4435:4435 Imp <> X def
def 4466:4471 <> prog_g
R4475:4477 Imp <> com ind
R4484:4489 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4495:4502 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4507:4512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4490:4494 Imp <> BTrue constr
R4503:4506 Imp <> ::'SKIP' not
def 4527:4532 <> prog_h
R4536:4538 Imp <> com ind
R4545:4550 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4577:4584 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4613:4618 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4551:4554 Imp <> BNot constr
R4557:4559 Imp <> BEq constr
R4570:4572 Imp <> AId constr
R4574:4574 Imp <> X def
R4562:4564 Imp <> AId constr
R4566:4566 Imp <> X def
R4586:4590 Imp <> ::x_'::='_x not
R4585:4585 Imp <> X def
R4591:4595 Imp <> APlus constr
R4606:4609 Imp <> ANum constr
R4598:4600 Imp <> AId constr
R4602:4602 Imp <> X def
def 4633:4638 <> prog_i
R4642:4644 Imp <> com ind
R4651:4656 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4683:4690 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4719:4724 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4657:4660 Imp <> BNot constr
R4663:4665 Imp <> BEq constr
R4676:4678 Imp <> AId constr
R4680:4680 Imp <> Y def
R4668:4670 Imp <> AId constr
R4672:4672 Imp <> X def
R4692:4696 Imp <> ::x_'::='_x not
R4691:4691 Imp <> X def
R4697:4701 Imp <> APlus constr
R4712:4715 Imp <> ANum constr
R4704:4706 Imp <> AId constr
R4708:4708 Imp <> Y def
def 4739:4751 <> equiv_classes
R4755:4758 Coq.Init.Datatypes <> list ind
R4761:4764 Coq.Init.Datatypes <> list ind
R4766:4768 Imp <> com ind
R4793:4797 SfLib <> admit prfax
prf 5052:5065 <> aequiv_example
R5070:5075 Equiv <> aequiv def
R5103:5106 Imp <> ANum constr
R5078:5083 Imp <> AMinus constr
R5094:5096 Imp <> AId constr
R5098:5098 Imp <> X def
R5086:5088 Imp <> AId constr
R5090:5090 Imp <> X def
prf 5161:5174 <> bequiv_example
R5179:5184 Equiv <> bequiv def
R5226:5230 Imp <> BTrue constr
R5187:5189 Imp <> BEq constr
R5217:5220 Imp <> ANum constr
R5192:5197 Imp <> AMinus constr
R5208:5210 Imp <> AId constr
R5212:5212 Imp <> X def
R5200:5202 Imp <> AId constr
R5204:5204 Imp <> X def
R5262:5266 Imp <> beval def
R5279:5292 Equiv <> aequiv_example thm
R5279:5292 Equiv <> aequiv_example thm
prf 5452:5460 <> skip_left
R5475:5480 Equiv <> cequiv def
R5505:5505 Equiv <> c var
R5493:5495 Imp <> ::x_';;'_x not
R5489:5492 Imp <> ::'SKIP' not
R5496:5496 Equiv <> c var
R5683:5687 Imp <> E_Seq constr
R5683:5687 Imp <> E_Seq constr
R5708:5713 Imp <> E_Skip constr
R5708:5713 Imp <> E_Skip constr
prf 5879:5888 <> skip_right
R5903:5908 Equiv <> cequiv def
R5931:5931 Equiv <> c var
R5917:5919 Imp <> ::x_';;'_x not
R5916:5916 Equiv <> c var
R5920:5923 Imp <> ::'SKIP' not
R6045:6049 Imp <> E_Seq constr
R6045:6049 Imp <> E_Seq constr
R6076:6081 Imp <> E_Skip constr
R6076:6081 Imp <> E_Skip constr
prf 6199:6213 <> IFB_true_simple
R6232:6237 Equiv <> cequiv def
R6280:6281 Equiv <> c1 var
R6245:6248 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6254:6259 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6262:6267 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6270:6272 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6249:6253 Imp <> BTrue constr
R6260:6261 Equiv <> c1 var
R6268:6269 Equiv <> c2 var
R6414:6421 Imp <> E_IfTrue constr
R6414:6421 Imp <> E_IfTrue constr
prf 8344:8351 <> IFB_true
R8399:8404 Equiv <> cequiv def
R8449:8450 Equiv <> c1 var
R8415:8418 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8420:8425 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8428:8433 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8436:8438 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8419:8419 Equiv <> b var
R8426:8427 Equiv <> c1 var
R8434:8435 Equiv <> c2 var
R8375:8380 Equiv <> bequiv def
R8384:8388 Imp <> BTrue constr
R8382:8382 Equiv <> b var
R8651:8656 Equiv <> bequiv def
R8745:8752 Imp <> E_IfTrue constr
R8745:8752 Imp <> E_IfTrue constr
R8782:8787 Equiv <> bequiv def
prf 8896:8904 <> IFB_false
R8947:8952 Equiv <> cequiv def
R8991:8992 Equiv <> c2 var
R8960:8963 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8965:8970 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8973:8978 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8981:8983 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8964:8964 Equiv <> b var
R8971:8972 Equiv <> c1 var
R8979:8980 Equiv <> c2 var
R8925:8930 Equiv <> bequiv def
R8934:8939 Imp <> BFalse constr
R8932:8932 Equiv <> b var
R9061:9066 Equiv <> bequiv def
R9145:9153 Imp <> E_IfFalse constr
R9145:9153 Imp <> E_IfFalse constr
R9163:9168 Equiv <> bequiv def
prf 9386:9401 <> swap_if_branches
R9422:9427 Equiv <> cequiv def
R9465:9468 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9475:9480 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9483:9488 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9491:9493 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9469:9472 Imp <> BNot constr
R9474:9474 Equiv <> b var
R9481:9482 Equiv <> e2 var
R9489:9490 Equiv <> e1 var
R9434:9437 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9439:9444 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9447:9452 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9455:9457 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9438:9438 Equiv <> b var
R9445:9446 Equiv <> e1 var
R9453:9454 Equiv <> e2 var
R9559:9567 Imp <> E_IfFalse constr
R9559:9567 Imp <> E_IfFalse constr
R9620:9627 Imp <> E_IfTrue constr
R9620:9627 Imp <> E_IfTrue constr
R9702:9710 Imp <> E_IfFalse constr
R9702:9710 Imp <> E_IfFalse constr
R9738:9741 Coq.Init.Datatypes <> negb def
R9750:9762 Coq.Bool.Bool <> negb_true_iff thm
R9750:9762 Coq.Bool.Bool <> negb_true_iff thm
R9801:9808 Imp <> E_IfTrue constr
R9801:9808 Imp <> E_IfTrue constr
R9830:9843 Coq.Bool.Bool <> negb_false_iff thm
R9830:9843 Coq.Bool.Bool <> negb_false_iff thm
prf 10232:10242 <> WHILE_false
R10287:10292 Equiv <> cequiv def
R10327:10330 Imp <> ::'SKIP' not
R10302:10307 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10309:10312 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10314:10317 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10308:10308 Equiv <> b var
R10313:10313 Equiv <> c var
R10263:10268 Equiv <> bequiv def
R10272:10277 Imp <> BFalse constr
R10270:10270 Equiv <> b var
R10448:10453 Imp <> E_Skip constr
R10448:10453 Imp <> E_Skip constr
R10496:10501 Equiv <> bequiv def
R10595:10604 Imp <> E_WhileEnd constr
R10595:10604 Imp <> E_WhileEnd constr
prf 11946:11963 <> WHILE_true_nonterm
R12014:12016 Coq.Init.Logic <> :type_scope:'~'_x not
R12047:12048 Coq.Init.Logic <> :type_scope:'~'_x not
R12017:12017 Imp <> ::x_'/'_x_'||'_x not
R12034:12037 Imp <> ::x_'/'_x_'||'_x not
R12040:12043 Imp <> ::x_'/'_x_'||'_x not
R12018:12023 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12025:12028 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12030:12033 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12024:12024 Equiv <> b var
R12029:12029 Equiv <> c var
R12038:12039 Equiv <> st var
R12044:12046 Equiv <> st' var
R11991:11996 Equiv <> bequiv def
R12000:12004 Imp <> BTrue constr
R11998:11998 Equiv <> b var
R12131:12136 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12138:12141 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12143:12146 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12131:12136 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12138:12141 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12143:12146 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12458:12463 Equiv <> bequiv def
prf 12980:12989 <> WHILE_true
R13033:13038 Equiv <> cequiv def
R13075:13080 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13086:13089 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13094:13097 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13081:13085 Imp <> BTrue constr
R13090:13093 Imp <> ::'SKIP' not
R13049:13054 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13056:13059 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13061:13064 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13055:13055 Equiv <> b var
R13060:13060 Equiv <> c var
R13009:13014 Equiv <> bequiv def
R13018:13022 Imp <> BTrue constr
R13016:13016 Equiv <> b var
R13180:13197 Equiv <> WHILE_true_nonterm thm
R13180:13197 Equiv <> WHILE_true_nonterm thm
R13238:13255 Equiv <> WHILE_true_nonterm thm
R13238:13255 Equiv <> WHILE_true_nonterm thm
R13296:13313 Equiv <> WHILE_true_nonterm thm
R13296:13313 Equiv <> WHILE_true_nonterm thm
R13343:13348 Equiv <> bequiv def
prf 13389:13402 <> loop_unrolling
R13419:13424 Equiv <> cequiv def
R13454:13457 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13459:13465 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13486:13492 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13497:13499 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13458:13458 Equiv <> b var
R13467:13469 Imp <> ::x_';;'_x not
R13466:13466 Equiv <> c var
R13470:13475 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13477:13480 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13482:13485 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13476:13476 Equiv <> b var
R13481:13481 Equiv <> c var
R13493:13496 Imp <> ::'SKIP' not
R13431:13436 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13438:13441 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13443:13446 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13437:13437 Equiv <> b var
R13442:13442 Equiv <> c var
R13659:13667 Imp <> E_IfFalse constr
R13659:13667 Imp <> E_IfFalse constr
R13688:13693 Imp <> E_Skip constr
R13688:13693 Imp <> E_Skip constr
R13731:13738 Imp <> E_IfTrue constr
R13731:13738 Imp <> E_IfTrue constr
R13765:13769 Imp <> E_Seq constr
R13765:13769 Imp <> E_Seq constr
R13916:13926 Imp <> E_WhileLoop constr
R13916:13926 Imp <> E_WhileLoop constr
R14052:14061 Imp <> E_WhileEnd constr
R14052:14061 Imp <> E_WhileEnd constr
prf 14144:14152 <> seq_assoc
R14175:14180 Equiv <> cequiv def
R14200:14202 Imp <> ::x_';;'_x not
R14209:14209 Imp <> ::x_';;'_x not
R14198:14199 Equiv <> c1 var
R14205:14206 Imp <> ::x_';;'_x not
R14203:14204 Equiv <> c2 var
R14207:14208 Equiv <> c3 var
R14183:14183 Imp <> ::x_';;'_x not
R14190:14192 Imp <> ::x_';;'_x not
R14186:14187 Imp <> ::x_';;'_x not
R14184:14185 Equiv <> c1 var
R14188:14189 Equiv <> c2 var
R14193:14194 Equiv <> c3 var
R14315:14319 Imp <> E_Seq constr
R14315:14319 Imp <> E_Seq constr
R14361:14365 Imp <> E_Seq constr
R14361:14365 Imp <> E_Seq constr
R14467:14471 Imp <> E_Seq constr
R14467:14471 Imp <> E_Seq constr
R14501:14505 Imp <> E_Seq constr
R14501:14505 Imp <> E_Seq constr
prf 14886:14914 <> identity_assignment_first_try
R14928:14929 SfLib <> id ind
R14935:14940 Equiv <> cequiv def
R14956:14959 Imp <> ::'SKIP' not
R14944:14948 Imp <> ::x_'::='_x not
R14943:14943 Equiv <> X var
R14949:14951 Imp <> AId constr
R14953:14953 Equiv <> X var
R15065:15070 Imp <> update def
R15065:15070 Imp <> update def
ax 17104:17128 <> functional_extensionality
R17163:17163 Equiv <> Y var
R17158:17158 Equiv <> X var
R17203:17205 Coq.Init.Logic <> :type_scope:x_'='_x not
R17202:17202 Equiv <> f var
R17206:17206 Equiv <> g var
R17183:17183 Equiv <> X var
R17190:17192 Coq.Init.Logic <> :type_scope:x_'='_x not
R17187:17187 Equiv <> f var
R17189:17189 Equiv <> x var
R17193:17193 Equiv <> g var
R17195:17195 Equiv <> x var
prf 17489:17507 <> identity_assignment
R17521:17522 SfLib <> id ind
R17528:17533 Equiv <> cequiv def
R17557:17560 Imp <> ::'SKIP' not
R17541:17545 Imp <> ::x_'::='_x not
R17540:17540 Equiv <> X var
R17546:17548 Imp <> AId constr
R17550:17550 Equiv <> X var
R17665:17670 Imp <> update def
R17665:17670 Imp <> update def
R17730:17754 Equiv <> functional_extensionality prfax
R17730:17754 Equiv <> functional_extensionality prfax
R17805:17815 Imp <> update_same thm
R17805:17815 Imp <> update_same thm
R17895:17898 Coq.Init.Logic <> :type_scope:x_'='_x not
R17919:17919 Coq.Init.Logic <> :type_scope:x_'='_x not
R17899:17904 Imp <> update def
R17895:17898 Coq.Init.Logic <> :type_scope:x_'='_x not
R17919:17919 Coq.Init.Logic <> :type_scope:x_'='_x not
R17899:17904 Imp <> update def
R17939:17963 Equiv <> functional_extensionality prfax
R17939:17963 Equiv <> functional_extensionality prfax
R17992:18002 Imp <> update_same thm
R17992:18002 Imp <> update_same thm
prf 18144:18156 <> assign_aequiv
R18197:18202 Equiv <> cequiv def
R18211:18215 Imp <> ::x_'::='_x not
R18210:18210 Equiv <> X var
R18216:18216 Equiv <> e var
R18204:18207 Imp <> ::'SKIP' not
R18174:18179 Equiv <> aequiv def
R18189:18189 Equiv <> e var
R18182:18184 Imp <> AId constr
R18186:18186 Equiv <> X var
R18244:18249 Equiv <> aequiv def
R18318:18321 Coq.Init.Logic <> :type_scope:x_'='_x not
R18342:18342 Coq.Init.Logic <> :type_scope:x_'='_x not
R18322:18327 Imp <> update def
R18318:18321 Coq.Init.Logic <> :type_scope:x_'='_x not
R18342:18342 Coq.Init.Logic <> :type_scope:x_'='_x not
R18322:18327 Imp <> update def
R18354:18378 Equiv <> functional_extensionality prfax
R18354:18378 Equiv <> functional_extensionality prfax
R18397:18407 Imp <> update_same thm
R18397:18407 Imp <> update_same thm
R18531:18533 Coq.Init.Logic <> :type_scope:x_'='_x not
R18534:18539 Imp <> update def
R18547:18551 Imp <> aeval def
R18531:18533 Coq.Init.Logic <> :type_scope:x_'='_x not
R18534:18539 Imp <> update def
R18547:18551 Imp <> aeval def
R18586:18610 Equiv <> functional_extensionality prfax
R18586:18610 Equiv <> functional_extensionality prfax
R18629:18639 Imp <> update_same thm
R18629:18639 Imp <> update_same thm
prf 19264:19274 <> refl_aequiv
R19290:19293 Imp <> aexp ind
R19297:19302 Equiv <> aequiv def
R19306:19306 Equiv <> a var
R19304:19304 Equiv <> a var
prf 19357:19366 <> sym_aequiv
R19386:19389 Imp <> aexp ind
R19412:19417 Equiv <> aequiv def
R19422:19423 Equiv <> a1 var
R19419:19420 Equiv <> a2 var
R19396:19401 Equiv <> aequiv def
R19406:19407 Equiv <> a2 var
R19403:19404 Equiv <> a1 var
prf 19494:19505 <> trans_aequiv
R19528:19531 Imp <> aexp ind
R19570:19575 Equiv <> aequiv def
R19580:19581 Equiv <> a3 var
R19577:19578 Equiv <> a1 var
R19554:19559 Equiv <> aequiv def
R19564:19565 Equiv <> a3 var
R19561:19562 Equiv <> a2 var
R19538:19543 Equiv <> aequiv def
R19548:19549 Equiv <> a2 var
R19545:19546 Equiv <> a1 var
R19601:19606 Equiv <> aequiv def
prf 19701:19711 <> refl_bequiv
R19727:19730 Imp <> bexp ind
R19734:19739 Equiv <> bequiv def
R19743:19743 Equiv <> b var
R19741:19741 Equiv <> b var
R19762:19767 Equiv <> bequiv def
prf 19809:19818 <> sym_bequiv
R19838:19841 Imp <> bexp ind
R19864:19869 Equiv <> bequiv def
R19874:19875 Equiv <> b1 var
R19871:19872 Equiv <> b2 var
R19848:19853 Equiv <> bequiv def
R19858:19859 Equiv <> b2 var
R19855:19856 Equiv <> b1 var
R19894:19899 Equiv <> bequiv def
prf 19961:19972 <> trans_bequiv
R19995:19998 Imp <> bexp ind
R20037:20042 Equiv <> bequiv def
R20047:20048 Equiv <> b3 var
R20044:20045 Equiv <> b1 var
R20021:20026 Equiv <> bequiv def
R20031:20032 Equiv <> b3 var
R20028:20029 Equiv <> b2 var
R20005:20010 Equiv <> bequiv def
R20015:20016 Equiv <> b2 var
R20012:20013 Equiv <> b1 var
R20068:20073 Equiv <> bequiv def
prf 20168:20178 <> refl_cequiv
R20194:20196 Imp <> com ind
R20200:20205 Equiv <> cequiv def
R20209:20209 Equiv <> c var
R20207:20207 Equiv <> c var
R20228:20233 Equiv <> cequiv def
R20259:20266 Coq.Init.Logic <> iff_refl thm
R20259:20266 Coq.Init.Logic <> iff_refl thm
prf 20282:20291 <> sym_cequiv
R20311:20313 Imp <> com ind
R20336:20341 Equiv <> cequiv def
R20346:20347 Equiv <> c1 var
R20343:20344 Equiv <> c2 var
R20320:20325 Equiv <> cequiv def
R20330:20331 Equiv <> c2 var
R20327:20328 Equiv <> c1 var
R20366:20371 Equiv <> cequiv def
R20421:20425 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20409:20411 Imp <> ::x_'/'_x_'||'_x not
R20414:20417 Imp <> ::x_'/'_x_'||'_x not
R20428:20430 Imp <> ::x_'/'_x_'||'_x not
R20433:20436 Imp <> ::x_'/'_x_'||'_x not
R20421:20425 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20409:20411 Imp <> ::x_'/'_x_'||'_x not
R20414:20417 Imp <> ::x_'/'_x_'||'_x not
R20428:20430 Imp <> ::x_'/'_x_'||'_x not
R20433:20436 Imp <> ::x_'/'_x_'||'_x not
R20499:20505 Coq.Init.Logic <> iff_sym thm
R20499:20505 Coq.Init.Logic <> iff_sym thm
prf 20532:20540 <> iff_trans
R20606:20610 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20604:20605 Equiv <> P1 var
R20611:20612 Equiv <> P3 var
R20591:20595 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20589:20590 Equiv <> P2 var
R20596:20597 Equiv <> P3 var
R20576:20580 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20574:20575 Equiv <> P1 var
R20581:20582 Equiv <> P2 var
prf 20780:20791 <> trans_cequiv
R20814:20816 Imp <> com ind
R20855:20860 Equiv <> cequiv def
R20865:20866 Equiv <> c3 var
R20862:20863 Equiv <> c1 var
R20839:20844 Equiv <> cequiv def
R20849:20850 Equiv <> c3 var
R20846:20847 Equiv <> c2 var
R20823:20828 Equiv <> cequiv def
R20833:20834 Equiv <> c2 var
R20830:20831 Equiv <> c1 var
R20886:20891 Equiv <> cequiv def
R20952:20954 Imp <> ::x_'/'_x_'||'_x not
R20957:20960 Imp <> ::x_'/'_x_'||'_x not
R20934:20942 Equiv <> iff_trans thm
R20952:20954 Imp <> ::x_'/'_x_'||'_x not
R20957:20960 Imp <> ::x_'/'_x_'||'_x not
R20934:20942 Equiv <> iff_trans thm
prf 22319:22333 <> CAss_congruence
R22375:22380 Equiv <> cequiv def
R22395:22398 Imp <> CAss constr
R22402:22404 Equiv <> a1' var
R22400:22400 Equiv <> i var
R22383:22386 Imp <> CAss constr
R22390:22391 Equiv <> a1 var
R22388:22388 Equiv <> i var
R22356:22361 Equiv <> aequiv def
R22366:22368 Equiv <> a1' var
R22363:22364 Equiv <> a1 var
R22517:22521 Imp <> E_Ass constr
R22517:22521 Imp <> E_Ass constr
R22604:22608 Imp <> E_Ass constr
R22604:22608 Imp <> E_Ass constr
prf 24462:24478 <> CWhile_congruence
R24542:24547 Equiv <> cequiv def
R24571:24576 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24580:24583 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24587:24590 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24577:24579 Equiv <> b1' var
R24584:24586 Equiv <> c1' var
R24550:24555 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24558:24561 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24564:24567 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24556:24557 Equiv <> b1 var
R24562:24563 Equiv <> c1 var
R24523:24528 Equiv <> cequiv def
R24533:24535 Equiv <> c1' var
R24530:24531 Equiv <> c1 var
R24506:24511 Equiv <> bequiv def
R24516:24518 Equiv <> b1' var
R24513:24514 Equiv <> b1 var
R24634:24639 Equiv <> bequiv def
R24641:24646 Equiv <> cequiv def
R24738:24743 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24746:24749 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24752:24755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24738:24743 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24746:24749 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24752:24755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24866:24875 Imp <> E_WhileEnd constr
R24866:24875 Imp <> E_WhileEnd constr
R24941:24951 Imp <> E_WhileLoop constr
R24941:24951 Imp <> E_WhileLoop constr
R25208:25213 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25217:25220 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25224:25227 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25208:25213 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25217:25220 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25224:25227 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R25341:25350 Imp <> E_WhileEnd constr
R25341:25350 Imp <> E_WhileEnd constr
R25416:25426 Imp <> E_WhileLoop constr
R25416:25426 Imp <> E_WhileLoop constr
prf 25730:25744 <> CSeq_congruence
R25808:25813 Equiv <> cequiv def
R25828:25829 Imp <> ::x_';;'_x not
R25825:25827 Equiv <> c1' var
R25830:25832 Equiv <> c2' var
R25818:25819 Imp <> ::x_';;'_x not
R25816:25817 Equiv <> c1 var
R25820:25821 Equiv <> c2 var
R25789:25794 Equiv <> cequiv def
R25799:25801 Equiv <> c2' var
R25796:25797 Equiv <> c2 var
R25772:25777 Equiv <> cequiv def
R25782:25784 Equiv <> c1' var
R25779:25780 Equiv <> c1 var
R25853:25858 Equiv <> cequiv def
R25917:25921 Imp <> E_Seq constr
R25917:25921 Imp <> E_Seq constr
R26020:26024 Imp <> E_Seq constr
R26020:26024 Imp <> E_Seq constr
prf 26166:26179 <> CIf_congruence
R26263:26268 Equiv <> cequiv def
R26298:26301 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26304:26309 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26313:26318 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26322:26324 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26302:26303 Equiv <> b' var
R26310:26312 Equiv <> c1' var
R26319:26321 Equiv <> c2' var
R26271:26274 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26276:26281 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26284:26289 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26292:26294 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26275:26275 Equiv <> b var
R26282:26283 Equiv <> c1 var
R26290:26291 Equiv <> c2 var
R26244:26249 Equiv <> cequiv def
R26254:26256 Equiv <> c2' var
R26251:26252 Equiv <> c2 var
R26227:26232 Equiv <> cequiv def
R26237:26239 Equiv <> c1' var
R26234:26235 Equiv <> c1 var
R26212:26217 Equiv <> bequiv def
R26221:26222 Equiv <> b' var
R26219:26219 Equiv <> b var
R26344:26349 Equiv <> bequiv def
R26352:26357 Equiv <> cequiv def
R26418:26425 Imp <> E_IfTrue constr
R26418:26425 Imp <> E_IfTrue constr
R26491:26499 Imp <> E_IfFalse constr
R26491:26499 Imp <> E_IfFalse constr
R26588:26595 Imp <> E_IfTrue constr
R26588:26595 Imp <> E_IfTrue constr
R26657:26665 Imp <> E_IfFalse constr
R26657:26665 Imp <> E_IfFalse constr
R26737:26740 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R26741:26742 Coq.Lists.List ListNotations :list_scope:'['_']' not
def 26871:26888 <> congruence_example
R26893:26898 Equiv <> cequiv def
R27081:27088 Imp <> ::x_';;'_x not
R27070:27074 Imp <> ::x_'::='_x not
R27069:27069 Imp <> X def
R27075:27078 Imp <> ANum constr
R27089:27093 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27114:27132 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27161:27204 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27218:27225 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27094:27096 Imp <> BEq constr
R27107:27110 Imp <> ANum constr
R27099:27101 Imp <> AId constr
R27103:27103 Imp <> X def
R27134:27138 Imp <> ::x_'::='_x not
R27133:27133 Imp <> Y def
R27139:27144 Imp <> AMinus constr
R27155:27157 Imp <> AId constr
R27159:27159 Imp <> X def
R27147:27149 Imp <> AId constr
R27151:27151 Imp <> X def
R27206:27210 Imp <> ::x_'::='_x not
R27205:27205 Imp <> Y def
R27211:27214 Imp <> ANum constr
R26938:26945 Imp <> ::x_';;'_x not
R26927:26931 Imp <> ::x_'::='_x not
R26926:26926 Imp <> X def
R26932:26935 Imp <> ANum constr
R26946:26950 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26971:26989 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27002:27019 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27033:27040 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26951:26953 Imp <> BEq constr
R26964:26967 Imp <> ANum constr
R26956:26958 Imp <> AId constr
R26960:26960 Imp <> X def
R26991:26995 Imp <> ::x_'::='_x not
R26990:26990 Imp <> Y def
R26996:26999 Imp <> ANum constr
R27021:27025 Imp <> ::x_'::='_x not
R27020:27020 Imp <> Y def
R27026:27029 Imp <> ANum constr
R27244:27258 Equiv <> CSeq_congruence thm
R27244:27258 Equiv <> CSeq_congruence thm
R27272:27282 Equiv <> refl_cequiv thm
R27272:27282 Equiv <> refl_cequiv thm
R27296:27309 Equiv <> CIf_congruence thm
R27296:27309 Equiv <> CIf_congruence thm
R27324:27334 Equiv <> refl_bequiv thm
R27324:27334 Equiv <> refl_bequiv thm
R27349:27363 Equiv <> CAss_congruence thm
R27349:27363 Equiv <> CAss_congruence thm
R27373:27378 Equiv <> aequiv def
R27413:27422 Coq.Arith.Minus <> minus_diag thm
R27413:27422 Coq.Arith.Minus <> minus_diag thm
R27437:27447 Equiv <> refl_cequiv thm
R27437:27447 Equiv <> refl_cequiv thm
def 28011:28022 <> atrans_sound
R28042:28045 Imp <> aexp ind
R28034:28037 Imp <> aexp ind
R28072:28075 Imp <> aexp ind
R28083:28088 Equiv <> aequiv def
R28093:28098 Equiv <> atrans var
R28100:28100 Equiv <> a var
R28090:28090 Equiv <> a var
def 28116:28127 <> btrans_sound
R28147:28150 Imp <> bexp ind
R28139:28142 Imp <> bexp ind
R28177:28180 Imp <> bexp ind
R28188:28193 Equiv <> bequiv def
R28198:28203 Equiv <> btrans var
R28205:28205 Equiv <> b var
R28195:28195 Equiv <> b var
def 28221:28232 <> ctrans_sound
R28251:28253 Imp <> com ind
R28244:28246 Imp <> com ind
R28280:28282 Imp <> com ind
R28290:28295 Equiv <> cequiv def
R28300:28305 Equiv <> ctrans var
R28307:28307 Equiv <> c var
R28297:28297 Equiv <> c var
def 28625:28643 <> fold_constants_aexp
R28650:28653 Imp <> aexp ind
R28658:28661 Imp <> aexp ind
R28674:28674 Equiv <> a var
R28685:28688 Imp <> ANum constr
R28701:28704 Imp <> ANum constr
R28712:28714 Imp <> AId constr
R28728:28730 Imp <> AId constr
R28738:28742 Imp <> APlus constr
R28767:28767 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28790:28791 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28814:28814 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28768:28786 Equiv <> fold_constants_aexp def
R28792:28810 Equiv <> fold_constants_aexp def
R28829:28829 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28837:28838 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28846:28846 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28830:28833 Imp <> ANum constr
R28839:28842 Imp <> ANum constr
R28851:28854 Imp <> ANum constr
R28859:28861 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R28874:28874 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28878:28879 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28883:28883 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28888:28892 Imp <> APlus constr
R28916:28921 Imp <> AMinus constr
R28945:28945 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28968:28969 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28992:28992 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28946:28964 Equiv <> fold_constants_aexp def
R28970:28988 Equiv <> fold_constants_aexp def
R29007:29007 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29015:29016 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29024:29024 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29008:29011 Imp <> ANum constr
R29017:29020 Imp <> ANum constr
R29029:29032 Imp <> ANum constr
R29037:29039 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R29052:29052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29056:29057 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29061:29061 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29066:29071 Imp <> AMinus constr
R29095:29099 Imp <> AMult constr
R29124:29124 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29147:29148 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29171:29171 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29125:29143 Equiv <> fold_constants_aexp def
R29149:29167 Equiv <> fold_constants_aexp def
R29186:29186 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29194:29195 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29203:29203 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29187:29190 Imp <> ANum constr
R29196:29199 Imp <> ANum constr
R29208:29211 Imp <> ANum constr
R29216:29218 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R29231:29231 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29235:29236 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29240:29240 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29245:29249 Imp <> AMult constr
def 29285:29297 <> fold_aexp_ex1
R29373:29378 Coq.Init.Logic <> :type_scope:x_'='_x not
R29305:29323 Equiv <> fold_constants_aexp def
R29333:29337 Imp <> AMult constr
R29366:29368 Imp <> AId constr
R29370:29370 Imp <> X def
R29340:29344 Imp <> APlus constr
R29356:29359 Imp <> ANum constr
R29347:29350 Imp <> ANum constr
R29379:29383 Imp <> AMult constr
R29395:29397 Imp <> AId constr
R29399:29399 Imp <> X def
R29386:29389 Imp <> ANum constr
def 29742:29754 <> fold_aexp_ex2
R29847:29851 Coq.Init.Logic <> :type_scope:x_'='_x not
R29762:29780 Equiv <> fold_constants_aexp def
R29790:29795 Imp <> AMinus constr
R29806:29810 Imp <> APlus constr
R29839:29841 Imp <> AId constr
R29843:29843 Imp <> Y def
R29813:29817 Imp <> AMult constr
R29829:29832 Imp <> ANum constr
R29820:29823 Imp <> ANum constr
R29798:29800 Imp <> AId constr
R29802:29802 Imp <> X def
R29852:29857 Imp <> AMinus constr
R29868:29872 Imp <> APlus constr
R29884:29886 Imp <> AId constr
R29888:29888 Imp <> Y def
R29875:29878 Imp <> ANum constr
R29860:29862 Imp <> AId constr
R29864:29864 Imp <> X def
def 30115:30133 <> fold_constants_bexp
R30140:30143 Imp <> bexp ind
R30148:30151 Imp <> bexp ind
R30164:30164 Equiv <> b var
R30175:30179 Imp <> BTrue constr
R30191:30195 Imp <> BTrue constr
R30201:30206 Imp <> BFalse constr
R30217:30222 Imp <> BFalse constr
R30228:30230 Imp <> BEq constr
R30255:30255 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30278:30279 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30302:30302 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30256:30274 Equiv <> fold_constants_aexp def
R30280:30298 Equiv <> fold_constants_aexp def
R30317:30317 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30325:30326 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30334:30334 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30318:30321 Imp <> ANum constr
R30327:30330 Imp <> ANum constr
R30342:30348 Coq.Arith.EqNat <> beq_nat def
R30372:30377 Imp <> BFalse constr
R30361:30365 Imp <> BTrue constr
R30387:30387 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30391:30392 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30396:30396 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30401:30403 Imp <> BEq constr
R30427:30429 Imp <> BLe constr
R30454:30454 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30477:30478 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30501:30501 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30455:30473 Equiv <> fold_constants_aexp def
R30479:30497 Equiv <> fold_constants_aexp def
R30516:30516 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30524:30525 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30533:30533 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30517:30520 Imp <> ANum constr
R30526:30529 Imp <> ANum constr
R30541:30547 SfLib <> ble_nat def
R30571:30576 Imp <> BFalse constr
R30560:30564 Imp <> BTrue constr
R30586:30586 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30590:30591 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30595:30595 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30600:30602 Imp <> BLe constr
R30626:30629 Imp <> BNot constr
R30652:30670 Equiv <> fold_constants_bexp def
R30689:30693 Imp <> BTrue constr
R30698:30703 Imp <> BFalse constr
R30713:30718 Imp <> BFalse constr
R30723:30727 Imp <> BTrue constr
R30744:30747 Imp <> BNot constr
R30767:30770 Imp <> BAnd constr
R30795:30795 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30818:30819 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30842:30842 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30796:30814 Equiv <> fold_constants_bexp def
R30820:30838 Equiv <> fold_constants_bexp def
R30857:30857 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30863:30864 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30870:30870 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30858:30862 Imp <> BTrue constr
R30865:30869 Imp <> BTrue constr
R30875:30879 Imp <> BTrue constr
R30889:30889 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30895:30896 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30903:30903 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30890:30894 Imp <> BTrue constr
R30897:30902 Imp <> BFalse constr
R30908:30913 Imp <> BFalse constr
R30923:30923 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30930:30931 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30937:30937 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30924:30929 Imp <> BFalse constr
R30932:30936 Imp <> BTrue constr
R30942:30947 Imp <> BFalse constr
R30957:30957 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30964:30965 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30972:30972 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30958:30963 Imp <> BFalse constr
R30966:30971 Imp <> BFalse constr
R30977:30982 Imp <> BFalse constr
R30992:30992 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30996:30997 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31001:31001 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31006:31009 Imp <> BAnd constr
def 31045:31057 <> fold_bexp_ex1
R31124:31128 Coq.Init.Logic <> :type_scope:x_'='_x not
R31065:31083 Equiv <> fold_constants_bexp def
R31086:31089 Imp <> BAnd constr
R31098:31101 Imp <> BNot constr
R31104:31107 Imp <> BAnd constr
R31116:31120 Imp <> BTrue constr
R31109:31114 Imp <> BFalse constr
R31091:31095 Imp <> BTrue constr
R31129:31133 Imp <> BTrue constr
def 31170:31182 <> fold_bexp_ex2
R31335:31339 Coq.Init.Logic <> :type_scope:x_'='_x not
R31190:31208 Equiv <> fold_constants_bexp def
R31218:31221 Imp <> BAnd constr
R31259:31261 Imp <> BEq constr
R31291:31296 Imp <> AMinus constr
R31308:31312 Imp <> APlus constr
R31324:31327 Imp <> ANum constr
R31315:31318 Imp <> ANum constr
R31299:31302 Imp <> ANum constr
R31264:31267 Imp <> ANum constr
R31224:31226 Imp <> BEq constr
R31237:31239 Imp <> AId constr
R31241:31241 Imp <> Y def
R31229:31231 Imp <> AId constr
R31233:31233 Imp <> X def
R31340:31343 Imp <> BAnd constr
R31367:31371 Imp <> BTrue constr
R31346:31348 Imp <> BEq constr
R31359:31361 Imp <> AId constr
R31363:31363 Imp <> Y def
R31351:31353 Imp <> AId constr
R31355:31355 Imp <> X def
def 31536:31553 <> fold_constants_com
R31560:31562 Imp <> com ind
R31567:31569 Imp <> com ind
R31582:31582 Equiv <> c var
R31593:31596 Imp <> ::'SKIP' not
R31613:31616 Imp <> ::'SKIP' not
R31623:31627 Imp <> ::x_'::='_x not
R31641:31644 Imp <> CAss constr
R31649:31667 Equiv <> fold_constants_aexp def
R31678:31681 Imp <> ::x_';;'_x not
R31696:31696 Imp <> ::x_';;'_x not
R31718:31723 Imp <> ::x_';;'_x not
R31745:31745 Imp <> ::x_';;'_x not
R31697:31714 Equiv <> fold_constants_com def
R31724:31741 Equiv <> fold_constants_com def
R31751:31754 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31756:31761 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31764:31769 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31772:31774 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31792:31810 Equiv <> fold_constants_bexp def
R31827:31831 Imp <> BTrue constr
R31836:31853 Equiv <> fold_constants_com def
R31866:31871 Imp <> BFalse constr
R31876:31893 Equiv <> fold_constants_com def
R31912:31915 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31918:31923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31945:31972 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31994:31996 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31924:31941 Equiv <> fold_constants_com def
R31973:31990 Equiv <> fold_constants_com def
R32012:32017 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32019:32022 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32024:32027 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32045:32063 Equiv <> fold_constants_bexp def
R32080:32084 Imp <> BTrue constr
R32089:32094 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32100:32103 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32108:32111 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32095:32099 Imp <> BTrue constr
R32104:32107 Imp <> ::'SKIP' not
R32121:32126 Imp <> BFalse constr
R32131:32134 Imp <> ::'SKIP' not
R32150:32155 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32158:32162 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32183:32187 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32163:32180 Equiv <> fold_constants_com def
R32182:32182 Equiv <> c var
def 32226:32237 <> fold_com_ex1
R32693:32733 Coq.Init.Logic <> :type_scope:x_'='_x not
R32995:32995 Coq.Init.Logic <> :type_scope:x_'='_x not
R32243:32260 Equiv <> fold_constants_com def
R32325:32332 Imp <> ::x_';;'_x not
R32297:32301 Imp <> ::x_'::='_x not
R32296:32296 Imp <> X def
R32302:32306 Imp <> APlus constr
R32318:32321 Imp <> ANum constr
R32309:32312 Imp <> ANum constr
R32362:32369 Imp <> ::x_';;'_x not
R32334:32338 Imp <> ::x_'::='_x not
R32333:32333 Imp <> Y def
R32339:32344 Imp <> AMinus constr
R32355:32358 Imp <> ANum constr
R32347:32349 Imp <> AId constr
R32351:32351 Imp <> X def
R32484:32491 Imp <> ::x_';;'_x not
R32370:32373 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32428:32440 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32445:32463 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32476:32483 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32374:32376 Imp <> BEq constr
R32404:32408 Imp <> APlus constr
R32420:32423 Imp <> ANum constr
R32411:32414 Imp <> ANum constr
R32379:32384 Imp <> AMinus constr
R32395:32397 Imp <> AId constr
R32399:32399 Imp <> Y def
R32387:32389 Imp <> AId constr
R32391:32391 Imp <> X def
R32441:32444 Imp <> ::'SKIP' not
R32465:32469 Imp <> ::x_'::='_x not
R32464:32464 Imp <> Y def
R32470:32473 Imp <> ANum constr
R32608:32615 Imp <> ::x_';;'_x not
R32492:32495 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32552:32564 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32577:32594 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32599:32607 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32496:32498 Imp <> BLe constr
R32510:32515 Imp <> AMinus constr
R32527:32531 Imp <> APlus constr
R32543:32546 Imp <> ANum constr
R32534:32537 Imp <> ANum constr
R32518:32521 Imp <> ANum constr
R32501:32504 Imp <> ANum constr
R32566:32570 Imp <> ::x_'::='_x not
R32565:32565 Imp <> Y def
R32571:32574 Imp <> ANum constr
R32595:32598 Imp <> ::'SKIP' not
R32616:32621 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32642:32653 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32682:32691 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32622:32624 Imp <> BEq constr
R32635:32638 Imp <> ANum constr
R32627:32629 Imp <> AId constr
R32631:32631 Imp <> Y def
R32655:32659 Imp <> ::x_'::='_x not
R32654:32654 Imp <> X def
R32660:32664 Imp <> APlus constr
R32675:32678 Imp <> ANum constr
R32667:32669 Imp <> AId constr
R32671:32671 Imp <> X def
R32746:32753 Imp <> ::x_';;'_x not
R32735:32739 Imp <> ::x_'::='_x not
R32734:32734 Imp <> X def
R32740:32743 Imp <> ANum constr
R32783:32790 Imp <> ::x_';;'_x not
R32755:32759 Imp <> ::x_'::='_x not
R32754:32754 Imp <> Y def
R32760:32765 Imp <> AMinus constr
R32776:32779 Imp <> ANum constr
R32768:32770 Imp <> AId constr
R32772:32772 Imp <> X def
R32891:32898 Imp <> ::x_';;'_x not
R32791:32794 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32832:32844 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32849:32868 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32881:32890 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32795:32797 Imp <> BEq constr
R32825:32828 Imp <> ANum constr
R32800:32805 Imp <> AMinus constr
R32816:32818 Imp <> AId constr
R32820:32820 Imp <> Y def
R32808:32810 Imp <> AId constr
R32812:32812 Imp <> X def
R32845:32848 Imp <> ::'SKIP' not
R32870:32874 Imp <> ::x_'::='_x not
R32869:32869 Imp <> Y def
R32875:32878 Imp <> ANum constr
R32911:32918 Imp <> ::x_';;'_x not
R32900:32904 Imp <> ::x_'::='_x not
R32899:32899 Imp <> Y def
R32905:32908 Imp <> ANum constr
R32919:32924 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32945:32956 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32985:32994 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32925:32927 Imp <> BEq constr
R32938:32941 Imp <> ANum constr
R32930:32932 Imp <> AId constr
R32934:32934 Imp <> Y def
R32958:32962 Imp <> ::x_'::='_x not
R32957:32957 Imp <> X def
R32963:32967 Imp <> APlus constr
R32978:32981 Imp <> ANum constr
R32970:32972 Imp <> AId constr
R32974:32974 Imp <> X def
prf 33245:33269 <> fold_constants_aexp_sound
R33276:33287 Equiv <> atrans_sound def
R33289:33307 Equiv <> fold_constants_aexp def
R33326:33337 Equiv <> atrans_sound def
R33357:33362 Equiv <> aequiv def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33791:33809 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
R33835:33853 Equiv <> fold_constants_aexp def
prf 36855:36879 <> fold_constants_bexp_sound
R36885:36896 Equiv <> btrans_sound def
R36898:36916 Equiv <> fold_constants_bexp def
R36935:36946 Equiv <> btrans_sound def
R36966:36971 Equiv <> bequiv def
R37482:37500 Equiv <> fold_constants_aexp def
R37482:37500 Equiv <> fold_constants_aexp def
R37539:37557 Equiv <> fold_constants_aexp def
R37539:37557 Equiv <> fold_constants_aexp def
R37595:37599 Imp <> aeval def
R37614:37618 Imp <> aeval def
R37661:37685 Equiv <> fold_constants_aexp_sound thm
R37614:37618 Imp <> aeval def
R37595:37599 Imp <> aeval def
R37661:37685 Equiv <> fold_constants_aexp_sound thm
R37715:37719 Imp <> aeval def
R37734:37738 Imp <> aeval def
R37781:37805 Equiv <> fold_constants_aexp_sound thm
R37734:37738 Imp <> aeval def
R37715:37719 Imp <> aeval def
R37781:37805 Equiv <> fold_constants_aexp_sound thm
R37996:38002 Coq.Arith.EqNat <> beq_nat def
R37996:38002 Coq.Arith.EqNat <> beq_nat def
R38106:38124 Equiv <> fold_constants_bexp def
R38106:38124 Equiv <> fold_constants_bexp def
R38237:38255 Equiv <> fold_constants_bexp def
R38237:38255 Equiv <> fold_constants_bexp def
R38295:38313 Equiv <> fold_constants_bexp def
R38295:38313 Equiv <> fold_constants_bexp def
prf 38556:38579 <> fold_constants_com_sound
R38586:38597 Equiv <> ctrans_sound def
R38599:38616 Equiv <> fold_constants_com def
R38636:38647 Equiv <> ctrans_sound def
R38721:38731 Equiv <> refl_cequiv thm
R38721:38731 Equiv <> refl_cequiv thm
R38754:38768 Equiv <> CAss_congruence thm
R38754:38768 Equiv <> CAss_congruence thm
R38777:38801 Equiv <> fold_constants_aexp_sound thm
R38777:38801 Equiv <> fold_constants_aexp_sound thm
R38823:38837 Equiv <> CSeq_congruence thm
R38823:38837 Equiv <> CSeq_congruence thm
R38879:38884 Equiv <> bequiv def
R38889:38907 Equiv <> fold_constants_bexp def
R38879:38884 Equiv <> bequiv def
R38889:38907 Equiv <> fold_constants_bexp def
R38951:38975 Equiv <> fold_constants_bexp_sound thm
R38951:38975 Equiv <> fold_constants_bexp_sound thm
R38992:39010 Equiv <> fold_constants_bexp def
R39184:39197 Equiv <> CIf_congruence thm
R38992:39010 Equiv <> fold_constants_bexp def
R39184:39197 Equiv <> CIf_congruence thm
R39184:39197 Equiv <> CIf_congruence thm
R39184:39197 Equiv <> CIf_congruence thm
R39184:39197 Equiv <> CIf_congruence thm
R39184:39197 Equiv <> CIf_congruence thm
R39184:39197 Equiv <> CIf_congruence thm
R39252:39263 Equiv <> trans_cequiv thm
R39252:39263 Equiv <> trans_cequiv thm
R39302:39309 Equiv <> IFB_true thm
R39302:39309 Equiv <> IFB_true thm
R39364:39375 Equiv <> trans_cequiv thm
R39364:39375 Equiv <> trans_cequiv thm
R39414:39422 Equiv <> IFB_false thm
R39414:39422 Equiv <> IFB_false thm
def 41857:41866 <> subst_aexp
R41873:41874 SfLib <> id ind
R41882:41885 Imp <> aexp ind
R41893:41896 Imp <> aexp ind
R41901:41904 Imp <> aexp ind
R41917:41917 Equiv <> a var
R41928:41931 Imp <> ANum constr
R41944:41947 Imp <> ANum constr
R41955:41957 Imp <> AId constr
R41974:41982 SfLib <> eq_id_dec thm
R41984:41984 Equiv <> i var
R42001:42003 Imp <> AId constr
R41994:41994 Equiv <> u var
R42012:42016 Imp <> APlus constr
R42028:42032 Imp <> APlus constr
R42055:42064 Equiv <> subst_aexp def
R42068:42068 Equiv <> u var
R42066:42066 Equiv <> i var
R42035:42044 Equiv <> subst_aexp def
R42048:42048 Equiv <> u var
R42046:42046 Equiv <> i var
R42078:42083 Imp <> AMinus constr
R42094:42099 Imp <> AMinus constr
R42122:42131 Equiv <> subst_aexp def
R42135:42135 Equiv <> u var
R42133:42133 Equiv <> i var
R42102:42111 Equiv <> subst_aexp def
R42115:42115 Equiv <> u var
R42113:42113 Equiv <> i var
R42145:42149 Imp <> AMult constr
R42161:42165 Imp <> AMult constr
R42188:42197 Equiv <> subst_aexp def
R42201:42201 Equiv <> u var
R42199:42199 Equiv <> i var
R42168:42177 Equiv <> subst_aexp def
R42181:42181 Equiv <> u var
R42179:42179 Equiv <> i var
def 42223:42235 <> subst_aexp_ex
R42305:42310 Coq.Init.Logic <> :type_scope:x_'='_x not
R42352:42352 Coq.Init.Logic <> :type_scope:x_'='_x not
R42241:42250 Equiv <> subst_aexp def
R42283:42287 Imp <> APlus constr
R42298:42300 Imp <> AId constr
R42302:42302 Imp <> X def
R42290:42292 Imp <> AId constr
R42294:42294 Imp <> Y def
R42255:42259 Imp <> APlus constr
R42272:42275 Imp <> ANum constr
R42262:42265 Imp <> ANum constr
R42252:42252 Imp <> X def
R42311:42315 Imp <> APlus constr
R42326:42330 Imp <> APlus constr
R42343:42346 Imp <> ANum constr
R42333:42336 Imp <> ANum constr
R42318:42320 Imp <> AId constr
R42322:42322 Imp <> Y def
def 42548:42567 <> subst_equiv_property
R42594:42599 Equiv <> cequiv def
R42644:42646 Imp <> ::x_';;'_x not
R42637:42641 Imp <> ::x_'::='_x not
R42635:42636 Equiv <> i1 var
R42642:42643 Equiv <> a1 var
R42649:42653 Imp <> ::x_'::='_x not
R42647:42648 Equiv <> i2 var
R42654:42663 Equiv <> subst_aexp def
R42671:42672 Equiv <> a2 var
R42668:42669 Equiv <> a1 var
R42665:42666 Equiv <> i1 var
R42611:42613 Imp <> ::x_';;'_x not
R42604:42608 Imp <> ::x_'::='_x not
R42602:42603 Equiv <> i1 var
R42609:42610 Equiv <> a1 var
R42616:42620 Imp <> ::x_'::='_x not
R42614:42615 Equiv <> i2 var
R42621:42622 Equiv <> a2 var
prf 43927:43939 <> subst_inequiv
R43946:43947 Coq.Init.Logic <> :type_scope:'~'_x not
R43948:43967 Equiv <> subst_equiv_property def
R43986:44005 Equiv <> subst_equiv_property def
R44216:44231 Imp <> ::x_';;'_x not
R44189:44193 Imp <> ::x_'::='_x not
R44188:44188 Imp <> X def
R44194:44198 Imp <> APlus constr
R44209:44212 Imp <> ANum constr
R44201:44203 Imp <> AId constr
R44205:44205 Imp <> X def
R44233:44237 Imp <> ::x_'::='_x not
R44232:44232 Imp <> Y def
R44238:44240 Imp <> AId constr
R44242:44242 Imp <> X def
R44216:44231 Imp <> ::x_';;'_x not
R44189:44193 Imp <> ::x_'::='_x not
R44188:44188 Imp <> X def
R44194:44198 Imp <> APlus constr
R44209:44212 Imp <> ANum constr
R44201:44203 Imp <> AId constr
R44205:44205 Imp <> X def
R44233:44237 Imp <> ::x_'::='_x not
R44232:44232 Imp <> Y def
R44238:44240 Imp <> AId constr
R44242:44242 Imp <> X def
R44299:44314 Imp <> ::x_';;'_x not
R44272:44276 Imp <> ::x_'::='_x not
R44271:44271 Imp <> X def
R44277:44281 Imp <> APlus constr
R44292:44295 Imp <> ANum constr
R44284:44286 Imp <> AId constr
R44288:44288 Imp <> X def
R44316:44320 Imp <> ::x_'::='_x not
R44315:44315 Imp <> Y def
R44321:44325 Imp <> APlus constr
R44336:44339 Imp <> ANum constr
R44328:44330 Imp <> AId constr
R44332:44332 Imp <> X def
R44299:44314 Imp <> ::x_';;'_x not
R44272:44276 Imp <> ::x_'::='_x not
R44271:44271 Imp <> X def
R44277:44281 Imp <> APlus constr
R44292:44295 Imp <> ANum constr
R44284:44286 Imp <> AId constr
R44288:44288 Imp <> X def
R44316:44320 Imp <> ::x_'::='_x not
R44315:44315 Imp <> Y def
R44321:44325 Imp <> APlus constr
R44336:44339 Imp <> ANum constr
R44328:44330 Imp <> AId constr
R44332:44332 Imp <> X def
R44369:44374 Equiv <> cequiv def
R44369:44374 Equiv <> cequiv def
R44594:44599 Imp <> update def
R44626:44626 Imp <> Y def
R44602:44607 Imp <> update def
R44621:44621 Imp <> X def
R44609:44619 Imp <> empty_state def
R44594:44599 Imp <> update def
R44626:44626 Imp <> Y def
R44602:44607 Imp <> update def
R44621:44621 Imp <> X def
R44609:44619 Imp <> empty_state def
R44651:44656 Imp <> update def
R44683:44683 Imp <> Y def
R44659:44664 Imp <> update def
R44678:44678 Imp <> X def
R44666:44676 Imp <> empty_state def
R44651:44656 Imp <> update def
R44683:44683 Imp <> Y def
R44659:44664 Imp <> update def
R44678:44678 Imp <> X def
R44666:44676 Imp <> empty_state def
R44712:44714 Imp <> ::x_'/'_x_'||'_x not
R44726:44729 Imp <> ::x_'/'_x_'||'_x not
R44715:44725 Imp <> empty_state def
R44752:44754 Imp <> ::x_'/'_x_'||'_x not
R44766:44769 Imp <> ::x_'/'_x_'||'_x not
R44755:44765 Imp <> empty_state def
R44823:44828 Imp <> update def
R44842:44842 Imp <> X def
R44830:44840 Imp <> empty_state def
R44803:44807 Imp <> E_Seq constr
R44863:44867 Imp <> E_Ass constr
R44712:44714 Imp <> ::x_'/'_x_'||'_x not
R44726:44729 Imp <> ::x_'/'_x_'||'_x not
R44715:44725 Imp <> empty_state def
R44752:44754 Imp <> ::x_'/'_x_'||'_x not
R44766:44769 Imp <> ::x_'/'_x_'||'_x not
R44755:44765 Imp <> empty_state def
R44752:44754 Imp <> ::x_'/'_x_'||'_x not
R44766:44769 Imp <> ::x_'/'_x_'||'_x not
R44755:44765 Imp <> empty_state def
R44823:44828 Imp <> update def
R44842:44842 Imp <> X def
R44830:44840 Imp <> empty_state def
R44803:44807 Imp <> E_Seq constr
R44863:44867 Imp <> E_Ass constr
R44863:44867 Imp <> E_Ass constr
R44823:44828 Imp <> update def
R44842:44842 Imp <> X def
R44830:44840 Imp <> empty_state def
R44803:44807 Imp <> E_Seq constr
R44863:44867 Imp <> E_Ass constr
R44863:44867 Imp <> E_Ass constr
R44823:44828 Imp <> update def
R44842:44842 Imp <> X def
R44830:44840 Imp <> empty_state def
R44803:44807 Imp <> E_Seq constr
R44863:44867 Imp <> E_Ass constr
R44863:44867 Imp <> E_Ass constr
R44823:44828 Imp <> update def
R44842:44842 Imp <> X def
R44830:44840 Imp <> empty_state def
R44803:44807 Imp <> E_Seq constr
R45022:45024 Coq.Init.Logic <> :type_scope:x_'='_x not
R45045:45063 Imp <> ceval_deterministic thm
R45068:45078 Imp <> empty_state def
R45022:45024 Coq.Init.Logic <> :type_scope:x_'='_x not
R45045:45063 Imp <> ceval_deterministic thm
R45068:45078 Imp <> empty_state def
R45120:45122 Coq.Init.Logic <> :type_scope:x_'='_x not
R45119:45119 Imp <> Y def
R45127:45127 Imp <> Y def
R45120:45122 Coq.Init.Logic <> :type_scope:x_'='_x not
R45119:45119 Imp <> Y def
R45127:45127 Imp <> Y def
ind 45535:45554 <> var_not_used_in_aexp
constr 45585:45590 <> VNUNum
constr 45639:45643 <> VNUId
constr 45701:45707 <> VNUPlus
constr 45842:45849 <> VNUMinus
constr 45985:45991 <> VNUMult
R45559:45560 SfLib <> id ind
R45565:45568 Imp <> aexp ind
R45603:45622 Equiv <> var_not_used_in_aexp ind
R45627:45630 Imp <> ANum constr
R45632:45632 Equiv <> n var
R45666:45685 Equiv <> var_not_used_in_aexp ind
R45690:45692 Imp <> AId constr
R45694:45694 Equiv <> Y var
R45657:45660 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R45661:45661 Equiv <> Y var
R45801:45820 Equiv <> var_not_used_in_aexp ind
R45825:45829 Imp <> APlus constr
R45834:45835 Equiv <> a2 var
R45831:45832 Equiv <> a1 var
R45766:45785 Equiv <> var_not_used_in_aexp ind
R45789:45790 Equiv <> a2 var
R45731:45750 Equiv <> var_not_used_in_aexp ind
R45754:45755 Equiv <> a1 var
R45943:45962 Equiv <> var_not_used_in_aexp ind
R45967:45972 Imp <> AMinus constr
R45977:45978 Equiv <> a2 var
R45974:45975 Equiv <> a1 var
R45908:45927 Equiv <> var_not_used_in_aexp ind
R45931:45932 Equiv <> a2 var
R45873:45892 Equiv <> var_not_used_in_aexp ind
R45896:45897 Equiv <> a1 var
R46085:46104 Equiv <> var_not_used_in_aexp ind
R46109:46113 Imp <> AMult constr
R46118:46119 Equiv <> a2 var
R46115:46116 Equiv <> a1 var
R46050:46069 Equiv <> var_not_used_in_aexp ind
R46073:46074 Equiv <> a2 var
R46015:46034 Equiv <> var_not_used_in_aexp ind
R46038:46039 Equiv <> a1 var
prf 46130:46144 <> aeval_weakening
R46222:46224 Coq.Init.Logic <> :type_scope:x_'='_x not
R46198:46202 Imp <> aeval def
R46221:46221 Equiv <> a var
R46205:46210 Imp <> update def
R46217:46218 Equiv <> ni var
R46215:46215 Equiv <> i var
R46212:46213 Equiv <> st var
R46225:46229 Imp <> aeval def
R46234:46234 Equiv <> a var
R46231:46232 Equiv <> st var
R46168:46187 Equiv <> var_not_used_in_aexp ind
R46191:46191 Equiv <> a var
R46189:46189 Equiv <> i var
prf 46544:46559 <> inequiv_exercise
R46565:46566 Coq.Init.Logic <> :type_scope:'~'_x not
R46567:46572 Equiv <> cequiv def
R46600:46603 Imp <> ::'SKIP' not
R46575:46580 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46586:46589 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46594:46597 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46581:46585 Imp <> BTrue constr
R46590:46593 Imp <> ::'SKIP' not
mod 48633:48636 <> Himp
ind 48741:48743 Himp com
constr 48759:48763 Himp CSkip
constr 48775:48778 Himp CAss
constr 48804:48807 Himp CSeq
constr 48833:48835 Himp CIf
constr 48869:48874 Himp CWhile
constr 48901:48906 Himp CHavoc
R48767:48769 Equiv <> com ind
R48796:48798 Equiv <> com ind
R48788:48791 Imp <> aexp ind
R48782:48783 SfLib <> id ind
R48825:48827 Equiv <> com ind
R48818:48820 Equiv <> com ind
R48811:48813 Equiv <> com ind
R48861:48863 Equiv <> com ind
R48854:48856 Equiv <> com ind
R48847:48849 Equiv <> com ind
R48839:48842 Imp <> bexp ind
R48893:48895 Equiv <> com ind
R48886:48888 Equiv <> com ind
R48878:48881 Imp <> bexp ind
R48916:48918 Equiv <> com ind
R48910:48911 SfLib <> id ind
R49165:49169 Equiv Himp CSkip constr
not 49151 Himp ::'SKIP'
R49199:49202 Equiv Himp CAss constr
not 49181 Himp ::x_'::='_x
R49250:49253 Equiv Himp CSeq constr
not 49233 Himp ::x_';;'_x
R49338:49343 Equiv Himp CWhile constr
not 49307 Himp ::'WHILE'_x_'DO'_x_'END'
R49437:49439 Equiv Himp CIf constr
not 49395 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R49512:49517 Equiv Himp CHavoc constr
not 49496 Himp ::'HAVOC'_x
ind 49928:49932 Himp ceval
constr 49973:49978 Himp E_Skip
constr 50021:50025 Himp E_Ass
constr 50149:50153 Himp E_Seq
constr 50279:50286 Himp E_IfTrue
constr 50455:50463 Himp E_IfFalse
constr 50635:50644 Himp E_WhileEnd
constr 50768:50778 Himp E_WhileLoop
R49952:49956 Imp <> state def
R49943:49947 Imp <> state def
R49936:49938 Equiv Himp com ind
R51072:51076 Equiv <> ceval ind
R49994:49998 Imp <> state def
R50005:50007 Equiv Himp ::x_'/'_x_'||'_x not
R50010:50013 Equiv Himp ::x_'/'_x_'||'_x not
R50001:50004 Equiv Himp ::'SKIP' not
R50008:50009 Equiv <> st var
R50014:50015 Equiv <> st var
R50042:50046 Imp <> state def
R50055:50058 Imp <> aexp ind
R50066:50068 Coq.Init.Datatypes <> nat ind
R50076:50077 SfLib <> id ind
R50112:50112 Equiv Himp ::x_'/'_x_'||'_x not
R50121:50124 Equiv Himp ::x_'/'_x_'||'_x not
R50127:50130 Equiv Himp ::x_'/'_x_'||'_x not
R50114:50118 Equiv Himp ::x_'::='_x not
R50113:50113 Equiv <> X var
R50119:50120 Equiv <> a1 var
R50125:50126 Equiv <> st var
R50131:50136 Imp <> update def
R50143:50143 Equiv <> n var
R50141:50141 Equiv <> X var
R50138:50139 Equiv <> st var
R50104:50106 Coq.Init.Logic <> :type_scope:x_'='_x not
R50093:50097 Imp <> aeval def
R50102:50103 Equiv <> a1 var
R50099:50100 Equiv <> st var
R50107:50107 Equiv <> n var
R50173:50175 Equiv Himp com ind
R50193:50197 Imp <> state def
R50251:50251 Equiv Himp ::x_'/'_x_'||'_x not
R50260:50263 Equiv Himp ::x_'/'_x_'||'_x not
R50266:50269 Equiv Himp ::x_'/'_x_'||'_x not
R50254:50257 Equiv Himp ::x_';;'_x not
R50252:50253 Equiv <> c1 var
R50258:50259 Equiv <> c2 var
R50264:50265 Equiv <> st var
R50270:50273 Equiv <> st'' var
R50233:50235 Equiv Himp ::x_'/'_x_'||'_x not
R50239:50242 Equiv Himp ::x_'/'_x_'||'_x not
R50231:50232 Equiv <> c2 var
R50236:50238 Equiv <> st' var
R50243:50246 Equiv <> st'' var
R50215:50217 Equiv Himp ::x_'/'_x_'||'_x not
R50220:50223 Equiv Himp ::x_'/'_x_'||'_x not
R50213:50214 Equiv <> c1 var
R50218:50219 Equiv <> st var
R50224:50226 Equiv <> st' var
R50307:50311 Imp <> state def
R50320:50323 Imp <> bexp ind
R50335:50337 Equiv Himp com ind
R50411:50411 Equiv Himp ::x_'/'_x_'||'_x not
R50437:50440 Equiv Himp ::x_'/'_x_'||'_x not
R50443:50446 Equiv Himp ::x_'/'_x_'||'_x not
R50412:50415 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50418:50423 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50426:50431 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50434:50436 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50416:50417 Equiv <> b1 var
R50424:50425 Equiv <> c1 var
R50432:50433 Equiv <> c2 var
R50441:50442 Equiv <> st var
R50447:50449 Equiv <> st' var
R50395:50397 Equiv Himp ::x_'/'_x_'||'_x not
R50400:50403 Equiv Himp ::x_'/'_x_'||'_x not
R50393:50394 Equiv <> c1 var
R50398:50399 Equiv <> st var
R50404:50406 Equiv <> st' var
R50367:50369 Coq.Init.Logic <> :type_scope:x_'='_x not
R50356:50360 Imp <> beval def
R50365:50366 Equiv <> b1 var
R50362:50363 Equiv <> st var
R50370:50373 Coq.Init.Datatypes <> true constr
R50484:50488 Imp <> state def
R50497:50500 Imp <> bexp ind
R50512:50514 Equiv Himp com ind
R50591:50591 Equiv Himp ::x_'/'_x_'||'_x not
R50617:50620 Equiv Himp ::x_'/'_x_'||'_x not
R50623:50626 Equiv Himp ::x_'/'_x_'||'_x not
R50592:50595 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50598:50603 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50606:50611 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50614:50616 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50596:50597 Equiv <> b1 var
R50604:50605 Equiv <> c1 var
R50612:50613 Equiv <> c2 var
R50621:50622 Equiv <> st var
R50627:50629 Equiv <> st' var
R50575:50577 Equiv Himp ::x_'/'_x_'||'_x not
R50580:50583 Equiv Himp ::x_'/'_x_'||'_x not
R50573:50574 Equiv <> c2 var
R50578:50579 Equiv <> st var
R50584:50586 Equiv <> st' var
R50545:50547 Coq.Init.Logic <> :type_scope:x_'='_x not
R50534:50538 Imp <> beval def
R50543:50544 Equiv <> b1 var
R50540:50541 Equiv <> st var
R50548:50552 Coq.Init.Datatypes <> false constr
R50661:50664 Imp <> bexp ind
R50673:50677 Imp <> state def
R50686:50688 Equiv Himp com ind
R50732:50732 Equiv Himp ::x_'/'_x_'||'_x not
R50751:50754 Equiv Himp ::x_'/'_x_'||'_x not
R50757:50760 Equiv Himp ::x_'/'_x_'||'_x not
R50733:50738 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50741:50744 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50747:50750 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50739:50740 Equiv <> b1 var
R50745:50746 Equiv <> c1 var
R50755:50756 Equiv <> st var
R50761:50762 Equiv <> st var
R50720:50722 Coq.Init.Logic <> :type_scope:x_'='_x not
R50709:50713 Imp <> beval def
R50718:50719 Equiv <> b1 var
R50715:50716 Equiv <> st var
R50723:50727 Coq.Init.Datatypes <> false constr
R50804:50808 Imp <> state def
R50817:50820 Imp <> bexp ind
R50829:50831 Equiv Himp com ind
R50985:50985 Equiv Himp ::x_'/'_x_'||'_x not
R51004:51007 Equiv Himp ::x_'/'_x_'||'_x not
R51010:51013 Equiv Himp ::x_'/'_x_'||'_x not
R50986:50991 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50994:50997 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51000:51003 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50992:50993 Equiv <> b1 var
R50998:50999 Equiv <> c1 var
R51008:51009 Equiv <> st var
R51014:51017 Equiv <> st'' var
R50929:50929 Equiv Himp ::x_'/'_x_'||'_x not
R50948:50951 Equiv Himp ::x_'/'_x_'||'_x not
R50955:50958 Equiv Himp ::x_'/'_x_'||'_x not
R50930:50935 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50938:50941 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50944:50947 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50936:50937 Equiv <> b1 var
R50942:50943 Equiv <> c1 var
R50952:50954 Equiv <> st' var
R50959:50962 Equiv <> st'' var
R50895:50897 Equiv Himp ::x_'/'_x_'||'_x not
R50900:50903 Equiv Himp ::x_'/'_x_'||'_x not
R50893:50894 Equiv <> c1 var
R50898:50899 Equiv <> st var
R50904:50906 Equiv <> st' var
R50864:50866 Coq.Init.Logic <> :type_scope:x_'='_x not
R50853:50857 Imp <> beval def
R50862:50863 Equiv <> b1 var
R50859:50860 Equiv <> st var
R50867:50870 Coq.Init.Datatypes <> true constr
R51072:51076 Equiv Himp ceval ind
not 51047 Himp ::x_'/'_x_'||'_x
def 51450:51463 Himp havoc_example1
R51467:51467 Equiv Himp ::x_'/'_x_'||'_x not
R51475:51478 Equiv Himp ::x_'/'_x_'||'_x not
R51490:51493 Equiv Himp ::x_'/'_x_'||'_x not
R51468:51473 Equiv Himp ::'HAVOC'_x not
R51474:51474 Imp <> X def
R51479:51489 Imp <> empty_state def
R51494:51499 Imp <> update def
R51513:51513 Imp <> X def
R51501:51511 Imp <> empty_state def
def 51563:51576 Himp havoc_example2
R51582:51582 Equiv Himp ::x_'/'_x_'||'_x not
R51597:51600 Equiv Himp ::x_'/'_x_'||'_x not
R51612:51615 Equiv Himp ::x_'/'_x_'||'_x not
R51587:51589 Equiv Himp ::x_';;'_x not
R51583:51586 Equiv Himp ::'SKIP' not
R51590:51595 Equiv Himp ::'HAVOC'_x not
R51596:51596 Imp <> Z def
R51601:51611 Imp <> empty_state def
R51616:51621 Imp <> update def
R51635:51635 Imp <> Z def
R51623:51633 Imp <> empty_state def
def 51776:51781 Himp cequiv
R51792:51794 Equiv Himp com ind
R51823:51827 Imp <> state def
R51846:51850 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R51834:51836 Equiv Himp ::x_'/'_x_'||'_x not
R51839:51842 Equiv Himp ::x_'/'_x_'||'_x not
R51832:51833 Equiv <> c1 var
R51837:51838 Equiv <> st var
R51843:51845 Equiv <> st' var
R51853:51855 Equiv Himp ::x_'/'_x_'||'_x not
R51858:51861 Equiv Himp ::x_'/'_x_'||'_x not
R51851:51852 Equiv <> c2 var
R51856:51857 Equiv <> st var
R51862:51864 Equiv <> st' var
def 52165:52167 Himp pXY
R52181:52183 Equiv Himp ::x_';;'_x not
R52174:52179 Equiv Himp ::'HAVOC'_x not
R52180:52180 Imp <> X def
R52184:52189 Equiv Himp ::'HAVOC'_x not
R52190:52190 Imp <> Y def
def 52205:52207 Himp pYX
R52221:52223 Equiv Himp ::x_';;'_x not
R52214:52219 Equiv Himp ::'HAVOC'_x not
R52220:52220 Imp <> Y def
R52224:52229 Equiv Himp ::'HAVOC'_x not
R52230:52230 Imp <> X def
prf 52338:52351 Himp pXY_cequiv_pYX
R52371:52374 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R52357:52362 Equiv Himp cequiv def
R52368:52370 Equiv Himp pYX def
R52364:52366 Equiv Himp pXY def
R52375:52375 Coq.Init.Logic <> :type_scope:'~'_x not
R52376:52381 Equiv Himp cequiv def
R52387:52389 Equiv Himp pYX def
R52383:52385 Equiv Himp pXY def
def 52555:52560 Himp ptwice
R52574:52576 Equiv Himp ::x_';;'_x not
R52567:52572 Equiv Himp ::'HAVOC'_x not
R52573:52573 Imp <> X def
R52577:52582 Equiv Himp ::'HAVOC'_x not
R52583:52583 Imp <> Y def
def 52598:52602 Himp pcopy
R52616:52618 Equiv Himp ::x_';;'_x not
R52609:52614 Equiv Himp ::'HAVOC'_x not
R52615:52615 Imp <> X def
R52620:52624 Equiv Himp ::x_'::='_x not
R52619:52619 Imp <> Y def
R52625:52627 Imp <> AId constr
R52629:52629 Imp <> X def
prf 52800:52818 Himp ptwice_cequiv_pcopy
R52843:52846 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R52824:52829 Equiv Himp cequiv def
R52838:52842 Equiv Himp pcopy def
R52831:52836 Equiv Himp ptwice def
R52847:52847 Coq.Init.Logic <> :type_scope:'~'_x not
R52848:52853 Equiv Himp cequiv def
R52862:52866 Equiv Himp pcopy def
R52855:52860 Equiv Himp ptwice def
def 53710:53711 Himp p1
R53715:53717 Equiv Himp com ind
R53724:53730 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53758:53766 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53809:53814 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53731:53734 Imp <> BNot constr
R53737:53739 Imp <> BEq constr
R53750:53753 Imp <> ANum constr
R53742:53744 Imp <> AId constr
R53746:53746 Imp <> X def
R53774:53780 Equiv Himp ::x_';;'_x not
R53767:53772 Equiv Himp ::'HAVOC'_x not
R53773:53773 Imp <> Y def
R53782:53786 Equiv Himp ::x_'::='_x not
R53781:53781 Imp <> X def
R53787:53791 Imp <> APlus constr
R53802:53805 Imp <> ANum constr
R53794:53796 Imp <> AId constr
R53798:53798 Imp <> X def
def 53829:53830 Himp p2
R53834:53836 Equiv Himp com ind
R53843:53849 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53877:53885 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53890:53895 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53850:53853 Imp <> BNot constr
R53856:53858 Imp <> BEq constr
R53869:53872 Imp <> ANum constr
R53861:53863 Imp <> AId constr
R53865:53865 Imp <> X def
R53886:53889 Equiv Himp ::'SKIP' not
prf 54153:54166 Himp p1_may_diverge
R54200:54201 Coq.Init.Logic <> :type_scope:'~'_x not
R54204:54206 Equiv Himp ::x_'/'_x_'||'_x not
R54209:54212 Equiv Himp ::x_'/'_x_'||'_x not
R54202:54203 Equiv Himp p1 def
R54207:54208 Equiv <> st var
R54213:54215 Equiv <> st' var
R54189:54192 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R54185:54186 Equiv <> st var
R54188:54188 Imp <> X def
prf 54261:54274 Himp p2_may_diverge
R54308:54309 Coq.Init.Logic <> :type_scope:'~'_x not
R54312:54314 Equiv Himp ::x_'/'_x_'||'_x not
R54317:54320 Equiv Himp ::x_'/'_x_'||'_x not
R54310:54311 Equiv Himp p2 def
R54315:54316 Equiv <> st var
R54321:54323 Equiv <> st' var
R54297:54300 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R54293:54294 Equiv <> st var
R54296:54296 Imp <> X def
prf 54460:54470 Himp p1_p2_equiv
R54474:54479 Equiv Himp cequiv def
R54484:54485 Equiv Himp p2 def
R54481:54482 Equiv Himp p1 def
def 54667:54668 Himp p3
R54672:54674 Equiv Himp com ind
R54693:54697 Equiv Himp ::x_';;'_x not
R54682:54686 Equiv Himp ::x_'::='_x not
R54681:54681 Imp <> Z def
R54687:54690 Imp <> ANum constr
R54698:54704 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54732:54740 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54762:54767 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54705:54708 Imp <> BNot constr
R54711:54713 Imp <> BEq constr
R54724:54727 Imp <> ANum constr
R54716:54718 Imp <> AId constr
R54720:54720 Imp <> X def
R54748:54754 Equiv Himp ::x_';;'_x not
R54741:54746 Equiv Himp ::'HAVOC'_x not
R54747:54747 Imp <> X def
R54755:54760 Equiv Himp ::'HAVOC'_x not
R54761:54761 Imp <> Z def
def 54782:54783 Himp p4
R54787:54789 Equiv Himp com ind
R54810:54814 Equiv Himp ::x_';;'_x not
R54797:54802 Equiv Himp ::x_'::='_x not
R54809:54809 Equiv Himp ::x_'::='_x not
R54796:54796 Imp <> X def
R54803:54806 Imp <> ANum constr
R54816:54821 Equiv Himp ::x_'::='_x not
R54828:54828 Equiv Himp ::x_'::='_x not
R54815:54815 Imp <> Z def
R54822:54825 Imp <> ANum constr
prf 54841:54853 Himp p3_p4_inequiv
R54857:54858 Coq.Init.Logic <> :type_scope:'~'_x not
R54859:54864 Equiv Himp cequiv def
R54869:54870 Equiv Himp p4 def
R54866:54867 Equiv Himp p3 def
def 54997:54998 Himp p5
R55002:55004 Equiv Himp com ind
R55011:55017 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55045:55053 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55061:55066 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55018:55021 Imp <> BNot constr
R55024:55026 Imp <> BEq constr
R55037:55040 Imp <> ANum constr
R55029:55031 Imp <> AId constr
R55033:55033 Imp <> X def
R55054:55059 Equiv Himp ::'HAVOC'_x not
R55060:55060 Imp <> X def
def 55081:55082 Himp p6
R55086:55088 Equiv Himp com ind
R55096:55100 Equiv Himp ::x_'::='_x not
R55095:55095 Imp <> X def
R55101:55104 Imp <> ANum constr
prf 55119:55129 Himp p5_p6_equiv
R55133:55138 Equiv Himp cequiv def
R55143:55144 Equiv Himp p6 def
R55140:55141 Equiv Himp p5 def
R55198:55201 Equiv Himp <> mod
def 56055:56061 <> stequiv
R56074:56078 Imp <> state def
R56103:56104 SfLib <> id ind
R56113:56115 Coq.Init.Logic <> :type_scope:x_'='_x not
R56108:56110 Equiv <> st1 var
R56112:56112 Equiv <> X var
R56116:56118 Equiv <> st2 var
R56120:56120 Equiv <> X var
R56152:56158 Equiv <> stequiv def
not 56134 <> ::x_'~'_x
prf 56432:56443 <> stequiv_refl
R56460:56464 Imp <> state def
R56473:56475 Equiv <> ::x_'~'_x not
R56471:56472 Equiv <> st var
R56476:56477 Equiv <> st var
prf 56589:56599 <> stequiv_sym
R56621:56625 Imp <> state def
R56651:56653 Equiv <> ::x_'~'_x not
R56648:56650 Equiv <> st2 var
R56654:56656 Equiv <> st1 var
R56635:56637 Equiv <> ::x_'~'_x not
R56632:56634 Equiv <> st1 var
R56638:56640 Equiv <> st2 var
prf 56774:56786 <> stequiv_trans
R56812:56816 Imp <> state def
R56858:56860 Equiv <> ::x_'~'_x not
R56855:56857 Equiv <> st1 var
R56861:56863 Equiv <> st3 var
R56842:56844 Equiv <> ::x_'~'_x not
R56839:56841 Equiv <> st2 var
R56845:56847 Equiv <> st3 var
R56826:56828 Equiv <> ::x_'~'_x not
R56823:56825 Equiv <> st1 var
R56829:56831 Equiv <> st2 var
prf 57010:57023 <> stequiv_update
R57045:57049 Imp <> state def
R57081:57082 SfLib <> id ind
R57088:57090 Coq.Init.Datatypes <> nat ind
R57110:57112 Equiv <> ::x_'~'_x not
R57096:57101 Imp <> update def
R57109:57109 Equiv <> n var
R57107:57107 Equiv <> X var
R57103:57105 Equiv <> st1 var
R57113:57118 Imp <> update def
R57126:57126 Equiv <> n var
R57124:57124 Equiv <> X var
R57120:57122 Equiv <> st2 var
R57058:57060 Equiv <> ::x_'~'_x not
R57055:57057 Equiv <> st1 var
R57061:57063 Equiv <> st2 var
prf 57371:57383 <> stequiv_aeval
R57405:57409 Imp <> state def
R57441:57444 Imp <> aexp ind
R57459:57461 Coq.Init.Logic <> :type_scope:x_'='_x not
R57448:57452 Imp <> aeval def
R57458:57458 Equiv <> a var
R57454:57456 Equiv <> st1 var
R57462:57466 Imp <> aeval def
R57472:57472 Equiv <> a var
R57468:57470 Equiv <> st2 var
R57419:57421 Equiv <> ::x_'~'_x not
R57416:57418 Equiv <> st1 var
R57422:57424 Equiv <> st2 var
prf 57588:57600 <> stequiv_beval
R57622:57626 Imp <> state def
R57658:57661 Imp <> bexp ind
R57676:57678 Coq.Init.Logic <> :type_scope:x_'='_x not
R57665:57669 Imp <> beval def
R57675:57675 Equiv <> b var
R57671:57673 Equiv <> st1 var
R57679:57683 Imp <> beval def
R57689:57689 Equiv <> b var
R57685:57687 Equiv <> st2 var
R57636:57638 Equiv <> ::x_'~'_x not
R57633:57635 Equiv <> st1 var
R57639:57641 Equiv <> st2 var
prf 57919:57931 <> stequiv_ceval
R57952:57956 Imp <> state def
R57988:57990 Imp <> com ind
R58000:58004 Imp <> state def
R58037:58043 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R58056:58062 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R58096:58096 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R58051:58055 Imp <> state def
R58063:58063 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R58079:58084 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R58065:58067 Imp <> ::x_'/'_x_'||'_x not
R58071:58074 Imp <> ::x_'/'_x_'||'_x not
R58064:58064 Equiv <> c var
R58068:58070 Equiv <> st2 var
R58075:58078 Equiv <> st2' var
R58089:58091 Equiv <> ::x_'~'_x not
R58085:58088 Equiv <> st1' var
R58092:58095 Equiv <> st2' var
R58014:58016 Imp <> ::x_'/'_x_'||'_x not
R58020:58023 Imp <> ::x_'/'_x_'||'_x not
R58013:58013 Equiv <> c var
R58017:58019 Equiv <> st1 var
R58024:58027 Equiv <> st1' var
R57965:57967 Equiv <> ::x_'~'_x not
R57962:57964 Equiv <> st1 var
R57968:57970 Equiv <> st2 var
R58310:58315 Imp <> update def
R58310:58315 Imp <> update def
R58387:58399 Equiv <> stequiv_aeval prfax
R58387:58399 Equiv <> stequiv_aeval prfax
R58428:58441 Equiv <> stequiv_update prfax
R58428:58441 Equiv <> stequiv_update prfax
R58619:58623 Imp <> E_Seq constr
R58619:58623 Imp <> E_Seq constr
R58774:58781 Imp <> E_IfTrue constr
R58774:58781 Imp <> E_IfTrue constr
R58815:58827 Equiv <> stequiv_beval prfax
R58815:58827 Equiv <> stequiv_beval prfax
R58978:58986 Imp <> E_IfFalse constr
R58978:58986 Imp <> E_IfFalse constr
R59019:59031 Equiv <> stequiv_beval prfax
R59019:59031 Equiv <> stequiv_beval prfax
R59131:59140 Imp <> E_WhileEnd constr
R59131:59140 Imp <> E_WhileEnd constr
R59173:59185 Equiv <> stequiv_beval prfax
R59173:59185 Equiv <> stequiv_beval prfax
R59389:59399 Imp <> E_WhileLoop constr
R59389:59399 Imp <> E_WhileLoop constr
R59450:59462 Equiv <> stequiv_beval prfax
R59450:59462 Equiv <> stequiv_beval prfax
ind 59932:59937 <> ceval'
constr 59978:59984 <> E_equiv
R59957:59961 Imp <> state def
R59948:59952 Imp <> state def
R59941:59943 Imp <> com ind
R60106:60111 Equiv <> ceval' ind
R60055:60057 Equiv <> ::x_'/'_x_'||'''_x not
R60060:60064 Equiv <> ::x_'/'_x_'||'''_x not
R60054:60054 Equiv <> c var
R60058:60059 Equiv <> st var
R60065:60068 Equiv <> st'' var
R60039:60041 Equiv <> ::x_'~'_x not
R60036:60038 Equiv <> st' var
R60042:60045 Equiv <> st'' var
R60015:60017 Imp <> ::x_'/'_x_'||'_x not
R60020:60023 Imp <> ::x_'/'_x_'||'_x not
R60014:60014 Equiv <> c var
R60018:60019 Equiv <> st var
R60024:60026 Equiv <> st' var
R60106:60111 Equiv <> ceval' ind
not 60080 <> ::x_'/'_x_'||'''_x
def 60201:60207 <> cequiv'
R60218:60220 Imp <> com ind
R60252:60256 Imp <> state def
R60264:60264 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R60280:60286 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R60302:60302 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R60267:60269 Equiv <> ::x_'/'_x_'||'''_x not
R60272:60276 Equiv <> ::x_'/'_x_'||'''_x not
R60265:60266 Equiv <> c1 var
R60270:60271 Equiv <> st var
R60277:60279 Equiv <> st' var
R60289:60291 Equiv <> ::x_'/'_x_'||'''_x not
R60294:60298 Equiv <> ::x_'/'_x_'||'''_x not
R60287:60288 Equiv <> c2 var
R60292:60293 Equiv <> st var
R60299:60301 Equiv <> st' var
prf 60474:60488 <> cequiv__cequiv'
R60507:60509 Imp <> com ind
R60531:60537 Equiv <> cequiv' def
R60542:60543 Equiv <> c2 var
R60539:60540 Equiv <> c1 var
R60515:60520 Equiv <> cequiv def
R60525:60526 Equiv <> c2 var
R60522:60523 Equiv <> c1 var
R60563:60568 Equiv <> cequiv def
R60571:60577 Equiv <> cequiv' def
R60629:60635 Equiv <> E_equiv constr
R60629:60635 Equiv <> E_equiv constr
R60731:60737 Equiv <> E_equiv constr
R60731:60737 Equiv <> E_equiv constr
def 60961:60980 <> identity_assignment'
R60986:60992 Equiv <> cequiv' def
R61001:61005 Imp <> ::x_'::='_x not
R61000:61000 Imp <> X def
R61006:61008 Imp <> AId constr
R61010:61010 Imp <> X def
R60994:60997 Imp <> ::'SKIP' not
R61032:61038 Equiv <> cequiv' def
R61167:61172 Imp <> update def
R61187:61187 Imp <> X def
R61179:61179 Imp <> X def
R61153:61159 Equiv <> E_equiv constr
R61167:61172 Imp <> update def
R61187:61187 Imp <> X def
R61179:61179 Imp <> X def
R61153:61159 Equiv <> E_equiv constr
R61232:61244 Equiv <> stequiv_trans prfax
R61232:61244 Equiv <> stequiv_trans prfax
R61272:61278 Equiv <> stequiv def
R61295:61305 Imp <> update_same thm
R61295:61305 Imp <> update_same thm
prf 62682:62712 <> swap_noninterfering_assignments
R62816:62821 Equiv <> cequiv def
R62865:62867 Imp <> ::x_';;'_x not
R62858:62862 Imp <> ::x_'::='_x not
R62856:62857 Equiv <> l2 var
R62863:62864 Equiv <> a2 var
R62870:62874 Imp <> ::x_'::='_x not
R62868:62869 Equiv <> l1 var
R62875:62876 Equiv <> a1 var
R62837:62839 Imp <> ::x_';;'_x not
R62830:62834 Imp <> ::x_'::='_x not
R62828:62829 Equiv <> l1 var
R62835:62836 Equiv <> a1 var
R62842:62846 Imp <> ::x_'::='_x not
R62840:62841 Equiv <> l2 var
R62847:62848 Equiv <> a2 var
R62784:62803 Equiv <> var_not_used_in_aexp ind
R62808:62809 Equiv <> a1 var
R62805:62806 Equiv <> l2 var
R62752:62771 Equiv <> var_not_used_in_aexp ind
R62776:62777 Equiv <> a2 var
R62773:62774 Equiv <> l1 var
R62739:62742 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R62737:62738 Equiv <> l1 var
R62743:62744 Equiv <> l2 var
